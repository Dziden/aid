Функция ОтправитьГП(МассивНомеров, ТекстСообщения, Знач Организация = Неопределено, КешНастроекПровайдера = Неопределено) Экспорт
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	// Подготовка строки получателей.
	СтрокаПолучателей = МассивПолучателейСтрокой(МассивНомеров);
	
	// Проверка на заполнение обязательных параметров.
	Если ПустаяСтрока(СтрокаПолучателей) Или ПустаяСтрока(ТекстСообщения) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверные параметры сообщения'");
		Возврат Результат;
	КонецЕсли;
	
	Если КешНастроекПровайдера = Неопределено тогда
		КешНастроекПровайдера = табАид_ОтправкаГолосовойПочты.НастройкиОтправкиГП(Организация);
	КонецЕсли;
	
	// Подготовка параметров запроса.
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("number", МассивНомеров);  //передаем массив номеров
	ПараметрыЗапроса.Вставить("text",   ТекстСообщения);
	// Отправка запроса.
	Ответ = ВыполнитьЗапрос(ПараметрыЗапроса, КешНастроекПровайдера);
	Если Ответ = Неопределено Тогда
		Результат.ОписаниеОшибки = Результат.ОписаниеОшибки + НСтр("ru = 'Соединение не установлено'");
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого КлючИзначение из Ответ Цикл
		ОтправленноеСообщение = Новый Структура("НомерПолучателя,ИдентификаторСообщения",
		КлючИзначение.Ключ, КлючИзначение.Значение.ОтветСервера);
		Результат.ОтправленныеСообщения.Добавить(ОтправленноеСообщение);	
	КонецЦикла;	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапрос(ПараметрыЗапроса, КешНастроекПровайдера)
	
	соотвОтвет = Новый Соответствие; //номер + результат
	стррРезультат = Новый Структура;
	стррРезультат.Вставить("ЗапросВыполнен", Ложь);
	стррРезультат.Вставить("ОтветСервера", "");
	
	
	мПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", Истина);
	
	мЗапись = Новый ЗаписьJSON;
	мЧтение = новый ЧтениеJSON;
	
	мЗапись.ПроверятьСтруктуру = Истина;
	
	Для Каждого ТекущийНомер из ПараметрыЗапроса.МассивНомеров Цикл
		
		Если Не ПустаяСтрока(ТекущийНомер) тогда
			
			СтруктураДанных = новый Структура("number, text");
			
			Если СтрНайти(ТекущийНомер, ", доб.") тогда
				ПозицияОсновнойТелефон   = СтрНайти(ТекущийНомер, ", доб.") - 1;   //без запятой
				ПозицияДобавочныйТелефон = ПозицияОсновнойТелефон + 8;
				СтруктураДанных.Вставить("number",           ФорматироватьНомер(Лев(ТекущийНомер, ПозицияОсновнойТелефон)));
			Иначе	
				СтруктураДанных.Вставить("number", ФорматироватьНомер(ТекущийНомер)); 
			КонецЕсли;
			
			СтруктураДанных.text   = ПараметрыЗапроса.text;
			
			ИмяФайлаJSON   = ПолучитьИмяВременногоФайла("json");
			мЗапись.ОткрытьФайл(ИмяФайлаJSON, , , мПараметрыJSON);
			мЗапись.ЗаписатьНачалоОбъекта();
			мЗапись.ЗаписатьИмяСвойства("entity");
			мЗапись.ЗаписатьЗначение("bpmsync");
			мЗапись.ЗаписатьИмяСвойства("action");
			мЗапись.ЗаписатьЗначение("announce");
			мЗапись.ЗаписатьИмяСвойства("options");
			
			ЗаписатьJSON(мЗапись, СтруктураДанных);
			
			мЗапись.ЗаписатьКонецОбъекта();
			
			СтрокаJSON = мЗапись.Закрыть();
			
			ssl = новый ЗащищенноеСоединениеOpenSSL();
			
			HTTPСоединение = Новый HTTPСоединение(
			"sbtgl1apws.call2tell.online",,,,,
			, // таймаут в секундах
			
			ssl // защищенное HTTPS соединение
			);
			HTTPЗапрос = новый HTTPЗапрос("/api/token/v1/" + КешНастроекПровайдера.ПарольТелефония);
			HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаJSON);
			
			ИмяВходногоФайла = ПолучитьИмяВременногоФайла("json");
			Попытка
				ОтветСервера = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос, ИмяВходногоФайла);
				
				Ответ       = новый Структура();
				ИмяСвойства = Неопределено;
				ЕстьДоступ  = Неопределено;
				Данные      = Неопределено;
				Ошибка      = "";
				
				мЧтение.ОткрытьФайл(ИмяВходногоФайла);
				Пока мЧтение.Прочитать() Цикл
					Если мЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта
						или мЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта тогда
						//ничего не делаем
					ИначеЕсли мЧтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства тогда	
						ИмяСвойства = мЧтение.ТекущееЗначение;
					иначе
						Ответ.Вставить(ИмяСвойства, мЧтение.ТекущееЗначение);
					КонецЕсли;	
				КонецЦикла;
				
				Если Ответ.Свойство("success", ЕстьДоступ) Тогда
					Если ЕстьДоступ тогда
						стррРезультат.ЗапросВыполнен = Истина;
						стррРезультат.ОтветСервера = "Успех (успешная коммутация)." + ?(Ответ.Свойство("data", Данные), Символы.ПС + Данные, "");
					иначе
						Если Ответ.Свойство("error", Ошибка) Тогда
							Если Ошибка = "Announce parsing error" тогда
								стррРезультат.ОтветСервера = "Ошибка разбора в формировании запроса к серверу.";
							ИначеЕсли Ошибка = "Announce Not success" тогда
								стррРезультат.ОтветСервера = "Неудача (например, сипюзер не зарегистрирован и звонок не может быть осуществлен)."
							ИначеЕсли Ошибка = "Announce error" тогда
								стррРезультат.ОтветСервера = "Ошибка (внутренняя ошибка)."
							ИначеЕсли Ошибка = "Announce No answer" тогда
								стррРезультат.ОтветСервера = "Нет ответа (абонент не берет трубку в течение 9 секунд)."
							иначе
								стррРезультат.ОтветСервера = "Ошибка " + Ошибка + "."
							КонецЕсли;
						иначе	
							стррРезультат.ОтветСервера = "Внутренняя ошибка сервера. " + ОписаниеОшибки();
						КонецЕсли;	
					КонецЕсли;
				иначе
					стррРезультат.ОтветСервера = "Ошибка разбора ответа от сервера."
				КонецЕсли;
			Исключение
				стррРезультат.ОтветСервера = ОписаниеОшибки();
			КонецПопытки;
			
			Файл = новый Файл(ИмяФайлаJSON);
			Если Файл.Существует() тогда
				Попытка
					УдалитьФайлы(ИмяФайлаJSON);
				Исключение
				КонецПопытки;
			КонецЕсли;
			Файл = новый Файл(ИмяВходногоФайла);
			Если Файл.Существует() тогда
				Попытка
					УдалитьФайлы(ИмяФайлаJSON);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			соотвОтвет.Вставить(ТекущийНомер, стррРезультат);
		КонецЕсли;
		
	КонецЦикла;
	Возврат соотвОтвет;
	
КонецФункции

Функция МассивПолучателейСтрокой(Массив)
	Результат = "";
	Для Каждого Элемент Из Массив Цикл
		Номер = ФорматироватьНомер(Элемент);
		Если НЕ ПустаяСтрока(Номер) Тогда 
			Если Не ПустаяСтрока(Результат) Тогда
				Результат = Результат + ",";
			КонецЕсли;
			Результат = Результат + Номер;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ФорматироватьНомер(Номер)
	Результат = "";
	ДопустимыеСимволы = "1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;	
КонецФункции

Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	Настройки.АдресОписанияУслугиВИнтернете = "";
	Настройки.ПриОпределенииСпособовАвторизации = Истина;
	
КонецПроцедуры

Процедура ПриОпределенииСпособовАвторизации(СпособыАвторизации) Экспорт
	
	ПоляАвторизации = Новый СписокЗначений;
	ПоляАвторизации.Добавить("Пароль", НСтр("ru = 'Токен'"));
	СпособыАвторизации.Вставить("ПоКлючу", ПоляАвторизации);
	
КонецПроцедуры