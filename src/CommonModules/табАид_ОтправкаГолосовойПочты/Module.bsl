// Отправляет ГС через настроенного поставщика услуги, возвращает идентификатор сообщения.
//
// Параметры:
//  НомераПолучателей  - Массив - массив строк номеров получателей в формате +7ХХХХХХХХХХ;
//  Текст              - Строка - текст сообщения, максимальная длина у операторов может быть разной;
//
// Возвращаемое значение:
//  Структура - результат отправки:
//    * ОтправленныеСообщения - Массив - массив структур:
//      ** НомерПолучателя - Строка - номер получателя ГС.
//      ** ИдентификаторСообщения - Строка - идентификатор ГС, присвоенный провайдером для отслеживания доставки.
//    * ОписаниеОшибки - Строка - пользовательское представление ошибки, если пустая строка, то ошибки нет.
//
Функция ОтправитьГП(НомераПолучателей, Знач Текст) Экспорт
	
	Результат = Новый Структура("ОтправленныеСообщения,ОписаниеОшибки", Новый Массив, "");
	
	Если Не ЗначениеЗаполнено(СтрСоединить(НомераПолучателей, "")) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не указан номер получателя голосовой почты.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Не НастройкаОтправкиГПВыполнена() Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Неверно заданы настройки провайдера для отправки голосовой почты.'");
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиГП = НастройкиОтправкиГП();
	УстановитьПривилегированныйРежим(Ложь);
	
	МодульОтправкаГПЧерезПровайдера = МодульОтправкаГПЧерезПровайдера(НастройкиОтправкиГП.ПровайдерТелефония);
	Если МодульОтправкаГПЧерезПровайдера <> Неопределено Тогда
		Результат = МодульОтправкаГПЧерезПровайдера.ОтправитьГП(НомераПолучателей, Текст, Неопределено, НастройкиОтправкиГП);
	Иначе
		Результат.ОписаниеОшибки = "Для провайдера " + НастройкиОтправкиГП.ПровайдерТелефония + " не определены обработчики (общие модули) отправки голосовой почты.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрашивает статус доставки сообщения у поставщика услуг.
//
// Параметры:
//  ИдентификаторСообщения - Строка - идентификатор, присвоенный ГП при отправке;
//
// Возвращаемое значение:
//  Строка - статус доставки сообщения, который вернул поставщик услуг:
//           "НеОтправлялось" - сообщение еще не было обработано поставщиком услуг (в очереди);
//           "Отправляется"   - сообщение стоит в очереди на отправку у провайдера;
//           "Отправлено"     - сообщение отправлено, ожидается подтверждение о доставке;
//           "НеОтправлено"   - сообщение не отправлено (недостаточно средств на счете, перегружена сеть оператора);
//           "Доставлено"     - сообщение доставлено адресату;
//           "НеДоставлено"   - сообщение не удалось доставить (абонент недоступен, время ожидания подтверждения
//                              доставки от абонента истекло);
//           "Ошибка"         - не удалось получить статус у поставщика услуг (статус неизвестен).
//
Функция СтатусДоставки(Знач ИдентификаторСообщения) Экспорт
	
	Если ПустаяСтрока(ИдентификаторСообщения) Тогда
		Возврат "НеОтправлялось";
	КонецЕсли;
	
	Результат = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиГП = НастройкиОтправкиГП();
	УстановитьПривилегированныйРежим(Ложь);
	
	МодульОтправкаГПЧерезПровайдера = МодульОтправкаГПЧерезПровайдера(НастройкиОтправкиГП.ПровайдерТелефония);
	Если МодульОтправкаГПЧерезПровайдера <> Неопределено Тогда
		Результат = МодульОтправкаГПЧерезПровайдера.СтатусДоставки(ИдентификаторСообщения, НастройкиОтправкиГП);
	Иначе // провайдер не выбран
		Результат = "Ошибка";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет правильность сохраненных настроек отправки SMS.
//
// Возвращаемое значение:
//  Булево - Истина, если отправка SMS уже настроена.
Функция НастройкаОтправкиГПВыполнена(Знач Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиОтправкиГП = НастройкиОтправкиГП(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(НастройкиОтправкиГП.ПровайдерТелефония) Тогда
		НастройкиПровайдера = НастройкиПровайдера(НастройкиОтправкиГП.ПровайдерТелефония);
		
		ПоляАвторизации = СпособыАвторизацииПровайдераПоУмолчанию().ПоЛогинуИПаролю;
		Если НастройкиОтправкиГП.Свойство("СпособАвторизацииТелефония") И ЗначениеЗаполнено(НастройкиОтправкиГП.СпособАвторизацииТелефония)
			И НастройкиПровайдера.СпособыАвторизации.Свойство(НастройкиОтправкиГП.СпособАвторизацииТелефония) Тогда
			
			ПоляАвторизации = НастройкиПровайдера.СпособыАвторизации[НастройкиОтправкиГП.СпособАвторизацииТелефония];
		КонецЕсли;
		
		Отказ = Ложь;
		Для Каждого Поле Из ПоляАвторизации Цикл
			мПоле = Поле.Значение + "Телефония";
			Если Не ЗначениеЗаполнено(НастройкиОтправкиГП[мПоле]) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Не Отказ;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НастройкиОтправкиГП(Знач Организация = Неопределено) Экспорт
	
	Результат = Новый Структура("ПровайдерТелефония,ЛогинТелефония,ПарольТелефония,СпособАвторизацииТелефония,ПереводВызова,ТокенМужской,ТокенЖенский,ТокенЖенскийПеревод,ТокенМужскойПеревод,КлючБС");
	
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	табАид_Настройки.ПровайдерТелефония КАК ПровайдерТелефония,
	|	табАид_Настройки.ЛогинТелефония КАК ЛогинТелефония,
	|	табАид_Настройки.ПарольТелефония КАК ПарольТелефония,
	|	табАид_Настройки.СпособАвторизацииТелефония КАК СпособАвторизацииТелефония,
	|	табАид_Настройки.ПереводВызова КАК ПереводВызова,
	|	табАид_Настройки.ТокенМужской КАК ТокенМужской,
	|	табАид_Настройки.ТокенЖенский КАК ТокенЖенский,
	|	табАид_Настройки.ТокенЖенскийПеревод КАК ТокенЖенскийПеревод,
	|	табАид_Настройки.ТокенМужскойПеревод КАК ТокенМужскойПеревод,
	|	табАид_Настройки.КлючБС КАК КлючБС	
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	табАид_Настройки.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	2,
	|	табАид_Настройки.ПровайдерТелефония,
	|	табАид_Настройки.ЛогинТелефония,
	|	табАид_Настройки.ПарольТелефония,
	|	табАид_Настройки.СпособАвторизацииТелефония,
	|	табАид_Настройки.ПереводВызова,
	|	табАид_Настройки.ТокенМужской КАК ТокенМужской,
	|	табАид_Настройки.ТокенЖенский КАК ТокенЖенский,
	|	табАид_Настройки.ТокенЖенскийПеревод КАК ТокенЖенскийПеревод,
	|	табАид_Настройки.ТокенМужскойПеревод КАК ТокенМужскойПеревод,
	|	табАид_Настройки.КлючБС	
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СпособыАвторизацииПровайдераПоУмолчанию()
	
	СпособыАвторизации = Новый Структура;
	
	ПоляАвторизации = Новый СписокЗначений;
	ПоляАвторизации.Добавить("Логин", НСтр("ru = 'Логин'"));
	ПоляАвторизации.Добавить("Пароль", НСтр("ru = 'Пароль'"), Истина);
	
	СпособыАвторизации.Вставить("ПоЛогинуИПаролю", ПоляАвторизации);
	
	Возврат СпособыАвторизации;
	
КонецФункции

Функция МодульОтправкаГПЧерезПровайдера(Провайдер) Экспорт
	Возврат МодулиПровайдеров()[Провайдер];
КонецФункции

Функция МодулиПровайдеров()
	Результат = Новый Соответствие;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Перечисления.табАид_ПровайдерыТелефонии.ЗначенияПеречисления Цикл
		ИмяМодуля = "табАид_ОтправкаГолосовойПочтыЧерез1С";
		Если Метаданные.ОбщиеМодули.Найти(ИмяМодуля) <> Неопределено Тогда
			Результат.Вставить(Перечисления.табАид_ПровайдерыТелефонии[ОбъектМетаданных.Имя], ОбщегоНазначения.ОбщийМодуль(ИмяМодуля));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НастройкиПровайдераПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("ПриОпределенииСпособовАвторизации", Ложь);
	Результат.Вставить("АдресОписанияУслугиВИнтернете", "");
	Результат.Вставить("СпособыАвторизации", СпособыАвторизацииПровайдераПоУмолчанию());
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиПровайдера(Провайдер) Экспорт
	
	НастройкиПровайдера = НастройкиПровайдераПоУмолчанию();
	МодульОтправкаГПЧерезПровайдера = МодульОтправкаГПЧерезПровайдера(Провайдер);
	
	Если МодульОтправкаГПЧерезПровайдера <> Неопределено Тогда
		МодульОтправкаГПЧерезПровайдера.ПриОпределенииНастроек(НастройкиПровайдера);
		Если НастройкиПровайдера.ПриОпределенииСпособовАвторизации Тогда
			МодульОтправкаГПЧерезПровайдера.ПриОпределенииСпособовАвторизации(НастройкиПровайдера.СпособыАвторизации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиПровайдера;
	
КонецФункции

