Функция ПолучитьДанныеДляФормированияСобытияТАБАИД(Знач ВидДоговора, 
	Знач СтатусПартнера, 
	Знач Партнер,
	Знач ОбъектРасчетов,
	Знач ДеньНедели,
	Знач КоличествоДнейЗадолженности,
	Знач Сумма) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Партнер",                     Партнер);
	Запрос.УстановитьПараметр("ВидДоговора",                 ВидДоговора);
	Запрос.УстановитьПараметр("СтатусПартнера",              СтатусПартнера);
	
	Если ОбъектРасчетов <> Неопределено Тогда 
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	иначе
		Запрос.УстановитьПараметр("ОбъектРасчетов", Неопределено);
		
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ДеньНедели",                  ДеньНедели);
	Запрос.УстановитьПараметр("КоличествоДнейЗадолженности", КоличествоДнейЗадолженности);
	Запрос.УстановитьПараметр("ПустойПартнер",        Справочники.Партнеры.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидДоговора",    Справочники.табАид_ВидыДоговоров.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСтатусПартнера", Справочники.табАид_СтатусыПартнеров.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойОбъектРасчетов", Неопределено);
	Запрос.УстановитьПараметр("ПустойДеньНедели",     0);  //любой день недели
	Запрос.УстановитьПараметр("ПустойКоличествоДнейЗадолженности", 0);  //любое количество дней задолженности
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	//1. Партнер, Объект расчетов, День недели, Количество дней задолженности
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	1 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила, 
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	Партнер = &Партнер И
	|	ОбъектРасчетов = &ОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//2. Партнер, День недели,	Количество дней задолженности
	|ВЫБРАТЬ
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	2 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила,
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	Партнер = &Партнер И
	|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//3. Статус партнера, Партнер, День недели,	Количество дней задолженности
	|ВЫБРАТЬ
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	3 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила,
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	СтатусПартнера = &СтатусПартнера И
	|	Партнер = &Партнер И
	|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//4. Вид договора, Партнер, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	4 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила,
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	ВидДоговора = &ВидДоговора И
	|	Партнер = &Партнер И
	|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//5. Вид договора, Статус партнера, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	5 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила,
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	ВидДоговора = &ВидДоговора И
	|	СтатусПартнера = &СтатусПартнера И
	|	Партнер = &ПустойПартнер И
	|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//6. Статус партнера, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	6 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила,
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	ВидДоговора = &ПустойВидДоговора И
	|	СтатусПартнера = &СтатусПартнера И
	|	Партнер = &ПустойПартнер И
	|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|
	|ОБЪЕДИНИТЬ
	|
	//7. Вид договора, День недели, Количество дней задолженности
	|ВЫБРАТЬ
	|	ВидДоговора,
	|   СтатусПартнера,
	|   Партнер,
	|   ОбъектРасчетов,
	|   ДеньНедели,
	|   КоличествоДнейЗадолженности,
	|	7 КАК Приоритет,
	|	ТипСообщения,
	|	ВремяНачала,
	|	ВремяОкончания,
	|	ИнтервалСообщений,
	|	КоличествоПовторов,
	|	УчитыватьЧасовойПояс,
	|	ШаблонСообщения,
	|	РазовоеУведомление,
	|   КлючРегламентногоЗадания,
	|   КлючПравила,
	|	ДетализироватьПоОбъектамРасчетов
	|
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий
	|
	|ГДЕ
	|	
	|	ВидДоговора = &ВидДоговора И
	|	СтатусПартнера = &ПустойСтатусПартнера И
	|	Партнер = &ПустойПартнер И
	|	ОбъектРасчетов = &ПустойОбъектРасчетов И
	|	ДеньНедели = &ДеньНедели И
	|	КоличествоДнейЗадолженности = &КоличествоДнейЗадолженности
	|";
	
	Если КоличествоДнейЗадолженности > 0 тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ
		|
		//8. учитываем только партнера, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для партнера)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	8 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ПустойВидДоговора И
		|	СтатусПартнера = &ПустойСтатусПартнера И
		|	Партнер = &Партнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		//8.1. учитываем только Статус и Вид договора, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для партнера)
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	9 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ВидДоговора И
		|	СтатусПартнера = &СтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		
		
		|
		|ОБЪЕДИНИТЬ
		|
		//9. учитываем только вид договора, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для вида договора)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	10 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ВидДоговора И
		|	СтатусПартнера = &ПустойСтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ 
		|
		//10. учитываем только статус партнера, день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай для статуса партнера)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	11 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ПустойВидДоговора И
		|	СтатусПартнера = &СтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//11. учитываем только день недели, дни задолженности (>0) и пустой объект расчетов (как общий случай)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	12 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ПустойВидДоговора И
		|	СтатусПартнера = &ПустойСтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности > 0 И &КоличествоДнейЗадолженности > КоличествоДнейЗадолженности
		|";
	иначе
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ
		|
		//12. учитываем только партнера, день недели, дни задолженности(<0, как оповещение до наступления события) и пустой объект расчетов (как общий случай для партнера)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	13 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ПустойВидДоговора И
		|	СтатусПартнера = &ПустойСтатусПартнера И
		|	Партнер = &Партнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//13. учитываем только вид договора, день недели, дни задолженности(<0, как оповещение до наступления события) 
		//и пустой объект расчетов (как общий случай для вида договора)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	14 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ВидДоговора И
		|	СтатусПартнера = &ПустойСтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//14. учитываем только статус партнера, день недели, дни задолженности(<0, как оповещение до наступления события) 
		//и пустой объект расчетов (как общий случай для статуса партнера)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	15 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ПустойВидДоговора И
		|	СтатусПартнера = &СтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|
		|ОБЪЕДИНИТЬ
		|
		//15. учитываем только день недели, дни задолженности(<0, как оповещение до наступления события) и пустой объект расчетов (как общий случай)
		|ВЫБРАТЬ
		|	ВидДоговора,
		|   СтатусПартнера,
		|   Партнер,
		|   ОбъектРасчетов,
		|   ДеньНедели,
		|   КоличествоДнейЗадолженности,
		|	16 КАК Приоритет,
		|	ТипСообщения,
		|	ВремяНачала,
		|	ВремяОкончания,
		|	ИнтервалСообщений,
		|	КоличествоПовторов,
		|	УчитыватьЧасовойПояс,
		|	ШаблонСообщения,
		|	РазовоеУведомление,
		|   КлючРегламентногоЗадания,
		|   КлючПравила,
		|	ДетализироватьПоОбъектамРасчетов
		|
		|ИЗ
		|	РегистрСведений.табАид_ПравилаФормированияСобытий
		|
		|ГДЕ
		|	
		|	ВидДоговора = &ПустойВидДоговора И
		|	СтатусПартнера = &ПустойСтатусПартнера И
		|	Партнер = &ПустойПартнер И
		|	ОбъектРасчетов = &ПустойОбъектРасчетов И
		|	ДеньНедели = &ДеньНедели И
		|	КоличествоДнейЗадолженности < 0 И &КоличествоДнейЗадолженности = КоличествоДнейЗадолженности
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|   КоличествоДнейЗадолженности убыв
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Очистить();
	
	Пока Выборка.Следующий() Цикл
		// Проверяем, отправлялось ли сообщение партнеру по шаблону.
		Если НужноОтправлятьСообщениеПартнеру(Партнер, ОбъектРасчетов, Выборка.КлючПравила,Сумма) Тогда
			НоваяСтр = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Выборка);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НужноОтправлятьСообщениеПартнеру(Партнер, ОбъектРасчетов, КлючПравила,Сумма)
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ЖурналСобытий.Партнер КАК Партнер,
	|	табАид_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	табАид_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	табАид_ЖурналСобытий.КлючПравила КАК КлючПравила,
	|	табАид_ЖурналСобытий.СтатусСобытия КАК Отправлено
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	табАид_ЖурналСобытий.СтатусСобытия
	|	И табАид_ЖурналСобытий.Партнер = &Партнер
	|	И табАид_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
	|	И табАид_ЖурналСобытий.КлючПравила = &КлючПравила
	|	И табАид_ЖурналСобытий.Сумма = &Сумма
	
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ 
	|	ИсключенныеИзРассылки.Партнер,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ РегистрСведений.табАид_НеВключатьВРассылку КАК ИсключенныеИзРассылки
	|ГДЕ
	|	ИсключенныеИзРассылки.Партнер = &Партнер
	|";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("КлючПравила", КлючПравила);
	Запрос.УстановитьПараметр("Сумма", Сумма);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ВыполнитьЗаполнениеСпискаЗадолженностиДляСообщений() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДатаОтчета = КонецДня(ТекущаяДата());
	ДатаАктуальностиРасчетов = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Дата(3999,11,30), , "РасчетыСКлиентами");
	ДатаАктуальности = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(ДатаОтчета, , "РасчетыСКлиентами");
	
	Если Не ДатаАктуальности = Неопределено и ДатаАктуальности < ДатаОтчета Тогда 
		ТекстПредупреждения = "Внимание!! Распределение расчетов по клиентам выполнено до %ДатаАктуальности%. Данные могут быть не корректны.";
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ДатаАктуальности%", Формат(ДатаАктуальности, "ДЛФ=D"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
	КонецЕсли;
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(ВременныеТаблицы, ДатаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДебиторскойЗадолженности(1);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТаблицаЗадолженностей.Контрагент В (&Контрагент)","");
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	ПараметрыДЗ = ПолучитьПараметрыДебиторскойЗадолженностиПоУмолчанию();
	Запрос.УстановитьПараметр("ПраваяГраницаОтчета",                  КонецДня((ДатаОтчета + 4*ПараметрыДЗ.Сутки)));
	Запрос.УстановитьПараметр("ДатаОтчета",                           ДатаОтчета);
	Запрос.УстановитьПараметр("ДатаОстатков",                         Новый Граница(КонецДня(КонецДня(ДатаОтчета) + 1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта",                               ПараметрыДЗ.Валюта);
	Запрос.УстановитьПараметр("ДанныеОтчета",                         ПараметрыДЗ.ДанныеОтчета);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуПартнеров", Ложь);
	Запрос.УстановитьПараметр("ВсеДолги",                             ПараметрыДЗ.ВсеДолги);
	Запрос.УстановитьПараметр("СтрокаДолгНеПросрочен",                "0 дней");
	Запрос.УстановитьПараметр("ВключатьЗадолженность", 				  ПолучитьНастройкуЗадолженности());
	Запрос.УстановитьПараметр("ДатаОтчетаГраница", 				      КонецДня((ДатаОтчета + 4*ПараметрыДЗ.Сутки)));
	Запрос.УстановитьПараметр("ДатаАктуальностиДЗ", 				  ПолучитьДатуАктуальностиДЗ());
	Запрос.УстановитьПараметр("СтрокаСостояниеВзаиморасчетов", 		  НСтр("ru='Состояние взаиморасчетов'"));
	МассивОрганизаций = ПолучитьОрганизацииДЗ();
	Запрос.УстановитьПараметр("Организации", 					  МассивОрганизаций);
	
	Если Не ПараметрыДЗ.Свойство("ВариантКлассификации") Тогда
		Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    Справочники.ВариантыКлассификацииЗадолженности.ПустаяСсылка());
		Запрос.УстановитьПараметр("Календарь",                            Справочники.ПроизводственныеКалендари.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    ПараметрыДЗ.ВариантКлассификации);
		Запрос.УстановитьПараметр("Календарь",                            ПараметрыДЗ.Календарь);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	лпТаблица = Результат.Скопировать();
	лпТаблица.Очистить();
	лпТаблица.Колонки.Добавить("ДетализироватьПоОбъектамРасчетов", Новый ОписаниеТипов("Булево"));
	лпТаблица.Колонки.Добавить("КлючРегламентногоЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	лпТаблица.Колонки.Добавить("КлючПравила", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ДеньНеделиОтчета = ДеньНедели(ДатаОтчета + 1);
	Для каждого СтрокаРезультат из Результат Цикл
		Если СтрокаРезультат.ИсключенИзРассылки Тогда
			Продолжить;
		КонецЕсли;
		
		//Кол-во дней задолженности расчитаны на следующий день.
		//Для ТекДатаПлюс1 это будет на 1 сутки больше
		Если ПараметрыДЗ.ВсеДолги и СтрокаРезультат.КоличествоДней = 0 тогда
			КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДнейДоПлатежа;
			Сумма                       = СтрокаРезультат.ДолгКлиента;  
		иначе	
			КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДней;
			Сумма                       = СтрокаРезультат.ДолгКлиентаПросрочено;   
		КонецЕсли;
		стррДанные = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьДанныеДляФормированияСобытияТАБАИД(СтрокаРезультат.ВидДоговора,
		СтрокаРезультат.СтатусПартнера,
		СтрокаРезультат.Партнер,
		СтрокаРезультат.ЗаказКлиента,
		ДеньНеделиОтчета,
		КоличествоДнейЗадолженности + 1,Сумма);
		Для Каждого Стр Из стррДанные Цикл 
			
			Если ЗначениеЗаполнено(Стр.КлючРегламентногоЗадания) Тогда
				НоваяСтр = лпТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр,СтрокаРезультат);
				НоваяСтр.ДетализироватьПоОбъектамРасчетов = Стр.ДетализироватьПоОбъектамРасчетов;
				НоваяСтр.КлючРегламентногоЗадания = Стр.КлючРегламентногоЗадания;
				НоваяСтр.КлючПравила = Стр.КлючПравила;
			КонецЕсли;
		КонецЦикла;																						
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
	лпТаблОбъектов = лпТаблица.Скопировать(Отбор);
	
	
	
	Для Каждого СтрокаРезультат Из лпТаблОбъектов Цикл 
		
		//получим по партнеру контактное лицо, если оно не указано
		//получим телефон и почту от контактного лица
		Телефон = "";
		Почта = "";
		Если ЗначениеЗаполнено(СтрокаРезультат.КонтактноеЛицо) тогда
			КонтактноеЛицо = СтрокаРезультат.КонтактноеЛицо;
		иначе
			КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(СтрокаРезультат.Партнер);
			СтрокаРезультат.КонтактноеЛицо = КонтактноеЛицо;
		КонецЕсли;
		Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
			стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо);
			Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			Почта   = стррДанныеКИ.Почта;
			// если не удалось определить контактное лицо - получаем телефон и почту партнера
		Иначе
			стррДанныеКИ = ПолучитьДанныеКИПартнера(СтрокаРезультат.Партнер);
			Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			Почта   = стррДанныеКИ.Почта;
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.табАид_СписокСообщений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРезультат);
		НоваяЗапись.ДатаСобытия = ДатаОтчета + 1;
		НоваяЗапись.КлючРегламентногоЗадания = СтрокаРезультат.КлючРегламентногоЗадания;
		НоваяЗапись.КлючПравила = СтрокаРезультат.КлючПравила;
		НоваяЗапись.КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДней; 
		НоваяЗапись.Телефон = Телефон;
		НоваяЗапись.Почта = Почта;
		НоваяЗапись.ОбъектРасчетов = СтрокаРезультат.ЗаказКлиента;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
	лпТабл = лпТаблица.Скопировать(Отбор);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Табл.Партнер КАК Партнер,
	|	Табл.Организация КАК Организация,
	|	Табл.Контрагент КАК Контрагент,
	|	Табл.КонтактноеЛицо КАК КонтактноеЛицо,
	|	Табл.Валюта КАК Валюта,
	|	Табл.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	Табл.НомерИнтервала КАК НомерИнтервала,
	|	Табл.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	Табл.ДолгКлиента КАК ДолгКлиента,
	|	Табл.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
	|	Табл.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	Табл.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	Табл.ДатаПлатежа КАК ДатаПлатежа,
	|	Табл.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	Табл.КлючПравила КАК КлючПравила,
	|	Табл.КоличествоДней КАК КоличествоДнейЗадолженности
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Табл КАК Табл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Партнер КАК Партнер,
	|	ВТ.Организация КАК Организация,
	|	ВТ.Контрагент КАК Контрагент,
	|	ВТ.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ВТ.Валюта КАК Валюта,
	|	ВТ.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	ВТ.НомерИнтервала КАК НомерИнтервала,
	|	ВТ.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	СУММА(ВТ.ДолгКлиента) КАК ДолгКлиента,
	|	СУММА(ВТ.ДолгКлиентаВВалютеОтчета) КАК ДолгКлиентаВВалютеОтчета,
	|	СУММА(ВТ.ДолгКлиентаПросрочено) КАК ДолгКлиентаПросрочено,
	|	СУММА(ВТ.ДолгКлиентаПросроченоВВалютеОтчета) КАК ДолгКлиентаПросроченоВВалютеОтчета,
	|	МИНИМУМ(ВТ.ДатаПлатежа) КАК ДатаПлатежа,
	|	ВТ.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	ВТ.КлючПравила КАК КлючПравила,
	|	СУММА(ВТ.КоличествоДнейЗадолженности) КАК КоличествоДнейЗадолженности
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Партнер,
	|	ВТ.Контрагент,
	|	ВТ.КонтактноеЛицо,
	|	ВТ.Валюта,
	|	ВТ.ИнтервалЗадолженности,
	|	ВТ.НомерИнтервала,
	|	ВТ.НижняяГраницаИнтервала,
	|	ВТ.КлючРегламентногоЗадания,
	|	ВТ.КлючПравила,
	|	ВТ.Организация";
	Запрос.УстановитьПараметр("Табл",лпТабл);
	
	лпТаблИтог = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультат Из лпТаблИтог Цикл 
		
		//получим по партнеру контактное лицо, если оно не указано
		//получим телефон и почту от контактного лица
		Телефон = "";
		Почта = "";
		Если ЗначениеЗаполнено(СтрокаРезультат.КонтактноеЛицо) тогда
			КонтактноеЛицо = СтрокаРезультат.КонтактноеЛицо;
		иначе
			КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(СтрокаРезультат.Партнер);
			СтрокаРезультат.КонтактноеЛицо = КонтактноеЛицо;
		КонецЕсли;
		Если ЗначениеЗаполнено(КонтактноеЛицо) тогда
			стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо);
			Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			Почта   = стррДанныеКИ.Почта;
			// если не удалось определить контактное лицо - получаем телефон и почту партнера
		Иначе
			стррДанныеКИ = ПолучитьДанныеКИПартнера(СтрокаРезультат.Партнер);
			Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			Почта   = стррДанныеКИ.Почта;
		КонецЕсли;
		
		// Добавляем запись в регистр.
		НоваяЗапись = РегистрыСведений.табАид_СписокСообщений.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРезультат);
		НоваяЗапись.ДатаСобытия = ДатаОтчета + 1;
		НоваяЗапись.КлючРегламентногоЗадания = СтрокаРезультат.КлючРегламентногоЗадания;
		НоваяЗапись.КлючПравила = СтрокаРезультат.КлючПравила;
		НоваяЗапись.КоличествоДнейЗадолженности = СтрокаРезультат.КоличествоДнейЗадолженности; 
		НоваяЗапись.Телефон = Телефон;
		НоваяЗапись.Почта = Почта;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ВыполнитьРегламентноеЗаданиеОтправкиСообщений(ПараметрыОтправки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	//Без ключа рег. задание не возможно выполнить.
	Если Не ПараметрыОтправки.ПараметрыКоманды.Свойство("КлючРегЗадания") Тогда
		Возврат;
	КонецЕсли;
	
	КлючРегламентногоЗадания = Новый УникальныйИдентификатор(ПараметрыОтправки.ПараметрыКоманды.КлючРегЗадания);
	
	//Если по регл. задания нужно учытывать часовой пояс, 
	//тогда проверяем подходит ли нам время выполнения для часового пояса.
	УчитыватьЧасовойПояс = ПараметрыОтправки.ПараметрыКоманды.УчитыватьЧасовойПояс;
	ВремяНачала = ПараметрыОтправки.ПараметрыКоманды.ВремяНачала;
	ВремяКонца = ПараметрыОтправки.ПараметрыКоманды.ВремяКонца;
	
	МассивЧПДляОтправки = Новый Массив;
	Если УчитыватьЧасовойПояс Тогда
		МассивЧПДляОтправки = ПолучитьМассивЧасовыхПоясовДляОтправки(ВремяНачала, ВремяКонца);
	КонецЕсли;	
	
	//Получаем записи для отправки сообщений по ключу и по дате.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СписокЗадолженности.Организация КАК Организация,
	|	СписокЗадолженности.Партнер КАК Партнер,
	|	СписокЗадолженности.ОбъектРасчетов КАК ОбъектРасчетов,
	|	СписокЗадолженности.ДатаСобытия КАК ДатаСобытия,
	|	СписокЗадолженности.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	СписокЗадолженности.КлючПравила КАК КлючПравила,
	|	СписокЗадолженности.Договор КАК Договор,
	|	СписокЗадолженности.Контрагент КАК Контрагент,
	|	СписокЗадолженности.ВидДоговора КАК ВидДоговора,
	|	СписокЗадолженности.Валюта КАК Валюта,
	|	СписокЗадолженности.ДатаПлатежа КАК ДатаПлатежа,
	|	СписокЗадолженности.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
	|	СписокЗадолженности.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
	|	СписокЗадолженности.ДолгКлиента КАК ДолгКлиента,
	|	СписокЗадолженности.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
	|	СписокЗадолженности.НомерИнтервала КАК НомерИнтервала,
	|	СписокЗадолженности.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
	|	СписокЗадолженности.КоличествоДнейДоПлатежа КАК КоличествоДнейДоПлатежа,
	|	СписокЗадолженности.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
	|	СписокЗадолженности.КонтактноеЛицо КАК КонтактноеЛицо,
	|	СписокЗадолженности.Телефон КАК Телефон,
	|	СписокЗадолженности.Почта КАК Почта,
	|	СписокЗадолженности.СтатусПартнера КАК СтатусПартнера,
	|	ЕСТЬNULL(табАид_Настройки.ЧасовойПояс, """") КАК ЧасовойПоясОрганизации
	|ИЗ
	|	РегистрСведений.табАид_СписокСообщений КАК СписокЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|		ПО СписокЗадолженности.Организация = табАид_Настройки.Организация
	|ГДЕ
	|	СписокЗадолженности.КлючРегламентногоЗадания = &КлючРегламентногоЗадания
	|	И СписокЗадолженности.ДатаСобытия = &ДатаСобытия";
	
	Запрос.УстановитьПараметр("КлючРегламентногоЗадания", КлючРегламентногоЗадания);
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ТекущаяДата()));
	Результат = Запрос.Выполнить().Выгрузить();
	
	//Ищем шаблон для выполнения отправки по ключу.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ПравилаФормированияСобытий.ТипСообщения КАК ТипСообщения,
	|	табАид_ПравилаФормированияСобытий.ШаблонСообщения КАК ШаблонСообщения,
	|	табАид_ПравилаФормированияСобытий.РазовоеУведомление КАК РазовоеУведомление,
	|	табАид_ПравилаФормированияСобытий.ВидДоговора КАК ВидДоговора,
	|	табАид_ПравилаФормированияСобытий.СтатусПартнера КАК СтатусПартнера,
	|	табАид_ПравилаФормированияСобытий.Партнер КАК Партнер,
	|	табАид_ПравилаФормированияСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	табАид_ПравилаФормированияСобытий.ДеньНедели КАК ДеньНедели,
	|	табАид_ПравилаФормированияСобытий.КоличествоДнейЗадолженности КАК КоличествоДнейЗадолженности,
	|	табАид_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	табАид_ПравилаФормированияСобытий.КлючПравила КАК КлючПравила
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий КАК табАид_ПравилаФормированияСобытий
	|ГДЕ
	|	табАид_ПравилаФормированияСобытий.КлючРегламентногоЗадания = &КлючРегламентногоЗадания";
	Запрос.УстановитьПараметр("КлючРегламентногоЗадания", КлючРегламентногоЗадания);
	
	ДанныеШаблона = Запрос.Выполнить();
	Если ДанныеШаблона.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ДанныеШаблона.Выбрать();
	Выборка.Следующий();
	
	ФиксСтруктура = ПолучитьФиксСтруктуруИзКолонокТЧ(Результат);
	
	Для каждого СтрокаРезультат из Результат Цикл
		
		// Проверяем можем мы сейчас отправить сообщение партнеру по его часовому поясу.
		Если УчитыватьЧасовойПояс Тогда
			Если НЕ СтрокаРезультат.Партнер.табАид_ДругойЧасовойПояс Тогда
				ЧасовойПоясПартнера = СтрокаРезультат.ЧасовойПоясОрганизации;
			Иначе
				ЧасовойПоясПартнера = СтрокаРезультат.Партнер.табАид_ЧасовойПояс;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЧасовойПоясПартнера) Тогда
				//Пробуем определить часовой пояс по адресу партнера.
				ЧасовойПоясПартнера = ПолучитьЧасовойПоясПартнера(СтрокаРезультат.Партнер);
				
				//Пробуем определить часовой пояс для контрагента, если для партнера не удалось.
				Если ЧасовойПоясПартнера = неопределено Тогда
					ЧасовойПоясПартнера = ПолучитьЧасовойПоясКонтрагента(СтрокаРезультат.Партнер);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЧасовойПоясПартнера = неопределено Тогда
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка сообщений (ТАБ АИД)'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение, , , "Не удалось определить часовой пояс партнера: " + СокрЛП(СтрокаРезультат.Партнер));
				Продолжить;
			ИначеЕсли МассивЧПДляОтправки.Найти(ЧасовойПоясПартнера) = неопределено Тогда
				Продолжить;
			Конецесли;
		КонецЕсли;
		
		СтруктураПараметровСоообщения = Новый Структура(ФиксСтруктура);
		ЗаполнитьЗначенияСвойств(СтруктураПараметровСоообщения, СтрокаРезультат);
		РезультатОтправки = СформироватьИОтправитьСообщение(Выборка, СтруктураПараметровСоообщения, Новый УникальныйИдентификатор);
		
		Если РезультатОтправки.Отправлено 
			И Не ЗначениеЗаполнено(РезультатОтправки.ОписаниеОшибки) Тогда
			
			// Удаляем записи отправленных сообщений.
			НаборЗаписейСЗ = РегистрыСведений.табАид_СписокСообщений.СоздатьНаборЗаписей();
			НаборЗаписейСЗ.Отбор.Организация.Установить(СтрокаРезультат.Организация);
			НаборЗаписейСЗ.Отбор.Партнер.Установить(СтрокаРезультат.Партнер);
			НаборЗаписейСЗ.Отбор.ОбъектРасчетов.Установить(СтрокаРезультат.ОбъектРасчетов);
			НаборЗаписейСЗ.Отбор.ДатаСобытия.Установить(НачалоДня(ТекущаяДата()));
			НаборЗаписейСЗ.Отбор.КлючПравила.Установить(Выборка.КлючПравила);
			НаборЗаписейСЗ.Записать();
			
			Если Выборка.РазовоеУведомление 
				И ПараметрыОтправки.ПараметрыКоманды.Свойство("ИдентификаторРегЗадания") Тогда
				УдалитьРазовоеУведомление(Выборка, ПараметрыОтправки.ПараметрыКоманды.ИдентификаторРегЗадания);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьЧасовойПоясПартнера(Партнер) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Партнер);
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ, МассивВидовКИ);
	Если ТаблицаКИ.Количество() = 1 Тогда
		Возврат ОпределитьЧасовойПоясПоАдресу(ТаблицаКИ[0].Представление);
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

Функция ПолучитьЧасовойПоясКонтрагента(Партнер) Экспорт
	
	Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
		Возврат неопределено;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контрагент);
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	ТаблицаКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивОбъектов, МассивТиповКИ, МассивВидовКИ, ТекущаяДата());
	Если ТаблицаКИ.Количество() = 1 Тогда
		Возврат ОпределитьЧасовойПоясПоАдресу(ТаблицаКИ[0].Представление);
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции


Функция ОпределитьЧасовойПоясПоАдресу(ПредставлениеАдреса)
	
	СтрокаМинус1 = "Калининградская";
	МассивМинус1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаМинус1, Символы.ПС);
	
	Для каждого Элем из МассивМинус1 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+2";
		КонецЕсли;
	КонецЦикла;
	
	Строка0 = "Адыгея
	|Архангельская
	|Астраханская
	|Белгородская
	|Брянская
	|Владимирская
	|Волгоградская
	|Вологодская
	|Воронежская
	|Дагестан
	|Ингушетия
	|Ивановская
	|Кабардино
	|Калмыкия
	|Карачаево
	|Карелия
	|Калужская
	|Краснодарский
	|Кировская
	|Костромская
	|Курская
	|Ленинградская
	|Липецкая
	|Коми-Пермяцкий
	|Коми Респ
	|Нижегородская
	|Ненецкий
	|Ростовская
	|Марий
	|Мордовия
	|Москва
	|Московская
	|Новгородская
	|Орловская
	|Пензенская
	|Псковская
	|Рязанская
	|Саратовская
	|Смоленская
	|Тамбовская
	|Тверская
	|Мурманская	 
	|Северная
	|Санкт-Петербург
	|Ставропольский	 
	|Татарстан
	|Тульская
	|Ульяновская
	|Чеченская
	|Чувашская
	|Ярославская
	|Крым";
	
	Массив0 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка0, Символы.ПС);
	
	Для каждого Элем из Массив0 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+3";
		КонецЕсли;
	КонецЦикла;
	
	Строка1 ="Удмуртская
	|Самарская";
	
	Массив1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка1, Символы.ПС);
	
	Для каждого Элем из Массив1 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+4";
		КонецЕсли;
	КонецЦикла;
	
	Строка2 ="Башкортостан
	|Пермская
	|Курганская
	|Оренбургская
	|Свердловская
	|Тюменская
	|Челябинская
	|Ханты
	|Ямало";
	
	Массив2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка2, Символы.ПС);
	
	Для каждого Элем из Массив2 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+5";
		КонецЕсли;
	КонецЦикла;
	
	Строка3 = "Омская
	|Новосибирская
	|Томская
	|Алтайский край
	|Алтай";
	Массив3 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка3, Символы.ПС);
	
	Для каждого Элем из Массив3 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+6";
		КонецЕсли;
	КонецЦикла;
	
	Строка4 = "Красноярский
	|Хакасия
	|Тыва
	|Таймырский
	|Эвенкийский
	|Кемеровская";
	Массив4 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка4, Символы.ПС);
	
	Для каждого Элем из Массив4 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+7";
		КонецЕсли;
	КонецЦикла;
	
	Строка5 = "Бурятия
	|Усть-Ордынский 	
	|Иркутская";
	Массив5 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка5, Символы.ПС);
	
	Для каждого Элем из Массив5 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+8";
		КонецЕсли;
	КонецЦикла;
	
	Строка6 =  "Амурская          
	|Читинская
	|Агинский
	|Бурятский
	|Саха";
	Массив6 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка6, Символы.ПС);
	
	Для каждого Элем из Массив6 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+9";
		КонецЕсли;
	КонецЦикла;
	
	Строка7 = "Приморский          
	|Хабаровский
	|Еврейская
	|Сахалинская";
	Массив7 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка7, Символы.ПС);
	
	Для каждого Элем из Массив7 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+10";
		КонецЕсли;
	КонецЦикла;
	
	Строка8 = "Магаданская";
	Массив8 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка8, Символы.ПС);
	
	Для каждого Элем из Массив8 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+11";
		КонецЕсли;
	КонецЦикла;
	
	Строка9 = "Камчатская
	|Корякский
	|Чукотский";
	Массив9 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка9, Символы.ПС);
	
	Для каждого Элем из Массив9 Цикл
		Если СтрНайти(ПредставлениеАдреса, Элем) > 0 Тогда
			Возврат "GMT+12";
		КонецЕсли;
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции

Функция ПолучитьМассивЧасовыхПоясовДляОтправки(ВремяНачало, ВремяКонец)
	
	ЧПДляОтправки = Новый Массив;
	
	ГодСегодня = Год(ТекущаяДатаСеанса());
	МесяцСегодня = Месяц(ТекущаяДатаСеанса());   
	ДеньСегодня = День(ТекущаяДатаСеанса());   
	
	ЧасВремяНачало = Час(ВремяНачало);
	МинутаВремяНачало = Минута(ВремяНачало);
	СекундаВремяНачало = Секунда(ВремяНачало);
	
	ДатаВремяНачалоОтправки = Дата(ГодСегодня, МесяцСегодня, ДеньСегодня, ЧасВремяНачало, МинутаВремяНачало, СекундаВремяНачало);
	
	ЧасВремяКонец = Час(ВремяКонец);
	МинутаВремяКонец = Минута(ВремяКонец);
	СекундаВремяКонец = Секунда(ВремяКонец);
	
	ДатаВремяКонецОтправки = Дата(ГодСегодня, МесяцСегодня, ДеньСегодня, ЧасВремяКонец, МинутаВремяКонец, СекундаВремяКонец);
	
	СписокЧП = ПолучитьСписокЧасовыхПоясов();
	ТекЧасовойПояс = ЧасовойПояс();
	Для каждого ЭлемЧП из СписокЧП Цикл
		Смещение = ПолучитьСмещениеДляЧасовогоПояса(ТекЧасовойПояс, ЭлемЧП.Значение);
		Если Смещение = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем текущее время со смещением.
		ВремяСоСмещением = ТекущаяДатаСеанса() + Смещение*60*60;
		
		ЧасСоСмещениение = Час(ВремяСоСмещением);
		МинутаСоСмещениение = Минута(ВремяСоСмещением);
		СекундаСоСмещениение = Секунда(ВремяСоСмещением);
		
		СегодняСоСмещением = Дата(ГодСегодня, МесяцСегодня, ДеньСегодня, ЧасСоСмещениение, МинутаСоСмещениение, СекундаСоСмещениение);
		
		// Проверям попадает ли время со смещением в наш промежуток.
		Если СегодняСоСмещением >= ДатаВремяНачалоОтправки И СегодняСоСмещением <= ДатаВремяКонецОтправки Тогда
			ЧПДляОтправки.Добавить(ЭлемЧП.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЧПДляОтправки;
	
КонецФункции

Функция ПолучитьСмещениеДляЧасовогоПояса(ЧССистемы, ЧС)
	
	Смещения = Новый Соответствие;
	Если ЧССистемы = "Europe/Moscow" Тогда
		Смещения.Вставить("GMT+2", -1);
		Смещения.Вставить("GMT+3", 0);
		Смещения.Вставить("GMT+4", 1);
		Смещения.Вставить("GMT+5", 2);
		Смещения.Вставить("GMT+6", 3);
		Смещения.Вставить("GMT+7", 4);
		Смещения.Вставить("GMT+8", 5);
		Смещения.Вставить("GMT+9", 6);
		Смещения.Вставить("GMT+10", 7);
		Смещения.Вставить("GMT+11", 8);
		Смещения.Вставить("GMT+12", 9);
	КонецЕсли;
	Возврат Смещения.Получить(ЧС);
	
КонецФункции

Процедура ВыполнитьОбновлениеСтатусовСообщений() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ЖурналСобытий.УникальныйКлючЗаписи КАК ИдентификаторСообщения,
	|	табАид_ЖурналСобытий.ТипСообщения КАК ТипСообщения
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) = &ДатаСобытия
	|	И табАид_ЖурналСобытий.ТипСообщения В(&ТипыСообщений)
	|	И табАид_ЖурналСобытий.СтатусСобытия
	|	И НЕ табАид_ЖурналСобытий.СтатусДоставки";
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ТекущаяДата()));
	
	ТипыСообщений = Новый Массив;
	ТипыСообщений.Добавить(Перечисления.табАид_ТипыСообщений.SMS);
	ТипыСообщений.Добавить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение);
	
	Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрРез из Результат Цикл
		Если СтрРез.ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение Тогда
			табАид_ОтправкаГолосовойПочты.СтатусДоставки(СтрРез.ИдентификаторСообщения);
		Иначе
			табАид_ОтправкаSMS.СтатусДоставки(СтрРез.ИдентификаторСообщения);
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура УдалитьРазовоеУведомление(Правило, ИдентификаторРегламентногоЗадания = неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ИдентификаторРегламентногоЗадания <> неопределено Тогда
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
		
		Если РегЗадание <> неопределено Тогда
			РегЗадание.Удалить();	
		КонецЕсли;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
		Отбор.Вставить("Ключ", Правило.КлючРегламентногоЗадания);
		
		РегЗаданияПоКлючу = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
		Для каждого РегЗадание из РегЗаданияПоКлючу Цикл
			РегЗадание.Удалить();	
		КонецЦикла;
	КонецЕсли;
	//Проверяем, есть ли сопряженные рег. задания по ключу.
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок);
	Отбор.Вставить("Ключ", Правило.КлючРегламентногоЗадания);
	
	РегЗаданияПоКлючу = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Если РегЗаданияПоКлючу.Количество() = 0 Тогда
		
		//Удаляем правило формирования разового уведомления.
		ЗаписьПравила = РегистрыСведений.табАид_ПравилаФормированияСобытий.СоздатьНаборЗаписей();
		ЗаписьПравила.Отбор.ВидДоговора.Установить(Правило.ВидДоговора);
		ЗаписьПравила.Отбор.СтатусПартнера.Установить(Правило.СтатусПартнера);
		ЗаписьПравила.Отбор.Партнер.Установить(Правило.Партнер);
		ЗаписьПравила.Отбор.ОбъектРасчетов.Установить(Правило.ОбъектРасчетов);
		ЗаписьПравила.Отбор.ТипСообщения.Установить(Правило.ТипСообщения);
		ЗаписьПравила.Отбор.ДеньНедели.Установить(Правило.ДеньНедели);
		ЗаписьПравила.Отбор.КоличествоДнейЗадолженности.Установить(Правило.КоличествоДнейЗадолженности);
		ЗаписьПравила.Отбор.КлючРегламентногоЗадания.Установить(Правило.КлючРегламентногоЗадания);
		
		ЗаписьПравила.Записать();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СформироватьИОтправитьСообщение(ДанныеШаблона, ЗначенияРеквизитовСообщения, УникальныйИдентификатор)
	УстановитьПривилегированныйРежим(Истина);
	Если ДанныеШаблона.ТипСообщения = Перечисления.табАид_ТипыСообщений.Email Тогда
		ВидСообщения = "Почта";
	ИначеЕсли ДанныеШаблона.ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS Тогда
		ВидСообщения = "СообщениеSMS";
	ИначеЕсли ДанныеШаблона.ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение Тогда
		ВидСообщения = "ГолосовоеСообщение";
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
	ПараметрыОтправки = ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(ДанныеШаблона.ШаблонСообщения, Неопределено, УникальныйИдентификатор);
	ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = ВидСообщения;
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КлючРегламентногоЗадания", ДанныеШаблона.КлючРегламентногоЗадания);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КлючПравила", ДанныеШаблона.КлючПравила);
	
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("табАид_ЗначенияРеквизитовСообщения", ЗначенияРеквизитовСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.ПреобразовыватьHTMLДляФорматированногоДокумента = Ложь;
	
	ПараметрыОтправки.ДополнительныеПараметры.УчетнаяЗапись = ШаблоныСообщенийСлужебный.ПолучитьПочтовыйАдресДляОтправки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ШаблоныСообщенийСлужебный.СформироватьСообщениеИОтправить(ПараметрыОтправки);	
	
КонецФункции

Функция ПолучитьФиксСтруктуруИзКолонокТЧ(ТабЗначений)
	
	СтруктураПараметров = Новый Структура();
	
	Для каждого Колонка из ТабЗначений.Колонки Цикл
		СтруктураПараметров.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураПараметров);
	
КонецФункции

Функция ПолучитьТекстЗапросаДебиторскойЗадолженности(ВалютаОтчета,Детализация=Неопределено) Экспорт
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сегменты.Партнер КАК Партнер,
		|	ИСТИНА КАК ИспользуетсяОтборПоСегментуПартнеров
		|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК Сегменты
		|{ГДЕ
		|	Сегменты.Сегмент.* КАК СегментПартнеров,
		|	Сегменты.Партнер.* КАК Партнер}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партнер,
		|	ИспользуетсяОтборПоСегментуПартнеров
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НеВключатьВРассылку.Партнер КАК Партнер
		|ПОМЕСТИТЬ СписокИсключений
		|ИЗ
		|	РегистрСведений.табАид_НеВключатьВРассылку КАК НеВключатьВРассылку
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсВалюты.Валюта КАК Валюта,
		|	КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК Коэффициент
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних({&ДатаОтчета}, ) КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних({&ДатаОтчета}, Валюта = &Валюта) КАК КурсВалютыОтчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.Кратность <> 0
		|	И КурсВалютыОтчета.Курс <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
		|	АналитикаУчета.Организация                                     КАК Организация,
		|	АналитикаУчета.Партнер                                         КАК Партнер,
		|	АналитикаУчета.Контрагент                                      КАК Контрагент,
		|	АналитикаУчета.Договор                                         КАК Договор,
		|	АналитикаУчета.НаправлениеДеятельности                         КАК НаправлениеДеятельности,
		|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ОбъектРасчетов,
		|	РасчетыПоСрокам.Валюта                                         КАК Валюта,
		|	РасчетыПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
		|	РасчетыПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлановогоПогашения,
		|	РасчетыПоСрокам.ДатаВозникновения                              КАК ДатаВозникновения,
		|
		|	РасчетыПоСрокам.ПредоплатаРеглОстаток                          КАК НашДолг,
		|	РасчетыПоСрокам.ДолгРеглОстаток                                КАК ДолгКлиента,
		|	ВЫБОР 
		|		КОГДА РасчетыПоСрокам.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
		|			ТОГДА РасчетыПоСрокам.ДолгРеглОстаток
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                                          КАК ДолгКлиентаПросрочено,
		|	
		|	0                                                              КАК КОтгрузке
		|ПОМЕСТИТЬ ТаблицаЗадолженностей
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(&ДатаОтчетаГраница) КАК РасчетыПоСрокам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|			ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|{ГДЕ
		|	АналитикаУчета.Организация.* КАК Организация,
		|	АналитикаУчета.Партнер.* КАК Партнер,
		|	АналитикаУчета.Контрагент.* КАК Контрагент,
		|	АналитикаУчета.Договор.* КАК Договор,
		|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
		|	(АналитикаУчета.Партнер В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуПартнеров.Партнер
		|			ИЗ
		|				ОтборПоСегментуПартнеров
		|			ГДЕ
		|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
		|ГДЕ
		|	Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) И (&ВключатьЗадолженность = 0 ИЛИ &ВключатьЗадолженность = 1)
		|{ГДЕ
		|	Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыПланОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	АналитикаУчета.Организация               КАК Организация,
		|	АналитикаУчета.Партнер                   КАК Партнер,
		|	АналитикаУчета.Контрагент                КАК Контрагент,
		|	АналитикаУчета.Договор                   КАК Договор,
		|	АналитикаУчета.НаправлениеДеятельности   КАК НаправлениеДеятельности,
		|	РасчетыПланОплат.ОбъектРасчетов          КАК ОбъектРасчетов,
		|	РасчетыПланОплат.Валюта                  КАК Валюта,
		|	РасчетыПланОплат.ДокументПлан            КАК ДокументПлан,
		|	РасчетыПланОплат.ДатаПлановогоПогашения  КАК ДатаПлановогоПогашения,
		|	РасчетыПланОплат.ДатаВозникновения       КАК ДатаВозникновения,
		|	
		|	0                                        КАК НашДолг,
		|	РасчетыПланОплат.КОплатеОстаток
		|		* ЕСТЬNULL(Курсы.Коэффициент,1)      КАК ДолгКлиента,
		|	ВЫБОР 
		|		КОГДА РасчетыПланОплат.ДатаПлановогоПогашения < НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
		|			ТОГДА РасчетыПланОплат.КОплатеОстаток * ЕСТЬNULL(Курсы.Коэффициент,1)
		|		ИНАЧЕ 0 
		|	КОНЕЦ                                    КАК ДолгКлиентаПросрочено,
		|	
		|	0                                        КАК КОтгрузке
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПланОплат.Остатки(&ДатаОтчетаГраница) КАК РасчетыПланОплат
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|			ПО РасчетыПланОплат.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК Курсы
		|			ПО Курсы.Валюта = РасчетыПланОплат.Валюта
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РасчетыПланОплат.ДокументПлан) В (&ТипыДокументовПлана)
		|	И Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) И (&ВключатьЗадолженность = 0 ИЛИ &ВключатьЗадолженность = 2)
		|{ГДЕ
		|	Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)}
		|{ГДЕ
		|	АналитикаУчета.Организация.* КАК Организация,
		|	АналитикаУчета.Партнер.* КАК Партнер,
		|	АналитикаУчета.Контрагент.* КАК Контрагент,
		|	АналитикаУчета.Договор.* КАК Договор,
		|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
		|	(АналитикаУчета.Партнер В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуПартнеров.Партнер
		|			ИЗ
		|				ОтборПоСегментуПартнеров
		|			ГДЕ
		|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыПланОтгрузок.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	АналитикаУчета.Организация                  КАК Организация,
		|	АналитикаУчета.Партнер                      КАК Партнер,
		|	АналитикаУчета.Контрагент                   КАК Контрагент,
		|	АналитикаУчета.Договор                      КАК Договор,
		|	АналитикаУчета.НаправлениеДеятельности      КАК НаправлениеДеятельности,
		|	РасчетыПланОтгрузок.ОбъектРасчетов          КАК ОбъектРасчетов,
		|	РасчетыПланОтгрузок.Валюта                  КАК Валюта,
		|	РасчетыПланОтгрузок.ДокументПлан            КАК ДокументПлан,
		|	РасчетыПланОтгрузок.ДатаПлановогоПогашения  КАК ДатаПлановогоПогашения,
		|	РасчетыПланОтгрузок.ДатаВозникновения       КАК ДатаВозникновения,
		|	
		|	0                                           КАК НашДолг,
		|	0                                           КАК ДолгКлиента,
		|	0                                           КАК ДолгКлиентаПросрочено,
		|	
		|	РасчетыПланОтгрузок.СуммаОстаток
		|		* ЕСТЬNULL(Курсы.Коэффициент,1)         КАК КОтгрузке
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПланОтгрузок.Остатки(&ДатаОтчетаГраница) КАК РасчетыПланОтгрузок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|			ПО РасчетыПланОтгрузок.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК Курсы
		|			ПО Курсы.Валюта = РасчетыПланОтгрузок.Валюта
		|ГДЕ
		|	Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) И (&ВключатьЗадолженность = 0 ИЛИ &ВключатьЗадолженность = 2)
		|{ГДЕ
		|	Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)}
		|{ГДЕ
		|	АналитикаУчета.Организация.* КАК Организация,
		|	АналитикаУчета.Партнер.* КАК Партнер,
		|	АналитикаУчета.Контрагент.* КАК Контрагент,
		|	АналитикаУчета.Договор.* КАК Договор,
		|	АналитикаУчета.НаправлениеДеятельности.* КАК НаправлениеДеятельности,
		|	(АналитикаУчета.Партнер В
		|			(ВЫБРАТЬ
		|				ОтборПоСегментуПартнеров.Партнер
		|			ИЗ
		|				ОтборПоСегментуПартнеров
		|			ГДЕ
		|				ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров))}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаЗадолженностей.ДатаПлановогоПогашения КАК ДатаНачала,
		|	ГрафикиРаботы.Дата КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ИЛИ ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РабочийДень
		|ПОМЕСТИТЬ Графики
		|ИЗ
		|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ПроизводственныйКалендарь = &Календарь)
		|ГДЕ
		|	ГрафикиРаботы.Дата МЕЖДУ ТаблицаЗадолженностей.ДатаПлановогоПогашения И &ДатаОтчета
		|	И ТаблицаЗадолженностей.ДатаПлановогоПогашения <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
		|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
		|ПОМЕСТИТЬ РазностиДат
		|ИЗ
		|	Графики КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
		|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
		|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
		|ГДЕ
		|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&СтрокаСостояниеВзаиморасчетов                                 КАК ГруппировкаВсего,
		|	ТаблицаЗадолженностей.Организация                              КАК Организация,
		|	ТаблицаЗадолженностей.Партнер                                  КАК Партнер,
		|	ТаблицаЗадолженностей.Контрагент                               КАК Контрагент,
		|	ТаблицаЗадолженностей.Договор                                  КАК Договор,
		|	isnull(Выразить(ТаблицаЗадолженностей.Договор КАК Справочник.ДоговорыКонтрагентов).табАид_ВидДоговора, Значение(Справочник.табАид_ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора,
		|	ТаблицаЗадолженностей.НаправлениеДеятельности                  КАК НаправлениеДеятельности,
		|	ТаблицаЗадолженностей.ОбъектРасчетов                           КАК ЗаказКлиента,
		|	ТаблицаЗадолженностей.Валюта                                   КАК Валюта,
		|	ТаблицаЗадолженностей.РасчетныйДокумент                        КАК РасчетныйДокумент,
		|	ТаблицаЗадолженностей.ДатаПлановогоПогашения                   КАК ДатаПлатежа,
		|	ТаблицаЗадолженностей.ДатаВозникновения                        КАК ДатаВозникновения,
		|	ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам                КАК АналитикаУчетаПоПартнерам,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ТаблицаЗадолженностей.ДатаПлановогоПогашения, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ДатаОтчета
		|			ИНАЧЕ ТаблицаЗадолженностей.ДатаПлановогоПогашения
		|		КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа,
		|	ТаблицаЗадолженностей.НашДолг                                  КАК НашДолг,
		|	ТаблицаЗадолженностей.ДолгКлиента                              КАК ДолгКлиента,
		|	ТаблицаЗадолженностей.НашДолг		                           КАК НашДолгВВалютеОтчета,
		|	ТаблицаЗадолженностей.ДолгКлиента							   КАК ДолгКлиентаВВалютеОтчета,
		|	ТаблицаЗадолженностей.КОтгрузке								   КАК КОтгрузкеВВалютеОтчета,
		|	ТаблицаЗадолженностей.ДолгКлиентаПросрочено                    КАК ДолгКлиентаПросрочено,
		|	ТаблицаЗадолженностей.ДолгКлиентаПросрочено					   КАК ДолгКлиентаПросроченоВВалютеОтчета,
		|	ТаблицаЗадолженностей.КОтгрузке                                КАК КОтгрузке,
		|	
		|	ВЫБОР
		|		КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА РазностиДат.КоличествоДней > 0
		|						ТОГДА РазностиДат.КоличествоДней
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаЗадолженностей.ДолгКлиента = 0 ИЛИ ТаблицаЗадолженностей.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА 0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ) > 0
		|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ                                                             КАК КоличествоДней,
		|	ЕСТЬNULL(Интервалы.НаименованиеИнтервала, &СтрокаДолгНеПросрочен) КАК НаименованиеИнтервала,
		|	ЕСТЬNULL(Интервалы.НомерСтроки, 0)                                КАК НомерИнтервала,
		|	ЕСТЬNULL(Интервалы.НижняяГраницаИнтервала, 0)                     КАК НижняяГраницаИнтервала,
		|   Выбор когда Выразить(ТаблицаЗадолженностей.Договор КАК справочник.ДоговорыКонтрагентов).КонтактноеЛицо = Значение(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) 
		|		тогда выбор ТипЗначения(ТаблицаЗадолженностей.ОбъектРасчетов)
		|			когда Тип(Справочник.ДоговорыКонтрагентов) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.ЗаказКлиента) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.ВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.АктВыполненныхРабот) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.ВыкупВозвратнойТарыКлиентом) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.ЗаявкаНаВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.ОтчетКомитенту) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.ОтчетКомитентуОСписании) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.РеализацияТоваровУслуг) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|			когда Тип(Документ.РеализацияУслугПрочихАктивов) тогда ТаблицаЗадолженностей.ОбъектРасчетов.КонтактноеЛицо
		|           иначе Значение(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) 
		|				конец
		|         иначе Выразить(ТаблицаЗадолженностей.Договор КАК справочник.ДоговорыКонтрагентов).КонтактноеЛицо конец как КонтактноеЛицо,
		|выбор ТипЗначения(ТаблицаЗадолженностей.ОбъектРасчетов)
		|			когда Тип(Справочник.ДоговорыКонтрагентов) тогда ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			когда Тип(Документ.ЗаказКлиента) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.ВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.АктВыполненныхРабот) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.ВыкупВозвратнойТарыКлиентом) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.ЗаявкаНаВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.ОтчетКомитенту) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.ОтчетКомитентуОСписании) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.РеализацияТоваровУслуг) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|			когда Тип(Документ.РеализацияУслугПрочихАктивов) тогда ТаблицаЗадолженностей.ОбъектРасчетов.Дата
		|           иначе ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) конец как ДатаЗадолженности
		|ПОМЕСТИТЬ втИтоговыеДанные
		|ИЗ
		|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
		|		{ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
		|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлановогоПогашения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКлассификацииЗадолженности.Интервалы КАК Интервалы
		|		ПО (Интервалы.Ссылка = &ВариантКлассификацииЗадолженности)
		|			И (ВЫБОР
		|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДолгКлиента = 0 ИЛИ ТаблицаЗадолженностей.ДатаПлановогоПогашения = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлановогоПогашения, &ДатаОтчета, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ МЕЖДУ Интервалы.НижняяГраницаИнтервала И Интервалы.ВерхняяГраницаИнтервала)}
		|ГДЕ
		|	ТаблицаЗадолженностей.Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)
		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговыеДанные.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	втИтоговыеДанные.ЗаказКлиента КАК ЗаказКлиента,
		|	втИтоговыеДанные.Договор КАК Договор,
		|	втИтоговыеДанные.ВидДоговора КАК ВидДоговора,
		|	втИтоговыеДанные.Валюта КАК Валюта,
		|	втИтоговыеДанные.РасчетныйДокумент КАК РасчетныйДокумент,
		|	втИтоговыеДанные.ДатаПлатежа КАК ДатаПлатежа,
		|	втИтоговыеДанные.Партнер КАК Партнер,
		|	втИтоговыеДанные.Организация КАК Организация,
		|	втИтоговыеДанные.Контрагент КАК Контрагент,
		|	втИтоговыеДанные.НашДолг КАК НашДолг,
		|	втИтоговыеДанные.ДолгКлиента КАК ДолгКлиента,
		|	втИтоговыеДанные.КОтгрузке КАК КОтгрузке,
		|	втИтоговыеДанные.НашДолгВВалютеОтчета КАК НашДолгВВалютеОтчета,
		|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
		|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета КАК КОтгрузкеВВалютеОтчета,
		|	втИтоговыеДанные.КоличествоДней КАК КоличествоДней,
		|	втИтоговыеДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
		|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
		|	втИтоговыеДанные.НаименованиеИнтервала КАК ИнтервалЗадолженности,
		|	втИтоговыеДанные.НомерИнтервала КАК НомерИнтервала,
		|	втИтоговыеДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
		|	втИтоговыеДанные.КонтактноеЛицо КАК КонтактноеЛицо,
		|	ЕСТЬNULL(МИНИМУМ(РасчетыСКлиентами.ДатаПлатежа), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежаПлан
		|ПОМЕСТИТЬ втИтогиДанные
		|ИЗ
		|	втИтоговыеДанные КАК втИтоговыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО (втИтоговыеДанные.КоличествоДней = 0)
		|			И (РасчетыСКлиентами.Период МЕЖДУ &ДатаОтчета И &ПраваяГраницаОтчета)
		|			И втИтоговыеДанные.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|			И (РасчетыСКлиентами.ЗаказКлиента = втИтоговыеДанные.ЗаказКлиента)
		|			И (РасчетыСКлиентами.КОплате > 0)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВсеДолги
		|				ТОГДА втИтоговыеДанные.ДолгКлиента > 0
		|			ИНАЧЕ втИтоговыеДанные.ДолгКлиентаПросрочено > 0
		|		КОНЕЦ
		|	И (втИтоговыеДанные.ДатаЗадолженности = ДАТАВРЕМЯ(1, 1, 1) ИЛИ втИтоговыеДанные.ДатаЗадолженности > &ДатаАктуальностиДЗ ИЛИ &ДатаАктуальностиДЗ = ДАТАВРЕМЯ(1, 1, 1)) 
		|
		|СГРУППИРОВАТЬ ПО
		|	втИтоговыеДанные.АналитикаУчетаПоПартнерам,
		|	втИтоговыеДанные.ЗаказКлиента,
		|	втИтоговыеДанные.Договор,
		|	втИтоговыеДанные.ВидДоговора,
		|	втИтоговыеДанные.Валюта,
		|	втИтоговыеДанные.РасчетныйДокумент,
		|	втИтоговыеДанные.ДатаПлатежа,
		|	втИтоговыеДанные.Партнер,
		|	втИтоговыеДанные.Организация,
		|	втИтоговыеДанные.Контрагент,
		|	втИтоговыеДанные.НашДолг,
		|	втИтоговыеДанные.ДолгКлиента,
		|	втИтоговыеДанные.КОтгрузке,
		|	втИтоговыеДанные.НашДолгВВалютеОтчета,
		|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета,
		|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета,
		|	втИтоговыеДанные.КоличествоДней,
		|	втИтоговыеДанные.ДолгКлиентаПросрочено,
		|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета,
		|	втИтоговыеДанные.НаименованиеИнтервала,
		|	втИтоговыеДанные.НомерИнтервала,
		|	втИтоговыеДанные.НижняяГраницаИнтервала,
		|	втИтоговыеДанные.КонтактноеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтогиДанные.ЗаказКлиента КАК ЗаказКлиента,
		|	втИтогиДанные.Договор КАК Договор,
		|	ВЫБОР КОГДА втИтогиДанные.ВидДоговора = ЗНАЧЕНИЕ(Справочник.табАид_ВидыДоговоров.ПустаяСсылка) ТОГДА """" ИНАЧЕ втИтогиДанные.ВидДоговора КОНЕЦ КАК ВидДоговора,
		|	ЕСТЬNULL(втИтогиДанные.Партнер.табАид_СтатусПартнера, ЗНАЧЕНИЕ(Справочник.табАид_СтатусыПартнеров.ПустаяСсылка)) КАК СтатусПартнера,
		|	втИтогиДанные.Валюта КАК Валюта,
		|	втИтогиДанные.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЕСТЬNULL(втИтогиДанные.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежа,
		|	РАЗНОСТЬДАТ(ВЫБОР КОГДА ЕСТЬNULL(втИтогиДанные.ДатаПлатежаПлан, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1) ТОГДА &ДатаОтчета ИНАЧЕ втИтогиДанные.ДатаПлатежаПлан КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа, ЕСТЬNULL(втИтогиДанные.КоличествоДней, 0) КАК КоличествоДней,
		|	втИтогиДанные.Партнер КАК Партнер,
		|	втИтогиДанные.Организация КАК Организация,
		|	втИтогиДанные.Контрагент КАК Контрагент,
		|	втИтогиДанные.ДолгКлиента КАК ДолгКлиента,
		|	втИтогиДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
		|	втИтогиДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
		|	втИтогиДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
		|	втИтогиДанные.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
		|	втИтогиДанные.НомерИнтервала КАК НомерИнтервала,
		|	втИтогиДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
		|	втИтогиДанные.КонтактноеЛицо КАК КонтактноеЛицо,
		|	втИтогиДанные.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
		|	ВЫБОР КОГДА СписокИсключений.Партнер ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ИсключенИзРассылки
		|ИЗ
		|	втИтогиДанные КАК втИтогиДанные
		|ЛЕВОЕ СОЕДИНЕНИЕ СписокИсключений КАК СписокИсключений
		|ПО втИтогиДанные.Партнер = СписокИсключений.Партнер";
		Если ВалютаОтчета = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Регл","");
		ИначеЕсли ВалютаОтчета = 2 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"Регл","Упр");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&НаДату","&ДатаОтчета");	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ТипыДокументовПлана", ПолучитьТипыДокументовПлана());
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сегменты.Партнер КАК Партнер,
		|	Сегменты.Сегмент КАК СегментПартнеров,
		|	ИСТИНА КАК ИспользуетсяОтборПоСегментуПартнеров
		|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
		|ИЗ
		|	РегистрСведений.ПартнерыСегмента КАК Сегменты
		|{ГДЕ
		|	Сегменты.Сегмент.* КАК СегментПартнеров,
		|	Сегменты.Партнер.* КАК Партнер}
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Партнер,
		|	ИспользуетсяОтборПоСегментуПартнеров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НеВключатьВРассылку.Партнер КАК Партнер
		|ПОМЕСТИТЬ СписокИсключений
		|ИЗ
		|	РегистрСведений.табАид_НеВключатьВРассылку КАК НеВключатьВРассылку
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КурсВалюты.Валюта КАК Валюта,
		|	КурсВалюты.Курс * КурсВалютыОтчета.Кратность / (КурсВалюты.Кратность * КурсВалютыОтчета.Курс) КАК КоэффициентПересчета
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, ) КАК КурсВалюты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатков, Валюта = &Валюта) КАК КурсВалютыОтчета
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КурсВалюты.Кратность <> 0
		|	И КурсВалютыОтчета.Курс <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	Расчеты.Валюта,
		|	Расчеты.РасчетныйДокумент,
		|	Остатки.ДатаПлатежа КАК ДатаПлатежа,
		|	-(Расчеты.КВозвратуОстаток + Расчеты.ПредоплатаОстаток) КАК НашДолг,
		|	ВЫБОР
		|		КОГДА &ДанныеОтчета = 2
		|			ТОГДА ВЫБОР
		|					КОГДА Расчеты.ДолгУпрОстаток + Расчеты.ПредоплатаУпрОстаток < 0
		|						ТОГДА -(Расчеты.ДолгУпрОстаток + Расчеты.ПредоплатаУпрОстаток)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОГДА &ДанныеОтчета = 1
		|			ТОГДА ВЫБОР
		|					КОГДА Расчеты.ДолгРеглОстаток + Расчеты.ПредоплатаРеглОстаток < 0
		|						ТОГДА -(Расчеты.ДолгРеглОстаток + Расчеты.ПредоплатаРеглОстаток)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|	КОНЕЦ КАК НашДолгВВалютеОтчета,
		|
		|	ВЫБОР КОГДА Расчеты.ДолгОстаток > ЕСТЬNULL(Остатки.КОплате, Расчеты.ДолгОстаток)
		|		ТОГДА Остатки.КОплате
		|		ИНАЧЕ Расчеты.ДолгОстаток
		|	КОНЕЦ КАК ДолгКлиента,
		|	
		|	ВЫБОР
		|		КОГДА &ДанныеОтчета = 2
		|			ТОГДА ВЫБОР КОГДА Расчеты.ДолгОстаток > ЕСТЬNULL(Остатки.КОплате, Расчеты.ДолгОстаток)
		|				ТОГДА ВЫРАЗИТЬ((Расчеты.ДолгУпрОстаток / Расчеты.ДолгОстаток * Остатки.КОплате) КАК ЧИСЛО(31,2))
		|				ИНАЧЕ Расчеты.ДолгУпрОстаток
		|			КОНЕЦ
		|		КОГДА &ДанныеОтчета = 1
		|			ТОГДА ВЫБОР КОГДА Расчеты.ДолгОстаток > ЕСТЬNULL(Остатки.КОплате, Расчеты.ДолгОстаток)
		|				ТОГДА ВЫРАЗИТЬ((Расчеты.ДолгРеглОстаток / Расчеты.ДолгОстаток * Остатки.КОплате) КАК ЧИСЛО(31,2))
		|				ИНАЧЕ Расчеты.ДолгРеглОстаток
		|			КОНЕЦ
		|	КОНЕЦ КАК ДолгКлиентаВВалютеОтчета,
		|	0 КАК КОтгрузке,
		|	0 КАК КОтгрузкеВВалютеОтчета,
		|	АналитикаУчета.Партнер,
		|	АналитикаУчета.Организация,
		|	АналитикаУчета.Контрагент,
		|	АналитикаУчета.Договор,
		|	АналитикаУчета.НаправлениеДеятельности,
		|	ОтборПоСегментуПартнеров.СегментПартнеров КАК СегментПартнеров
		|ПОМЕСТИТЬ ТаблицаЗадолженностейПросроченная
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОстатков, ) КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|	ПО Расчеты.Валюта = КурсыВалют.Валюта
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК Остатки
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = Остатки.ЗаказКлиента
		|		И Расчеты.РасчетныйДокумент = Остатки.РасчетныйДокумент
		|		И Расчеты.Валюта = Остатки.Валюта
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОтборПоСегментуПартнеров КАК ОтборПоСегментуПартнеров
		|	ПО АналитикаУчета.Партнер = ОтборПоСегментуПартнеров.Партнер
		|		И ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров 
		|ГДЕ
		|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	Расчеты.Валюта,
		|	NULL КАК РасчетныйДокумент,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПлатежа,
		|	0 КАК НашДолг,
		|	0 КАК НашДолгВВалютеОтчета,
		|	0 КАК ДолгКлиента,
		|	0 КАК ДолгКлиентаВВалютеОтчета,
		|	ВЫБОР
		|		КОГДА Расчеты.КОтгрузкеОстаток < 0
		|			ТОГДА -Расчеты.КОтгрузкеОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КОтгрузке,
		|	ВЫБОР
		|		КОГДА Расчеты.КОтгрузкеОстаток < 0
		|			ТОГДА -Расчеты.КОтгрузкеОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ * ЕСТЬNULL(КурсыВалют.КоэффициентПересчета, 1) КАК КОтгрузкеВВалютеОтчета,
		|	АналитикаУчета.Партнер,
		|	АналитикаУчета.Организация,
		|	АналитикаУчета.Контрагент,
		|	АналитикаУчета.Договор,
		|	АналитикаУчета.НаправлениеДеятельности,
		|	ОтборПоСегментуПартнеров.СегментПартнеров КАК СегментПартнеров
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(&ДатаОстатков, ) КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|	ПО Расчеты.Валюта = КурсыВалют.Валюта
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОтборПоСегментуПартнеров КАК ОтборПоСегментуПартнеров
		|	ПО АналитикаУчета.Партнер = ОтборПоСегментуПартнеров.Партнер
		|		И ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров 
		|ГДЕ
		|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.АналитикаУчетаПоПартнерам,
		|	Таблица.ЗаказКлиента,
		|	Таблица.РасчетныйДокумент,
		|	Таблица.Валюта,
		|	Таблица.СегментПартнеров,
		|	СУММА(Таблица.ДолгКлиента) КАК ДолгКлиента,
		|	СУММА(Таблица.ДолгКлиентаВВалютеОтчета) КАК ДолгКлиентаВВалютеОтчета
		|ПОМЕСТИТЬ ВсегоПросрочено
		|ИЗ ТаблицаЗадолженностейПросроченная КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам,
		|	ЗаказКлиента,
		|	РасчетныйДокумент,
		|	Валюта,
		|	СегментПартнеров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	Расчеты.Валюта,
		|	Расчеты.РасчетныйДокумент,
		|	&ДатаОтчета КАК ДатаПлатежа,
		|	-(Расчеты.КВозвратуОстаток + Расчеты.ПредоплатаОстаток) КАК НашДолг,
		|	ВЫБОР
		|		КОГДА &ДанныеОтчета = 2
		|			ТОГДА ВЫБОР
		|					КОГДА Расчеты.ДолгУпрОстаток + Расчеты.ПредоплатаУпрОстаток < 0
		|						ТОГДА -(Расчеты.ДолгУпрОстаток + Расчеты.ПредоплатаУпрОстаток)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		КОГДА &ДанныеОтчета = 1
		|			ТОГДА ВЫБОР
		|					КОГДА Расчеты.ДолгРеглОстаток + Расчеты.ПредоплатаРеглОстаток < 0
		|						ТОГДА -(Расчеты.ДолгРеглОстаток + Расчеты.ПредоплатаРеглОстаток)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|	КОНЕЦ КАК НашДолгВВалютеОтчета,
		|
		|	(Расчеты.ДолгОстаток - ЕСТЬNULL(Остатки.ДолгКлиента, Расчеты.ДолгОстаток)) КАК ДолгКлиента,
		|	
		|	ВЫБОР
		|		КОГДА &ДанныеОтчета = 2
		|			ТОГДА (Расчеты.ДолгУпрОстаток - Остатки.ДолгКлиентаВВалютеОтчета)
		|		КОГДА &ДанныеОтчета = 1
		|			ТОГДА (Расчеты.ДолгРеглОстаток - Остатки.ДолгКлиентаВВалютеОтчета)
		|	КОНЕЦ КАК ДолгКлиентаВВалютеОтчета,
		|	0 КАК КОтгрузке,
		|	0 КАК КОтгрузкеВВалютеОтчета,
		|	АналитикаУчета.Партнер,
		|	АналитикаУчета.Организация,
		|	АналитикаУчета.Контрагент,
		|	АналитикаУчета.Договор,
		|	АналитикаУчета.НаправлениеДеятельности,
		|	ОтборПоСегментуПартнеров.СегментПартнеров КАК СегментПартнеров
		|ПОМЕСТИТЬ ТаблицаЗадолженностей
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(&ДатаОстатков, ) КАК Расчеты
		|		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|	ПО Расчеты.Валюта = КурсыВалют.Валюта
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОтборПоСегментуПартнеров КАК ОтборПоСегментуПартнеров
		|	ПО АналитикаУчета.Партнер = ОтборПоСегментуПартнеров.Партнер
		|		И ОтборПоСегментуПартнеров.ИспользуетсяОтборПоСегментуПартнеров = &ИспользуетсяОтборПоСегментуПартнеров
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВсегоПросрочено КАК Остатки
		|	ПО Расчеты.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
		|		И Расчеты.ЗаказКлиента = Остатки.ЗаказКлиента
		|		И Расчеты.РасчетныйДокумент = Остатки.РасчетныйДокумент
		|		И Расчеты.Валюта = Остатки.Валюта
		|		И ВЫБОР КОГДА &ИспользуетсяОтборПоСегментуПартнеров ТОГДА ОтборПоСегментуПартнеров.СегментПартнеров = Остатки.СегментПартнеров ИНАЧЕ ИСТИНА КОНЕЦ
		|ГДЕ
		|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	И (Расчеты.ДолгОстаток - ЕСТЬNULL(Остатки.ДолгКлиента, Расчеты.ДолгОстаток)) <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Расчеты.АналитикаУчетаПоПартнерам,
		|	Расчеты.ЗаказКлиента,
		|	Расчеты.ГруппаФинансовогоУчета,
		|	Расчеты.Валюта,
		|	Расчеты.РасчетныйДокумент,
		|	Расчеты.ДатаПлатежа,
		|	Расчеты.НашДолг,
		|	Расчеты.НашДолгВВалютеОтчета,
		|
		|	Расчеты.ДолгКлиента,
		|	
		|	Расчеты.ДолгКлиентаВВалютеОтчета,
		|	Расчеты.КОтгрузке,
		|	Расчеты.КОтгрузкеВВалютеОтчета,
		|	Расчеты.Партнер,
		|	Расчеты.Организация,
		|	Расчеты.Контрагент,
		|	Расчеты.Договор,
		|	Расчеты.НаправлениеДеятельности,
		|	Расчеты.СегментПартнеров
		|ИЗ
		|	ТаблицаЗадолженностейПросроченная КАК Расчеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаЗадолженностей.ДатаПлатежа КАК ДатаНачала,
		|	ГрафикиРаботы.Дата КАК ДатаОкончания,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ИЛИ ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РабочийДень
		|ПОМЕСТИТЬ Графики
		|ИЗ
		|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.ПроизводственныйКалендарь = &Календарь)
		|ГДЕ
		|	ГрафикиРаботы.Дата МЕЖДУ ТаблицаЗадолженностей.ДатаПлатежа И &ПраваяГраницаОтчета
		|	И ТаблицаЗадолженностей.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
		|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
		|ПОМЕСТИТЬ РазностиДат
		|ИЗ
		|	Графики КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
		|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
		|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
		|ГДЕ
		|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ДатаНачала,
		|	ВложенныйЗапрос.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам,
		|	ТаблицаЗадолженностей.ЗаказКлиента,
		|	ТаблицаЗадолженностей.Договор КАК Договор,
		|	isnull(Выразить(ТаблицаЗадолженностей.Договор КАК Справочник.ДоговорыКонтрагентов).табАид_ВидДоговора, Значение(Справочник.табАид_ВидыДоговоров.ПустаяСсылка)) КАК ВидДоговора,
		|	ТаблицаЗадолженностей.Валюта,
		|	ТаблицаЗадолженностей.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ТаблицаЗадолженностей.ДатаПлатежа КАК ДатаПлатежа,
		|	ТаблицаЗадолженностей.Партнер,
		|	ТаблицаЗадолженностей.Организация,
		|	ТаблицаЗадолженностей.Контрагент,
		|	ТаблицаЗадолженностей.НашДолг,
		|	ТаблицаЗадолженностей.ДолгКлиента,
		|	ТаблицаЗадолженностей.КОтгрузке,
		|	ТаблицаЗадолженностей.НашДолгВВалютеОтчета,
		|	ТаблицаЗадолженностей.ДолгКлиентаВВалютеОтчета,
		|	ТаблицаЗадолженностей.КОтгрузкеВВалютеОтчета,
		|	ВЫБОР
		|		КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА РазностиДат.КоличествоДней > 0
		|						ТОГДА РазностиДат.КоличествоДней
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА 0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
		|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
		|						ИНАЧЕ -РАЗНОСТЬДАТ(&ДатаОтчета, ТаблицаЗадолженностей.ДатаПлатежа, ДЕНЬ)
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоДней,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ = 0
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаЗадолженностей.ДолгКлиента
		|	КОНЕЦ КАК ДолгКлиентаПросрочено,
		|	ВЫБОР
		|		КОГДА ВЫБОР
		|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ = 0
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаЗадолженностей.ДолгКлиентаВВалютеОтчета
		|	КОНЕЦ КАК ДолгКлиентаПросроченоВВалютеОтчета,
		|	ЕСТЬNULL(Интервалы.НаименованиеИнтервала, &СтрокаДолгНеПросрочен) КАК НаименованиеИнтервала,
		|	ЕСТЬNULL(Интервалы.НомерСтроки, 0) КАК НомерИнтервала,
		|	ЕСТЬNULL(Интервалы.НижняяГраницаИнтервала, 0) КАК НижняяГраницаИнтервала,
		|	ТаблицаЗадолженностей.СегментПартнеров КАК СегментПартнеров,
		|   Выбор когда Выразить(ТаблицаЗадолженностей.Договор КАК справочник.ДоговорыКонтрагентов).КонтактноеЛицо = Значение(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) 
		|		тогда выбор ТипЗначения(ТаблицаЗадолженностей.ЗаказКлиента)
		|			когда Тип(Справочник.ДоговорыКонтрагентов) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.ЗаказКлиента) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.ВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.АктВыполненныхРабот) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.ВыкупВозвратнойТарыКлиентом) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.ЗаявкаНаВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.ОтчетКомитенту) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.ОтчетКомитентуОСписании) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.РеализацияТоваровУслуг) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|			когда Тип(Документ.РеализацияУслугПрочихАктивов) тогда ТаблицаЗадолженностей.ЗаказКлиента.КонтактноеЛицо
		|           иначе Значение(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка) 
		|				конец
		|         иначе Выразить(ТаблицаЗадолженностей.Договор КАК справочник.ДоговорыКонтрагентов).КонтактноеЛицо конец как КонтактноеЛицо,
		|   		выбор ТипЗначения(ТаблицаЗадолженностей.ЗаказКлиента)
		|			когда Тип(Справочник.ДоговорыКонтрагентов) тогда ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			когда Тип(Документ.ЗаказКлиента) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.ВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.АктВыполненныхРабот) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.ВыкупВозвратнойТарыКлиентом) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.ЗаявкаНаВозвратТоваровОтКлиента) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.ОтчетКомитенту) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.ОтчетКомитентуОСписании) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.РеализацияТоваровУслуг) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|			когда Тип(Документ.РеализацияУслугПрочихАктивов) тогда ТаблицаЗадолженностей.ЗаказКлиента.Дата
		|           иначе ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) конец как ДатаЗадолженности
		|ПОМЕСТИТЬ втИтоговыеДанные
		|ИЗ
		|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
		|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлатежа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКлассификацииЗадолженности.Интервалы КАК Интервалы
		|		ПО (Интервалы.Ссылка = &ВариантКлассификацииЗадолженности)
		|			И (ВЫБОР
		|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ДатаОтчета, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ МЕЖДУ Интервалы.НижняяГраницаИнтервала И Интервалы.ВерхняяГраницаИнтервала)
		|ГДЕ
		|	ТаблицаЗадолженностей.Организация В (&Организации) И ТаблицаЗадолженностей.Контрагент В (&Контрагент)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговыеДанные.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	втИтоговыеДанные.ЗаказКлиента КАК ЗаказКлиента,
		|	втИтоговыеДанные.Договор КАК Договор,
		|	втИтоговыеДанные.ВидДоговора КАК ВидДоговора,
		|	втИтоговыеДанные.Валюта КАК Валюта,
		|	втИтоговыеДанные.РасчетныйДокумент КАК РасчетныйДокумент,
		|	втИтоговыеДанные.ДатаПлатежа КАК ДатаПлатежа,
		|	втИтоговыеДанные.Партнер КАК Партнер,
		|	втИтоговыеДанные.Организация КАК Организация,
		|	втИтоговыеДанные.Контрагент КАК Контрагент,
		|	втИтоговыеДанные.НашДолг КАК НашДолг,
		|	втИтоговыеДанные.ДолгКлиента КАК ДолгКлиента,
		|	втИтоговыеДанные.КОтгрузке КАК КОтгрузке,
		|	втИтоговыеДанные.НашДолгВВалютеОтчета КАК НашДолгВВалютеОтчета,
		|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
		|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета КАК КОтгрузкеВВалютеОтчета,
		|	втИтоговыеДанные.КоличествоДней КАК КоличествоДней,
		|	втИтоговыеДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
		|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
		|	втИтоговыеДанные.НаименованиеИнтервала КАК ИнтервалЗадолженности,
		|	втИтоговыеДанные.НомерИнтервала КАК НомерИнтервала,
		|	втИтоговыеДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
		|	втИтоговыеДанные.СегментПартнеров КАК СегментПартнеров,
		|	втИтоговыеДанные.КонтактноеЛицо КАК КонтактноеЛицо,
		|	втИтоговыеДанные.ДатаЗадолженности КАК ДатаЗадолженности,
		|	ЕСТЬNULL(МИНИМУМ(РасчетыСКлиентами.ДатаПлатежа), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежаПлан
		|ПОМЕСТИТЬ втИтогиДанные
		|ИЗ
		|	втИтоговыеДанные КАК втИтоговыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|		ПО (втИтоговыеДанные.КоличествоДней = 0)
		|			И (РасчетыСКлиентами.Период МЕЖДУ &ДатаОтчета И &ПраваяГраницаОтчета)
		|			И втИтоговыеДанные.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|			И (РасчетыСКлиентами.ЗаказКлиента = втИтоговыеДанные.ЗаказКлиента)
		|			И (РасчетыСКлиентами.КОплате > 0)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВсеДолги
		|				ТОГДА втИтоговыеДанные.ДолгКлиента > 0
		|			ИНАЧЕ втИтоговыеДанные.ДолгКлиентаПросрочено > 0
		|		КОНЕЦ
		|	И (втИтоговыеДанные.ДатаЗадолженности = ДАТАВРЕМЯ(1, 1, 1) ИЛИ втИтоговыеДанные.ДатаЗадолженности > &ДатаАктуальностиДЗ ИЛИ &ДатаАктуальностиДЗ = ДАТАВРЕМЯ(1, 1, 1))  
		|
		|СГРУППИРОВАТЬ ПО
		|	втИтоговыеДанные.АналитикаУчетаПоПартнерам,
		|	втИтоговыеДанные.ЗаказКлиента,
		|	втИтоговыеДанные.Договор,
		|	втИтоговыеДанные.ВидДоговора,
		|	втИтоговыеДанные.Валюта,
		|	втИтоговыеДанные.РасчетныйДокумент,
		|	втИтоговыеДанные.ДатаПлатежа,
		|	втИтоговыеДанные.Партнер,
		|	втИтоговыеДанные.Организация,
		|	втИтоговыеДанные.Контрагент,
		|	втИтоговыеДанные.НашДолг,
		|	втИтоговыеДанные.ДолгКлиента,
		|	втИтоговыеДанные.КОтгрузке,
		|	втИтоговыеДанные.НашДолгВВалютеОтчета,
		|	втИтоговыеДанные.ДолгКлиентаВВалютеОтчета,
		|	втИтоговыеДанные.КОтгрузкеВВалютеОтчета,
		|	втИтоговыеДанные.КоличествоДней,
		|	втИтоговыеДанные.ДолгКлиентаПросрочено,
		|	втИтоговыеДанные.ДолгКлиентаПросроченоВВалютеОтчета,
		|	втИтоговыеДанные.НаименованиеИнтервала,
		|	втИтоговыеДанные.НомерИнтервала,
		|	втИтоговыеДанные.НижняяГраницаИнтервала,
		|	втИтоговыеДанные.СегментПартнеров,
		|	втИтоговыеДанные.КонтактноеЛицо,
		|	втИтоговыеДанные.ДатаЗадолженности
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтогиДанные.ЗаказКлиента КАК ЗаказКлиента,
		|	втИтогиДанные.Договор КАК Договор,
		|	ВЫБОР КОГДА втИтогиДанные.ВидДоговора = ЗНАЧЕНИЕ(Справочник.табАид_ВидыДоговоров.ПустаяСсылка) ТОГДА ""<не выбран>"" ИНАЧЕ втИтогиДанные.ВидДоговора КОНЕЦ КАК ВидДоговора,
		|	ЕСТЬNULL(втИтогиДанные.Партнер.табАид_СтатусПартнера, ЗНАЧЕНИЕ(Справочник.табАид_СтатусыПартнеров.ПустаяСсылка)) КАК СтатусПартнера,
		|	втИтогиДанные.Валюта КАК Валюта,
		|	втИтогиДанные.РасчетныйДокумент КАК РасчетныйДокумент,
		|	ЕСТЬNULL(втИтогиДанные.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежа,
		|	РАЗНОСТЬДАТ(ВЫБОР
		|			КОГДА ЕСТЬNULL(втИтогиДанные.ДатаПлатежаПлан, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ДатаОтчета
		|			ИНАЧЕ втИтогиДанные.ДатаПлатежаПлан
		|		КОНЕЦ, &ДатаОтчета, ДЕНЬ) КАК КоличествоДнейДоПлатежа,
		|	ЕСТЬNULL(втИтогиДанные.КоличествоДней, 0) КАК КоличествоДней,
		|	втИтогиДанные.Партнер КАК Партнер,
		|	втИтогиДанные.Организация КАК Организация,
		|	втИтогиДанные.Контрагент КАК Контрагент,
		|	втИтогиДанные.ДолгКлиента КАК ДолгКлиента,
		|	втИтогиДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета,
		|	втИтогиДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено,
		|	втИтогиДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета,
		|	втИтогиДанные.ИнтервалЗадолженности КАК ИнтервалЗадолженности,
		|	втИтогиДанные.НомерИнтервала КАК НомерИнтервала,
		|	втИтогиДанные.НижняяГраницаИнтервала КАК НижняяГраницаИнтервала,
		|	втИтогиДанные.СегментПартнеров КАК СегментПартнеров,
		|	втИтогиДанные.КонтактноеЛицо КАК КонтактноеЛицо,
		|	втИтогиДанные.ДатаПлатежаПлан КАК ДатаПлатежаПлан,
		|	ВЫБОР КОГДА СписокИсключений.Партнер ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ИсключенИзРассылки
		|ИЗ
		|	втИтогиДанные КАК втИтогиДанные
		|ЛЕВОЕ СОЕДИНЕНИЕ СписокИсключений КАК СписокИсключений
		|ПО втИтогиДанные.Партнер = СписокИсключений.Партнер";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТипыДокументовПлана()
	
	ТекстТиповДокументов = ""; 
	
	
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаказКлиента), ";
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента), ";
	ТекстТиповДокументов = ТекстТиповДокументов + "ТИП(Документ.ГрафикИсполненияДоговора)";
	
	Возврат ТекстТиповДокументов;
	
КонецФункции

Функция ПолучитьПараметрыДебиторскойЗадолженностиПоУмолчанию() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Сутки", 24*60*60);
	СтруктураПараметров.Вставить("ДатаОтчета", ТекущаяДата());
	СтруктураПараметров.Вставить("ДанныеОтчета", 1);
	СтруктураПараметров.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	СтруктураПараметров.Вставить("ВсеДолги", Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВариантыКлассификацииЗадолженности.Ссылка КАК Ссылка,
	|	ВариантыКлассификацииЗадолженности.Календарь КАК Календарь
	|ИЗ
	|	Справочник.ВариантыКлассификацииЗадолженности КАК ВариантыКлассификацииЗадолженности
	|ГДЕ
	|	НЕ ВариантыКлассификацииЗадолженности.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В системе не указаны варианты классификации задолженности.");
	иначе	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураПараметров.Вставить("ВариантКлассификации", Выборка.Ссылка);
		СтруктураПараметров.Вставить("Календарь", Выборка.Календарь);
		СтруктураПараметров.Вставить("ВариантКлассификацииВыбор", Выборка.Количество() > 1);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ДатаАктуальностиРасчетов", РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Дата(3999,11,30), , "РасчетыСКлиентами"));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьВнешнююОбработкуРеглЗадания(Знач Организация = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	табАид_Настройки.ВнешняяОбработка КАК ВнешняяОбработка,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	НЕ табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	табАид_Настройки.ВнешняяОбработка,
	|	2
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ВнешняяОбработка; 
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат неопределено;
	
КонецФункции

Функция СоздатьРегламентноеЗаданиеПоПравилу(Правило) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	ВнешняяОбработкаРеглЗадания = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьВнешнююОбработкуРеглЗадания();
	
	// Создаем новое регламентное задание.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Если НЕ Правило.УчитыватьЧасовойПояс Тогда 
		Расписание.ВремяНачала 	= Правило.ВремяНачала;
		Расписание.ВремяКонца 	= Правило.ВремяКонца;
	Иначе
		Расписание.ПериодПовтораВТечениеДня = 3600; //30 минут
	КонецЕсли;
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(Правило.ДеньНедели);
	
	Расписание.ДниНедели         = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	
	ПараметрыЗадания.Вставить("Наименование", лев("ТАБ АИД" + " (" + СформироватьНаименованиеРегЗаданияПоПравилу(Правило) + ")",127));
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеОсновногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", Правило.Ключ);
	
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеОсновногоЗадания);
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИдентификаторКоманды", "табАид_ВыполнениеОтправкиСообщений");
	СтруктураКоманды.Вставить("ПараметрыКоманды", Новый Структура("КлючРегЗадания, УчитыватьЧасовойПояс, ВремяНачала, ВремяКонца", Правило.Ключ, Правило.УчитыватьЧасовойПояс, Правило.ВремяНачала, Правило.ВремяКонца));
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ВнешняяОбработкаРеглЗадания);
	МассивПараметров.Добавить(СтруктураКоманды);
	
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	НовоеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
	//Добавляем в параметры команды еще и идентификатор регламентного задания
	НовоеЗадание.Параметры[1].ПараметрыКоманды.Вставить("ИдентификаторРегЗадания", НовоеЗадание.УникальныйИдентификатор);
	НовоеЗадание.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеЗадание;
	
КонецФункции

Функция СформироватьНаименованиеРегЗаданияПоПравилу(Правило)
	
	УстановитьПривилегированныйРежим(Истина);
	Наименование = "";
	Для каждого ЭлемПравила из Правило Цикл
		Если ЭлемПравила.Ключ = "Ключ" Или ЭлемПравила.Ключ = "КлючПравила" Тогда
			Продолжить;
		ИначеЕсли ЭлемПравила.Ключ = "ВремяНачала" Или ЭлемПравила.Ключ = "ВремяКонца" Тогда
			Значение = Формат(ЭлемПравила.Значение, "ДФ=""ЧЧ:мм:сс""");	
		Иначе
			Значение = ЭлемПравила.Значение;
		КонецЕсли;
		
		Наименование = Наименование + ?(ЗначениеЗаполнено(Наименование), ",", "") + Значение;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	//в sql поле description имеет ограничение 128 символов
	Если СтрДлина(Наименование) > 127 тогда
		Наименование = Лев(СокрЛП(Наименование), 127);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеПоПравилу(Правило) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", Правило.Ключ, МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	Для каждого РЗ из МассивРЗ Цикл
		РЗ.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура УдалениеРегламентныхЗаданийТАБАИД(МассивКлючей = неопределено) Экспорт
	
	
	УдалитьРегламентноеЗаданиеЗаполненияЗадолженности();
	УдалитьРегламентноеЗаданиеОбновленияСтатусов();
	
	ПравилаФормированияРЗ = ПолучитьПравилаФормированияРЗ(МассивКлючей);
	
	//По каждому правилу ищем регл. задания и удаляем их.
	Для каждого Правило из ПравилаФормированияРЗ Цикл
		УдалитьРегламентноеЗаданиеПоПравилу(Правило);		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапускРегламентныхЗаданийТАБАИД(МассивКлючей = неопределено) Экспорт
	
	СоздатьРегламентноеЗаданиеЗаполненияЗадолженности(Ложь);
	
	СоздатьРегламентноеЗаданиеОбновленияСтатусов(Ложь);	
	
	ПравилаФормированияРЗ = ПолучитьПравилаФормированияРЗ(МассивКлючей);
	
	//Удаляем все существующие правила по ключам.
	Для каждого Правило из ПравилаФормированияРЗ Цикл
		УдалитьРегламентноеЗаданиеПоПравилу(Правило);
	КонецЦикла;
	
	//Для каждого правила формируем отдельное регл. задание.
	Для каждого Правило из ПравилаФормированияРЗ Цикл
		СоздатьРегламентноеЗаданиеПоПравилу(Правило);		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьРегламентноеЗаданиеЗаполненияЗадолженности(УдалитьПередСозданием = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	Если УдалитьПередСозданием Тогда
		УдалитьРегламентноеЗаданиеЗаполненияЗадолженности();
	Иначе
		ОтборРЗ = Новый Структура("Ключ, Метаданные", "табАид_ЗаполнениеСпискаЗадолженности", МетаданныеОсновногоЗадания);
		МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
		Если МассивРЗ.Количество() > 0 Тогда
			Возврат МассивРЗ[0];
		КонецЕсли;
	КонецЕсли;
	
	ВнешняяОбработкаРеглЗадания = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьВнешнююОбработкуРеглЗадания();
	НастройкаРЗ = НастройкиРегЗаданий();
	
	// Создаем новое регламентное задание.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала 	= НастройкаРЗ.ВремяНачалаЗаполненияЗадолженности;
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание.ДниНедели = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	
	ПараметрыЗадания.Вставить("Наименование", "ТАБ АИД" + " (Заполнение списка задолженности)");
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеОсновногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "табАид_ЗаполнениеСпискаЗадолженности");
	
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеОсновногоЗадания);
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИдентификаторКоманды", "табАид_ЗаполнениеСпискаЗадолженности");
	СтруктураКоманды.Вставить("ПараметрыКоманды", Новый Структура("КлючРегЗадания", "табАид_ЗаполнениеСпискаЗадолженности"));
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ВнешняяОбработкаРеглЗадания);
	МассивПараметров.Добавить(СтруктураКоманды);
	
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	НовоеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеЗадание;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеЗаполненияЗадолженности()
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", "табАид_ЗаполнениеСпискаЗадолженности", МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	Для каждого РЗ из МассивРЗ Цикл
		РЗ.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СоздатьРегламентноеЗаданиеОбновленияСтатусов(УдалитьПередСозданием = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	Если УдалитьПередСозданием Тогда
		УдалитьРегламентноеЗаданиеОбновленияСтатусов();
	Иначе
		ОтборРЗ = Новый Структура("Ключ, Метаданные", "табАид_ОбновлениеСтатусовСообщений", МетаданныеОсновногоЗадания);
		МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
		Если МассивРЗ.Количество() > 0 Тогда
			Возврат МассивРЗ[0];
		КонецЕсли;
	КонецЕсли;
	
	ВнешняяОбработкаРеглЗадания = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьВнешнююОбработкуРеглЗадания();
	УстановитьПривилегированныйРежим(Истина);
	НастройкаРЗ = НастройкиРегЗаданий();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Создаем новое регламентное задание.
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала 	= НастройкаРЗ.ВремяНачалаОбновленияСтатусов;
	Расписание.ВремяКонца 	= НастройкаРЗ.ВремяОкончанияОбновленияСтатусов;
	Расписание.ПериодПовтораВТечениеДня = НастройкаРЗ.ИнтервалОбновленияСтатусов;
	
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание.ДниНедели = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	
	ПараметрыЗадания.Вставить("Наименование", "ТАБ АИД" + " (ОбновлениеСтатусовСообщений)");
	ПараметрыЗадания.Вставить("ИмяМетода", МетаданныеОсновногоЗадания.ИмяМетода);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "табАид_ОбновлениеСтатусовСообщений");
	
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеОсновногоЗадания);
	
	СтруктураКоманды = Новый Структура;
	СтруктураКоманды.Вставить("ИдентификаторКоманды", "табАид_ОбновлениеСтатусовСообщений");
	СтруктураКоманды.Вставить("ПараметрыКоманды", Новый Структура("КлючРегЗадания", "табАид_ОбновлениеСтатусовСообщений"));
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ВнешняяОбработкаРеглЗадания);
	МассивПараметров.Добавить(СтруктураКоманды);
	
	ПараметрыЗадания.Вставить("Параметры", МассивПараметров);
	НовоеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовоеЗадание;
	
КонецФункции

Процедура УдалитьРегламентноеЗаданиеОбновленияСтатусов()
	
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", "табАид_ОбновлениеСтатусовСообщений", МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	Для каждого РЗ из МассивРЗ Цикл
		РЗ.Удалить();
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет правильность сохраненных настроек формирования рег.задания для заполнения задолженности.
//
// Возвращаемое значение:
//  Булево - Истина, если настройка произведена.
Функция НастройкаРегЗаданийВыполнена(Знач Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкаРЗ = НастройкиРегЗаданий(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Отказ = Ложь;
	Для Каждого Поле Из НастройкаРЗ Цикл
		Если Не ЗначениеЗаполнено(Поле.Значение) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

Функция НастройкиРегЗаданий(Знач Организация = Неопределено) Экспорт
	
	Результат = Новый Структура("ВремяНачалаЗаполненияЗадолженности, ВнешняяОбработка, 
	|ИнтервалОбновленияСтатусов, ВремяНачалаОбновленияСтатусов, ВремяОкончанияОбновленияСтатусов");
	
	УстановитьПривилегированныйРежим(Истина);
	//можно отобрать параметры именно для конкретной орг-ции (на будущее)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	табАид_Настройки.ВнешняяОбработка КАК ВнешняяОбработка,
	|	табАид_Настройки.ВремяНачалаЗаполненияЗадолженности КАК ВремяНачалаЗаполненияЗадолженности,
	|	табАид_Настройки.ИнтервалОбновленияСтатусов КАК ИнтервалОбновленияСтатусов,
	|	табАид_Настройки.ВремяНачалаОбновленияСтатусов КАК ВремяНачалаОбновленияСтатусов,
	|	табАид_Настройки.ВремяОкончанияОбновленияСтатусов КАК ВремяОкончанияОбновленияСтатусов,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	НЕ табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	табАид_Настройки.ВнешняяОбработка,
	|	табАид_Настройки.ВремяНачалаЗаполненияЗадолженности,
	|	табАид_Настройки.ИнтервалОбновленияСтатусов,
	|	табАид_Настройки.ВремяНачалаОбновленияСтатусов,
	|	табАид_Настройки.ВремяОкончанияОбновленияСтатусов,
	|	2
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПравилаФормированияРЗ(МассивКлючей = неопределено)
	УстановитьПривилегированныйРежим(Истина);
	МассивПравилФормированияРЗ = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ПравилаФормированияСобытий.Партнер КАК Партнер,
	|	табАид_ПравилаФормированияСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	табАид_ПравилаФормированияСобытий.ВидДоговора КАК ВидДоговора,
	|	табАид_ПравилаФормированияСобытий.СтатусПартнера КАК СтатусПартнера,
	|	табАид_ПравилаФормированияСобытий.ТипСообщения КАК ТипСообщения,
	|	табАид_ПравилаФормированияСобытий.ВремяНачала КАК ВремяНачала,
	|	табАид_ПравилаФормированияСобытий.ВремяОкончания КАК ВремяКонца,
	|	табАид_ПравилаФормированияСобытий.ИнтервалСообщений КАК ИнтервалСообщений,
	|	табАид_ПравилаФормированияСобытий.КоличествоПовторов КАК КоличествоПовторов,
	|	табАид_ПравилаФормированияСобытий.УчитыватьЧасовойПояс КАК УчитыватьЧасовойПояс,
	|	табАид_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК Ключ,
	|	табАид_ПравилаФормированияСобытий.КлючПравила КАК КлючПравила,
	|	табАид_ПравилаФормированияСобытий.ДеньНедели КАК ДеньНедели
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий КАК табАид_ПравилаФормированияСобытий
	|";	
	
	Если Не МассивКлючей = неопределено Тогда
		Запрос.УстановитьПараметр("МассивКлючей", МассивКлючей);
		Запрос.Текст = Запрос.Текст + "ГДЕ табАид_ПравилаФормированияСобытий.КлючРегламентногоЗадания В (&МассивКлючей)";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ФиксСтруктура = ПолучитьФиксСтруктуруИзКолонокТЧ(Результат);
	
	// Вспомагательная фиксирования структура.
	Для каждого СтрРез из Результат Цикл
		
		Если Не ЗначениеЗаполнено(СтрРез.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилоФормированияРЗ = Новый Структура(ФиксСтруктура);
		ЗаполнитьЗначенияСвойств(ПравилоФормированияРЗ, СтрРез);
		МассивПравилФормированияРЗ.Добавить(ПравилоФормированияРЗ);
		
		//Для каждого повтора создаем свое регл. задание со смещением по времени.
		//Ключ оставляем тот же.
		Если СтрРез.КоличествоПовторов > 0 Тогда
			Для к = 1 по СтрРез.КоличествоПовторов Цикл
				ПравилоФормированияРЗ = Новый Структура(ФиксСтруктура);
				ЗаполнитьЗначенияСвойств(ПравилоФормированияРЗ, СтрРез);
				ПравилоФормированияРЗ.Ключ = СтрРез.Ключ;
				ПравилоФормированияРЗ.КлючПравила = СтрРез.КлючПравила;
				ПравилоФормированияРЗ.ВремяНачала = СтрРез.ВремяНачала + к*СтрРез.ИнтервалСообщений;
				ПравилоФормированияРЗ.ВремяКонца = СтрРез.ВремяКонца + к*СтрРез.ИнтервалСообщений;
				ПравилоФормированияРЗ.ДеньНедели = СтрРез.ДеньНедели;
				МассивПравилФормированияРЗ.Добавить(ПравилоФормированияРЗ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивПравилФормированияРЗ;
	
КонецФункции

Функция ПолучитьДанныеКИКонтактноеЛицо(КонтактноеЛицо)
	УстановитьПривилегированныйРежим(Истина);
	
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;
	
	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК ВидКИ,
	|	isnull(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	isnull(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	isnull(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
				ЕстьМобильныйТелефон = Истина;
			ИначеЕсли Не ЕстьМобильныйТелефон и Выборка.ВидКИ = 3 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанныеКИПартнера(Партнер)
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;
	
	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК ВидКИ,
	|	isnull(ПартнерыКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	isnull(ПартнерыКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
	|";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Ответ;
	
КонецФункции

Процедура ВключитьПартнераВРассылку(Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.табАид_НеВключатьВРассылку.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партнер.Установить(Партнер);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура ИсключитьПартнераИзРассылки(Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.табАид_НеВключатьВРассылку.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Партнер = Партнер;
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьМассивКлючейРЗ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);	
	МассивКлючейРЗ = Новый Массив;
	
	Если ЕстьРегламентноеЗаданиеПоКлючу("табАид_ЗаполнениеСпискаЗадолженности") Тогда
		МассивКлючейРЗ.Добавить("табАид_ЗаполнениеСпискаЗадолженности");
	КонецЕсли;
	
	Если ЕстьРегламентноеЗаданиеПоКлючу("табАид_ОбновлениеСтатусовСообщений") Тогда
		МассивКлючейРЗ.Добавить("табАид_ОбновлениеСтатусовСообщений");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ПравилаФормированияСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания
	|ИЗ
	|	РегистрСведений.табАид_ПравилаФормированияСобытий КАК табАид_ПравилаФормированияСобытий";
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если ЕстьРегламентноеЗаданиеПоКлючу(СокрЛП(Результат.КлючРегламентногоЗадания)) Тогда
			МассивКлючейРЗ.Добавить(СокрЛП(Результат.КлючРегламентногоЗадания));
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);	
	
	Возврат МассивКлючейРЗ;
КонецФункции

Функция ЕстьРегламентноеЗаданиеПоКлючу(КлючРЗ)
	УстановитьПривилегированныйРежим(Истина);
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок;
	
	ОтборРЗ = Новый Структура("Ключ, Метаданные", КлючРЗ, МетаданныеОсновногоЗадания);
	МассивРЗ = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборРЗ);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивРЗ.Количество() > 0;
	
КонецФункции

Процедура ОбновитьСтатусДоставкиСообщения(ТипСообщения, ИдентификаторСообщения, СтатусДоставки, ТекстОшибкиДоставки, ТекстДиалога = неопределено, ФайлОтветов = неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ЖурналСобытий.Партнер КАК Партнер,
	|	табАид_ЖурналСобытий.ДатаВремяСобытия КАК ДатаВремяСобытия,
	|	табАид_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	табАид_ЖурналСобытий.УникальныйКлючЗаписи КАК УникальныйКлючЗаписи,
	|	табАид_ЖурналСобытий.ТипСообщения КАК ТипСообщения,
	|	табАид_ЖурналСобытий.КонтактноеЛицо КАК КонтактноеЛицо,
	|	табАид_ЖурналСобытий.Телефон КАК Телефон,
	|	табАид_ЖурналСобытий.Почта КАК Почта,
	|	табАид_ЖурналСобытий.СтатусСобытия КАК СтатусСобытия,
	|	табАид_ЖурналСобытий.ТекстСообщения КАК ТекстСообщения,
	|	табАид_ЖурналСобытий.ТекстОшибки КАК ТекстОшибки,
	|	табАид_ЖурналСобытий.СтатусДоставки КАК СтатусДоставки,
	|	табАид_ЖурналСобытий.ТекстОшибкиДоставки КАК ТекстОшибкиДоставки,
	|	табАид_ЖурналСобытий.ТекстДиалога КАК ТекстДиалога,
	|	табАид_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	табАид_ЖурналСобытий.КлючПравила КАК КлючПравила,
	|	табАид_ЖурналСобытий.РасчетныйДокумент КАК РасчетныйДокумент,
	|	табАид_ЖурналСобытий.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	табАид_ЖурналСобытий.ТипСообщения = &ТипСообщения
	|	И табАид_ЖурналСобытий.УникальныйКлючЗаписи = &УникальныйКлючЗаписи";
	
	Запрос.УстановитьПараметр("ТипСообщения", ТипСообщения);
	Запрос.УстановитьПараметр("УникальныйКлючЗаписи", ИдентификаторСообщения);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	//Нас интересует только одна запись.
	//Иначе - ошибка записи.
	Если Результат.Количество() = 1 Тогда
		ЗаписьСобытия = РегистрыСведений.табАид_ЖурналСобытий.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьСобытия, Результат[0]);
		ЗаписьСобытия.СтатусДоставки = СтатусДоставки;
		ЗаписьСобытия.ТекстОшибкиДоставки = ТекстОшибкиДоставки;
		Если ТекстДиалога <> неопределено Тогда
			ЗаписьСобытия.ТекстДиалога = ТекстДиалога;
		КонецЕсли;
		
		Если ФайлОтветов <> неопределено Тогда
			ЗаписьСобытия.АдресФайла = ФайлОтветов;
		КонецЕсли;
		
		Попытка 
			ЗаписьСобытия.Записать(Истина);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление статуса доставки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
		КонецПопытки;
	ИначеЕсли Результат.Количество() > 1 Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru = 'Не удалось обновить статус доставки сообщения (тип: ""%1"", id: ""%2""):
		|по id сообщения найдено несколько записей в журнале событий!'"), ТипСообщения, ИдентификаторСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление статуса доставки'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// отправляет письмо на внутренний ящик
Функция ПолучитьПомощь(Текст, Тема) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо), ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо.Наименование, ПараметрыСеанса.ТекущийПользователь.Наименование);
	
	ТекстСообщения = "<em>Проект ""Автоматизация информирования дебиторов (ТАБ АИД)""" + "<br>" + "Сообщение для технической поддержки ТЕХНОЛОГИИ И БИЗНЕС" + "<br>" + 
	"Лид клиента:" + "<br>" + "id:" + "</em><br>" + "<br>Текст обращения: <br>" 
	+ СтрЗаменить(Текст, Символы.ПС, "<br>") + "<br><br>Контактное лицо: " + Пользователь;
	
	ОтправитьПисьмо("ods@tab-is.ru", "dgB8G5WgPlaA1", 
	"465", "smtp.yandex.ru", "aid.support@tab-is.ru", 
	"CRM", ТекстСообщения, 
	Тема, "");
	
КонецФункции

Функция ОтправитьПисьмо(EmailОтправителя, ПарольОтправителя, 
	Порт, АдресСервера, EmailПолучателя, 
	ИмяПолучателя, ТекстСообщения, 
	ЗаголовокСообщения, МассивФайловыхПутей)
	
	//ПОЧТОВЫЙ ПРОФИЛЬ
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.ИспользоватьSSLSMTP = истина;
	Профиль.АдресСервераSMTP = АдресСервера; 
	Профиль.ПортSMTP = Порт;
	Профиль.Пользователь = EmailОтправителя;
	Профиль.Пароль = ПарольОтправителя;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.ПарольSMTP = ПарольОтправителя;
	Профиль.ПользовательSMTP = EmailОтправителя; 
	
	//ПОЧТОВОЕ СООБЩЕНИЕ
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Отправитель = EmailОтправителя;
	Сообщение.Тема = ЗаголовокСообщения;
	Сообщение.Тексты.Добавить(ТекстСообщения, ТипТекстаПочтовогоСообщения.HTML);
	Сообщение.Организация = "The company";		
	Адрес = Сообщение.Получатели.Добавить(EmailПолучателя);
	Адрес.ОтображаемоеИмя = ИмяПолучателя;
	
	// ПОЧТОВЫЙ СЕРВЕР
	
	Почта = Новый ИнтернетПочта();
	
	//Подключение к серверу
	Попытка
		Почта.Подключиться(Профиль);
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при отправке запроса. Позвоните на номер 8 (499) 647-43-06";
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	//Отправка письма
	Попытка
		Почта.Послать(Сообщение);
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Письмо успешно отправлено";
		СообщениеПользователю.Сообщить();
	Исключение
		Почта.Отключиться();      
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = "Ошибка при отправке запроса. Позвоните на номер 8 (499) 647-43-06";
		СообщениеПользователю.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	Почта.Отключиться();
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДатуАктуальностиДЗ() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ДатаАктуальностиДЗ.ДатаАктуальностиДЗ КАК ДатаАктуальностиДЗ
	|ИЗ
	|	РегистрСведений.табАид_ДатаАктуальностиДЗ КАК табАид_ДатаАктуальностиДЗ
	|ГДЕ
	|	табАид_ДатаАктуальностиДЗ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаАктуальностиДЗ;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Дата(1, 1, 1);
	
КонецФункции

Функция ПолучитьОрганизацииДЗ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивОрганизаций = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ИСТИНА)
	|ГДЕ
	|	табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	табАид_Настройки.Организация
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	НЕ табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|";
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаРез из Результат Цикл
		МассивОрганизаций.Добавить(СтрокаРез.Организация);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивОрганизаций;
	
КонецФункции

Функция ПолучитьСписокЧасовыхПоясов() Экспорт
	
	СписокЧП = Новый СписокЗначений;
	СписокЧП.Добавить("GMT+2", "UTC+2:00 (MSK-1)");    
	СписокЧП.Добавить("GMT+3", "UTC+3:00 (MSK)");     
	СписокЧП.Добавить("GMT+4", "UTC+4:00 (MSK+1)");
	СписокЧП.Добавить("GMT+5", "UTC+5:00 (MSK+2)");
	СписокЧП.Добавить("GMT+6", "UTC+6:00 (MSK+3)");
	СписокЧП.Добавить("GMT+7", "UTC+7:00 (MSK+4)");
	СписокЧП.Добавить("GMT+8", "UTC+8:00 (MSK+5)");
	СписокЧП.Добавить("GMT+9", "UTC+9:00 (MSK+6)");
	СписокЧП.Добавить("GMT+10", "UTC+10:00 (MSK+10)");
	СписокЧП.Добавить("GMT+11", "UTC+11:00 (MSK+11)");
	СписокЧП.Добавить("GMT+12", "UTC+12:00 (MSK+12)");
	
	Возврат СписокЧП; 
	
КонецФункции

Функция ПолучитьНастройкуЗадолженности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	табАид_Настройки.ВключатьЗадолженность КАК ВключатьЗадолженность
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ВключатьЗадолженность;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура УдалениеСпискаСообщенийТАБАИД(Результат) Экспорт 
	Для каждого Стр Из Результат Цикл
		Рег = РегистрыСведений.табАид_СписокСообщений.СоздатьНаборЗаписей();
		Рег.Отбор.КлючПравила.Установить(Стр.КлючПравила);
		рег.Прочитать();
		рег.Очистить();
		рег.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура УдалениеПравилФормированияСобытийТАБАИД(Результат) Экспорт 
	Для каждого Стр Из Результат Цикл
		Рег = РегистрыСведений.табАид_ПравилаФормированияСобытий.СоздатьНаборЗаписей();
		Рег.Отбор.КлючПравила.Установить(Стр.КлючПравила);
		рег.Прочитать();
		рег.Очистить();
		рег.Записать();
	КонецЦикла;	
КонецПроцедуры
