
&Вместо("ВидыШаблонов")
Функция табАид_ВидыШаблонов()
	ТипыШаблонов = Новый СписокЗначений;
	ТипыШаблонов.Добавить("Email", НСтр("ru = 'Электронного письма'"));
	ТипыШаблонов.Добавить("SMS", НСтр("ru = 'Сообщения SMS'"));
	//+табАид
	ТипыШаблонов.Добавить("ГолосовоеСообщение", НСтр("ru = 'Голосовое сообщение'"));
	//-табАид
	Возврат ТипыШаблонов;
КонецФункции

&Вместо("ОпределитьПредметыШаблонов")
Функция табАид_ОпределитьПредметыШаблонов()
	ИмяМакетаШаблонаПоУмолчанию = "табАид_ДанныеШаблонаСообщений";
	
	ОснованияДляШаблоновСообщений = Новый ТаблицаЗначений;
	ОснованияДляШаблоновСообщений.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ОснованияДляШаблоновСообщений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ОснованияДляШаблоновСообщений.Колонки.Добавить("Макет", Новый ОписаниеТипов("Строка"));
	ОснованияДляШаблоновСообщений.Колонки.Добавить("ЗначенияПараметровСКД", Новый ОписаниеТипов("Структура"));
	
	ТипыПредметовШаблоновСообщений = Метаданные.ОпределяемыеТипы.ПредметШаблонаСообщения.Тип.Типы();
	Для каждого ТипПредметаШаблонаСообщения Из ТипыПредметовШаблоновСообщений Цикл
		Если ТипПредметаШаблонаСообщения <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			Назначение = ОснованияДляШаблоновСообщений.Добавить();
			МетаданныеОбъект = Метаданные.НайтиПоТипу(ТипПредметаШаблонаСообщения);
			Назначение.Имя = МетаданныеОбъект.ПолноеИмя();
			Назначение.Представление = МетаданныеОбъект.Представление();
			Если МетаданныеОбъект.Макеты.Найти(ИмяМакетаШаблонаПоУмолчанию) <> Неопределено Тогда
				Назначение.Макет = ИмяМакетаШаблонаПоУмолчанию;
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Назначение.Имя);
				МакетСКД = МенеджерОбъекта.ПолучитьМакет(ИмяМакетаШаблонаПоУмолчанию);
				АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД);
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
				Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
					ИмяПараметра = Строка(ДоступныйПараметр.Параметр);
					Если НЕ (СтрСравнить(ИмяПараметра , "Период") = 0 
						ИЛИ СтрСравнить(ИмяПараметра, МетаданныеОбъект.Имя) = 0) Тогда
						Назначение.ЗначенияПараметровСКД.Вставить(ИмяПараметра, NULL);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//+табАид
	ТипРНРасчетыСКлиентами = Тип("РегистрНакопленияМенеджер.РасчетыСКлиентами");
	Назначение = ОснованияДляШаблоновСообщений.Добавить();
	МетаданныеОбъект = Метаданные.НайтиПоТипу(ТипРНРасчетыСКлиентами);
	Назначение.Имя = МетаданныеОбъект.ПолноеИмя();
	Назначение.Представление = МетаданныеОбъект.Представление();
	Если МетаданныеОбъект.Макеты.Найти(ИмяМакетаШаблонаПоУмолчанию) <> Неопределено Тогда
		Назначение.Макет = ИмяМакетаШаблонаПоУмолчанию;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Назначение.Имя);
		МакетСКД = МенеджерОбъекта.ПолучитьМакет(ИмяМакетаШаблонаПоУмолчанию);
		АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
			ИмяПараметра = Строка(ДоступныйПараметр.Параметр);
			Если НЕ (СтрСравнить(ИмяПараметра , "Период") = 0 
				ИЛИ СтрСравнить(ИмяПараметра, МетаданныеОбъект.Имя) = 0) Тогда
				Назначение.ЗначенияПараметровСКД.Вставить(ИмяПараметра, NULL);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТипТАБАИДОбработка = Тип("ОбработкаМенеджер.табАид_ВиртуальныйМенеджер");
	Назначение = ОснованияДляШаблоновСообщений.Добавить();
	МетаданныеОбъект = Метаданные.НайтиПоТипу(ТипТАБАИДОбработка);
	Назначение.Имя = МетаданныеОбъект.ПолноеИмя();
	Назначение.Представление = "ТАБ АИД";   
	Если МетаданныеОбъект.Макеты.Найти(ИмяМакетаШаблонаПоУмолчанию) <> Неопределено Тогда
		Назначение.Макет = ИмяМакетаШаблонаПоУмолчанию;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Назначение.Имя);
		МакетСКД = МенеджерОбъекта.ПолучитьМакет(ИмяМакетаШаблонаПоУмолчанию);
		АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД);
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
			ИмяПараметра = Строка(ДоступныйПараметр.Параметр);
			Если НЕ (СтрСравнить(ИмяПараметра , "Период") = 0 
				ИЛИ СтрСравнить(ИмяПараметра, МетаданныеОбъект.Имя) = 0) Тогда
				Назначение.ЗначенияПараметровСКД.Вставить(ИмяПараметра, NULL);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-табАид
	
	Возврат ОснованияДляШаблоновСообщений;
	
КонецФункции

&Вместо("ПараметрыШаблона")
Функция табАид_ПараметрыШаблона(Шаблон)
	
	Результат = ШаблоныСообщенийКлиентСервер.ОписаниеПараметровШаблона();
	
	Если ТипЗнч(Шаблон) = Тип("ДанныеФормыСтруктура") Тогда
		//+табАид
		Если Шаблон.табАид_ПредназначенДляГолосовогоСообщения тогда
			Результат.ТипШаблона              = "ГолосовоеСообщение";	
		иначе
			//-табАид	
			Результат.ТипШаблона                  = ?(Шаблон.ПредназначенДляSMS, "SMS", "Письмо");
		КонецЕсли;
		Результат.Тема                        = Шаблон.ТемаПисьма;
		
		Если Шаблон.ПредназначенДляВводаНаОсновании Тогда
			Результат.ПолноеИмяТипаНазначения  = Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании;
			Результат.Назначение               = Шаблон.Назначение;
		КонецЕсли;
		Результат.ФорматПисьма                 = Шаблон.ТипТекстаПисьма;
		Результат.УпаковатьВАрхив              = Шаблон.УпаковатьВАрхив;
		Результат.ПеревестиВТранслит           = Шаблон.ОтправлятьВТранслите;
		Результат.Отправитель                  = Шаблон.Отправитель;
		
		//+табАид
		Если Результат.ТипШаблона = "SMS" или Результат.ТипШаблона = "ГолосовоеСообщение" Тогда
			//-табАид	
			Результат.Текст                    = Шаблон.ТекстШаблонаSMS;
		ИначеЕсли Шаблон.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
			Результат.Текст                    = Шаблон.ТекстШаблонаПисьмаHTML;
		Иначе
			Результат.Текст                    = Шаблон.ТекстШаблонаПисьма;
		КонецЕсли;
		Результат.ТранслитерироватьИменаФайлов = Шаблон.ТранслитерироватьИменаФайлов;
		Результат.ПодписьИПечать               = Шаблон.ПодписьИПечать;
		
		ЗаполнитьЗначенияСвойств(Результат, Шаблон,, "Параметры");
		
		Для каждого ПечатныеФормыИВложения Из Шаблон.ПечатныеФормыИВложения Цикл
			Результат.ВыбранныеВложения.Вставить(ПечатныеФормыИВложения.Идентификатор, ПечатныеФормыИВложения.Имя);
		КонецЦикла;
		
		Для каждого СтрокаПараметр Из Шаблон.Параметры Цикл
			Результат.Параметры.Вставить(СтрокаПараметр.ИмяПараметра, Новый Структура("ОписаниеТипа, Представление", СтрокаПараметр.ОписаниеТипа, СтрокаПараметр.ПредставлениеПараметра));
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныСообщений") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныСообщений.ПредназначенДляВводаНаОсновании,
		|	ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании,
		|	ШаблоныСообщений.Назначение,
		|	ШаблоныСообщений.Наименование,
		|	ШаблоныСообщений.ПредназначенДляЭлектронныхПисем,
		|	ШаблоныСообщений.ТипТекстаПисьма,
		|	ВЫБОР
		|		КОГДА ШаблоныСообщений.ПредназначенДляЭлектронныхПисем
		|			ТОГДА ВЫБОР
		|					КОГДА ШаблоныСообщений.ТипТекстаПисьма = ЗНАЧЕНИЕ(Перечисление.СпособыРедактированияЭлектронныхПисем.HTML)
		|						ТОГДА ШаблоныСообщений.ТекстШаблонаПисьмаHTML
		|					ИНАЧЕ ШаблоныСообщений.ТекстШаблонаПисьма
		|				КОНЕЦ
		|		ИНАЧЕ ШаблоныСообщений.ТекстШаблонаSMS
		|	КОНЕЦ КАК ТекстШаблона,
		|	ШаблоныСообщений.ТемаПисьма,
		|	ШаблоныСообщений.УпаковатьВАрхив,
		|	ШаблоныСообщений.ТранслитерироватьИменаФайлов,
		|	ШаблоныСообщений.ФорматВложений,
		|	ШаблоныСообщений.ПредназначенДляSMS,
		//+табАид
		|	ШаблоныСообщений.табАид_ПредназначенДляГолосовогоСообщения,
		//-табАид
		|	ШаблоныСообщений.ОтправлятьВТранслите,
		|	ШаблоныСообщений.ПодписьИПечать,
		|	ШаблоныСообщений.ШаблонПоВнешнейОбработке,
		|	ШаблоныСообщений.ВнешняяОбработка,
		|	ШаблоныСообщений.Ссылка,
		|	ШаблоныСообщений.ВладелецШаблона
		|ИЗ
		|	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
		|ГДЕ
		|	ШаблоныСообщений.Ссылка = &Шаблон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблоныСообщенийПечатныеФормыИВложения.Идентификатор,
		|	ШаблоныСообщенийПечатныеФормыИВложения.Имя
		|ИЗ
		|	Справочник.ШаблоныСообщений.ПечатныеФормыИВложения КАК ШаблоныСообщенийПечатныеФормыИВложения
		|ГДЕ
		|	ШаблоныСообщенийПечатныеФормыИВложения.Ссылка = &Шаблон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШаблоныСообщенийПараметры.ПредставлениеПараметра,
		|	ШаблоныСообщенийПараметры.ТипПараметра,
		|	ШаблоныСообщенийПараметры.ИмяПараметра
		|ИЗ
		|	Справочник.ШаблоныСообщений.Параметры КАК ШаблоныСообщенийПараметры
		|ГДЕ
		|	ШаблоныСообщенийПараметры.Ссылка = &Шаблон";
		
		Запрос.УстановитьПараметр("Шаблон", Шаблон);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		СведенияОШаблоне = РезультатЗапроса[0].Выгрузить();
		
		Если СведенияОШаблоне.Количество() > 0 Тогда
			
			СтрокаСведенийОШаблоне = СведенияОШаблоне[0];
			Для каждого ВыбраннаяПечатнаяФорма Из РезультатЗапроса[1].Выгрузить() Цикл
				Результат.ВыбранныеВложения.Вставить(ВыбраннаяПечатнаяФорма.Идентификатор, ВыбраннаяПечатнаяФорма.Имя);
			КонецЦикла;
			Результат.Текст                      = СтрокаСведенийОШаблоне.ТекстШаблона;
			//+табАид
			Если СтрокаСведенийОШаблоне.табАид_ПредназначенДляГолосовогоСообщения тогда
				Результат.ТипШаблона             = "ГолосовоеСообщение";	
			иначе
				//-табАид
				Результат.ТипШаблона             = ?(СтрокаСведенийОШаблоне.ПредназначенДляSMS, "SMS", "Письмо");
			КонецЕсли; 
			//+табАид
			
			Если СтрокаСведенийОШаблоне.ПредназначенДляВводаНаОсновании Тогда
				Результат.Назначение              = СтрокаСведенийОШаблоне.Назначение;
				Результат.ПолноеИмяТипаНазначения = СтрокаСведенийОШаблоне.ПолноеИмяТипаПараметраВводаНаОсновании;
			КонецЕсли;
			Результат.ФорматПисьма                = СтрокаСведенийОШаблоне.ТипТекстаПисьма;
			
			//+табАид
			Если Результат.ТипШаблона = "SMS" или Результат.ТипШаблона = "ГолосовоеСообщение" Тогда
				//-табАид	
				Результат.ПеревестиВТранслит      = СтрокаСведенийОШаблоне.ОтправлятьВТранслите;
			Иначе
				Результат.Тема                    = СтрокаСведенийОШаблоне.ТемаПисьма;
				Результат.УпаковатьВАрхив         = СтрокаСведенийОШаблоне.УпаковатьВАрхив;
				Результат.ФорматПисьма            = СтрокаСведенийОШаблоне.ТипТекстаПисьма;
				Результат.ПодписьИПечать          = СтрокаСведенийОШаблоне.ПодписьИПечать;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Результат, СтрокаСведенийОШаблоне);
			Результат.ФорматыВложений             = СтрокаСведенийОШаблоне.ФорматВложений.Получить();
			
			Для каждого СтрокаПараметр Из РезультатЗапроса[2].Выгрузить() Цикл
				Результат.Параметры.Вставить(СтрокаПараметр.ИмяПараметра, Новый Структура("ОписаниеТипа, Представление", СтрокаПараметр.ТипПараметра.Получить(), СтрокаПараметр.ПредставлениеПараметра));
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ПолноеИмяТипаНазначения) 
		И НЕ ОбъектЯвляетсяПредметомШаблона(Результат.ПолноеИмяТипаНазначения) Тогда
		// Объект не входит в список предметов шаблона, поэтому шаблон может быть только общим.
		Результат.ПолноеИмяТипаНазначения = "";
		Результат.Назначение              = "";
	КонецЕсли;
	
	НастройкиШаблоновСообщений = ШаблоныСообщенийСлужебныйПовтИсп.ПриОпределенииНастроек();
	Результат.Вставить("РасширенныйСписокПолучателей", НастройкиШаблоновСообщений.РасширенныйСписокПолучателей);
	СведенияОПредмете = НастройкиШаблоновСообщений.ПредметыШаблонов.Найти(Результат.ПолноеИмяТипаНазначения, "Имя");
	Если СведенияОПредмете <> Неопределено Тогда
		Результат.Макет = СведенияОПредмете.Макет;
		Результат.ПараметрыСКД = СведенияОПредмете.ЗначенияПараметровСКД;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&Вместо("СформироватьСообщение")
Функция табАид_СформироватьСообщение(ПараметрыОтправки)
	
	Если ПараметрыОтправки.Шаблон = Справочники.ШаблоныСообщений.ПустаяСсылка() Тогда
		Возврат СообщениеБезШаблона(ПараметрыОтправки);
	КонецЕсли;
	
	ПараметрыШаблона = ПараметрыШаблона(ПараметрыОтправки.Шаблон);
	Если ПараметрыОтправки.ДополнительныеПараметры.Свойство("ПараметрыСообщения") Тогда
		ПараметрыШаблона.ПараметрыСообщения = ПараметрыОтправки.ДополнительныеПараметры.ПараметрыСообщения;
	КонецЕсли;
	
	Если ПараметрыОтправки.Шаблон = Неопределено Тогда
		Если ПараметрыОтправки.Свойство("ДополнительныеПараметры")
			И ПараметрыОтправки.ДополнительныеПараметры.Свойство("ВидСообщения") Тогда
			ПараметрыШаблона.ТипШаблона = ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения;
		КонецЕсли;
	Иначе
		Если Не ПараметрыОтправки.ДополнительныеПараметры.Свойство("ВидСообщения") 
			Или Не ЗначениеЗаполнено(ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения) Тогда
			Если ПараметрыОтправки.Шаблон.ПредназначенДляSMS Тогда
				ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", "СообщениеSMS");
				//+табАид
			ИначеЕсли ПараметрыОтправки.Шаблон.табАид_ПредназначенДляГолосовогоСообщения Тогда
				ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", "ГолосовоеСообщение");
				//-табАид
			Иначе
				ПараметрыОтправки.ДополнительныеПараметры.Вставить("ВидСообщения", "ЭлектроннаяПочта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерОбъекта = Неопределено;
	СведенияОШаблоне = Неопределено;
	Если ПараметрыОтправки.Предмет <> Неопределено Тогда
		СведенияОШаблоне = СведенияОШаблоне(ПараметрыШаблона);
		ПараметрыШаблона.Вставить("Предмет", ПараметрыОтправки.Предмет);
		//+табАид
	ИначеЕсли ПараметрыОтправки.Шаблон.ПолноеИмяТипаПараметраВводаНаОсновании = "Обработка.табАид_ВиртуальныйМенеджер" Тогда
		СведенияОШаблоне = СведенияОШаблоне(ПараметрыШаблона);
		//-табАид 
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыШаблона.ПолноеИмяТипаНазначения) Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПараметрыШаблона.ПолноеИмяТипаНазначения);
		Если МетаданныеОбъекта <> Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыШаблона.ПолноеИмяТипаНазначения);
		КонецЕсли;
	КонецЕсли;
	
	СформированноеСообщение = КонструкторСообщения(ПараметрыШаблона);
	
	Если ПараметрыШаблона = Неопределено Тогда
		Возврат СформированноеСообщение;
	КонецЕсли;
	
	Если ПараметрыШаблона.ШаблонПоВнешнейОбработке Тогда
		Возврат СформироватьСообщениеВнешнейОбработкой(ПараметрыШаблона, СведенияОШаблоне, ПараметрыОтправки);
	КонецЕсли;
	
	// Извлекаем из шаблона параметры
	ПараметрыТекстаСообщения = ПараметрыИзТекстаСообщения(ПараметрыШаблона);
	
	// Заполняем параметры
	Сообщение = ЗаполнитьПараметрыСообщения(ПараметрыШаблона, ПараметрыТекстаСообщения, ПараметрыОтправки);
	Сообщение.ДополнительныеПараметры = ПараметрыОтправки.ДополнительныеПараметры;
	
	// Вложения
	Если ПараметрыШаблона.ТипШаблона = "Письмо" И СведенияОШаблоне <> Неопределено Тогда
		ДобавитьВыбранныеПечатныеФормыВоВложения(ПараметрыОтправки, СведенияОШаблоне, Сообщение.Вложения, ПараметрыШаблона);
	КонецЕсли;
	ДобавитьПрисоединенныеФайлыВоВложения(ПараметрыОтправки, Сообщение);
	
	ШаблоныСообщенийПереопределяемый.ПриФормированииСообщения(Сообщение, ПараметрыШаблона.ПолноеИмяТипаНазначения, ПараметрыОтправки.Предмет, ПараметрыШаблона);
	Если МенеджерОбъекта <> Неопределено Тогда
		ПараметрыШаблона.Вставить("Валюта",ПараметрыОтправки.Валюта);
		МенеджерОбъекта.ПриФормированииСообщения(Сообщение, ПараметрыОтправки.Предмет, ПараметрыШаблона);
	КонецЕсли;
	
	// Заполнение значений параметров
	СообщениеРезультат = УстановитьЗначенияРеквизитовВТекстСообщения(ПараметрыШаблона, ПараметрыТекстаСообщения, ПараметрыОтправки.Предмет);
	
	//+табАид
	Если ПараметрыОтправки.Предмет = Неопределено и ПараметрыШаблона.ТипШаблона = "ГолосовоеСообщение" тогда
		СформированноеСообщение.ДополнительныеПараметры.Вставить("ТаблицаДляСообщений", ПараметрыТекстаСообщения.Получить("табАид_ТаблицаДанных"));	
	КонецЕсли;
	//-табАид
	
	СформированноеСообщение.Тема = СообщениеРезультат.Тема;
	СформированноеСообщение.Текст = СообщениеРезультат.Текст;
	
	Для каждого Вложение Из Сообщение.Вложения Цикл
		НовоеВложение = СформированноеСообщение.Вложения.Добавить();
		Если ПараметрыШаблона.ТранслитерироватьИменаФайлов Тогда
			НовоеВложение.Представление = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Вложение.Ключ);
		Иначе
			НовоеВложение.Представление = Вложение.Ключ;
		КонецЕсли;
		НовоеВложение.АдресВоВременномХранилище = Вложение.Значение;
	КонецЦикла;
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо" И ПараметрыШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ОбработатьHTMLДляФорматированногоДокумента(ПараметрыОтправки, СформированноеСообщение, ПараметрыОтправки.ДополнительныеПараметры.ПреобразовыватьHTMLДляФорматированногоДокумента);
	КонецЕсли;
	
	ЗаполнитьПолучателейСообщения(ПараметрыОтправки, ПараметрыШаблона, СформированноеСообщение, МенеджерОбъекта);
	СформированноеСообщение.СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	
	Возврат СформированноеСообщение;
	
КонецФункции

&Вместо("ПараметрыИзТекстаСообщения")
Функция табАид_ПараметрыИзТекстаСообщения(ПараметрыШаблона)
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо" Тогда
		лпТекст = СтрЗаменить(ПараметрыШаблона.Текст,"~Свойство.","");
		лпТекст = СтрЗаменить(лпТекст,"~КИ.","");
		Возврат ОпределитьПараметрыТекстаСообщения(лпТекст + " " + ПараметрыШаблона.Тема);
		//+табАид	
	ИначеЕсли ПараметрыШаблона.ТипШаблона = "SMS" или ПараметрыШаблона.ТипШаблона = "ГолосовоеСообщение" Тогда
		лпТекст = СтрЗаменить(ПараметрыШаблона.Текст,"~Свойство.","");
		лпТекст = СтрЗаменить(лпТекст,"~КИ.","");
		//-табАид
		Возврат ОпределитьПараметрыТекстаСообщения(лпТекст);
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

&Вместо("ЗаполнитьПараметрыСообщения")
Функция табАид_ЗаполнитьПараметрыСообщения(ПараметрыШаблона, ПараметрыТекстаСообщения, ПараметрыОтправки)
	
	Предмет = ПараметрыОтправки.Предмет;
	Сообщение = Новый Структура("ЗначенияРеквизитов, ЗначенияОбщихРеквизитов, Вложения, ДополнительныеПараметры");
	Сообщение.Вложения = Новый Соответствие;
	Сообщение.ЗначенияОбщихРеквизитов = Новый Соответствие;
	Сообщение.ЗначенияРеквизитов = Новый Соответствие;
	ИмяОбъекта = "";
	
	Если Предмет <> Неопределено 
		И ЗначениеЗаполнено(ПараметрыШаблона.ПолноеИмяТипаНазначения) Тогда
		ПредметМетаданные = Предмет.Метаданные(); 
		ИмяОбъекта = ПредметМетаданные.Имя;
		
		Если ПараметрыТекстаСообщения[ИмяОбъекта] <> Неопределено Тогда
			ЗаполнитьЗначенияРеквизитовПоПараметрам(Сообщение, ПараметрыТекстаСообщения[ИмяОбъекта], ПараметрыШаблона, Предмет);
		Иначе
			Сообщение.ЗначенияРеквизитов = ?(ПараметрыТекстаСообщения[ПараметрыШаблона.ПолноеИмяТипаНазначения] <> Неопределено,
			ПараметрыТекстаСообщения[ПараметрыШаблона.ПолноеИмяТипаНазначения], Новый Соответствие);
		КонецЕсли;
		//+табАид
	ИначеЕсли Предмет = Неопределено тогда
		ЗаполнитьЗначенияРеквизитовПоПараметрам(Сообщение, ПараметрыТекстаСообщения, ПараметрыШаблона, Предмет);	
		//-табАид
	КонецЕсли;
	
	Если ПараметрыОтправки.ДополнительныеПараметры.Свойство("ПроизвольныеПараметры") Тогда
		Для каждого ПроизвольныйПараметрШаблона Из ПараметрыТекстаСообщения Цикл
			
			КлючПараметра = ПроизвольныйПараметрШаблона.Ключ;
			Если СтрСравнить(КлючПараметра, ИмяОбъекта) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючПараметра = ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров() Тогда
				ПроизвольныеРеквизиты = ПараметрыТекстаСообщения[ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()];
				Если ТипЗнч(ПроизвольныеРеквизиты ) = Тип("Соответствие") Тогда
					Для Каждого ПроизвольныйРеквизит Из ПроизвольныеРеквизиты Цикл
						ОписаниеПараметра = ИмяПараметраБезСтрокиФормата(ПроизвольныйРеквизит.Ключ);
						Если ПустаяСтрока(ОписаниеПараметра.Формат) Тогда
							ПроизвольныеРеквизиты[ПроизвольныйРеквизит.Ключ] = ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры[ПроизвольныйРеквизит.Ключ];
						Иначе
							ПроизвольныеРеквизиты[ПроизвольныйРеквизит.Ключ] = 
							Формат(ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры[ОписаниеПараметра.Имя], ОписаниеПараметра.Формат);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если КлючПараметра = ШаблоныСообщений.ИмяУзлаОбщихРеквизитов() Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеПроизвольногоПараметра =  ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры[КлючПараметра];
			Если ЗначениеПроизвольногоПараметра <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(ЗначениеПроизвольногоПараметра) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеПроизвольногоПараметра) = Тип("Строка")
					Или ТипЗнч(ЗначениеПроизвольногоПараметра) = Тип("Дата") Тогда
					ПроизвольныеРеквизиты = ПараметрыТекстаСообщения[ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()];
					Если ТипЗнч(ПроизвольныеРеквизиты ) = Тип("Соответствие") Тогда
						ПараметрыТекстаСообщения[ШаблоныСообщенийКлиентСервер.ЗаголовокПроизвольныхПараметров()][КлючПараметра] = ЗначениеПроизвольногоПараметра;
					КонецЕсли;
				Иначе
					ЗначениеПроизвольногоПараметраМетаданные = ЗначениеПроизвольногоПараметра.Метаданные(); 
					ИмяОбъекта = ЗначениеПроизвольногоПараметраМетаданные.Имя;
					Если ПараметрыТекстаСообщения[ИмяОбъекта] <> Неопределено Тогда
						ЗаполнитьРеквизитыПоПредмету(ПараметрыТекстаСообщения[ИмяОбъекта], ЗначениеПроизвольногоПараметра);
						ЗаполнитьРеквизитыСвойствИКонтактнойИнформации(ПараметрыТекстаСообщения[ИмяОбъекта], ЗначениеПроизвольногоПараметра);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры.Вставить(КлючПараметра, ПроизвольныйПараметрШаблона.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыТекстаСообщения[ШаблоныСообщений.ИмяУзлаОбщихРеквизитов()] <> Неопределено Тогда
		ЗаполнитьОбщиеРеквизиты(ПараметрыТекстаСообщения[ШаблоныСообщений.ИмяУзлаОбщихРеквизитов()]);
		Сообщение.ЗначенияОбщихРеквизитов = ПараметрыТекстаСообщения[ШаблоныСообщений.ИмяУзлаОбщихРеквизитов()];
	КонецЕсли;
	
	Возврат Сообщение;
	
КонецФункции
&Вместо("ЗаполнитьРеквизитыПоСКД")
Процедура табАид_ЗаполнитьРеквизитыПоСКД(Реквизиты, Предмет, ПараметрыШаблона)
	
	ИмяМакета = ПараметрыШаблона.Макет;
	
	ПараметрыЗапроса = Новый Массив;
	//+табАид
	Если Предмет = Неопределено тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыШаблона.ПолноеИмяТипаНазначения);
		ЧастиИмени      = СтрРазделить(ПараметрыШаблона.ПолноеИмяТипаНазначения, ".");
		Если ЧастиИмени.Количество() >= 2 Тогда
			КлассОМ = ЧастиИмени[0];
			ИмяОМ   = ЧастиИмени[1];
		КонецЕсли;
	иначе
		//-табАид	
		МетаданныеОбъекта = Предмет.Метаданные();
		ИмяОбъекта = МетаданныеОбъекта.Имя;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	КонецЕсли;
	
	МакетСКД = МенеджерОбъекта.ПолучитьМакет(ИмяМакета);
	
	АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Если СтрСравнить(ДоступныйПараметр.Заголовок, "Период") <> 0 Тогда
			ПараметрыЗапроса.Добавить(Строка(ДоступныйПараметр.Параметр));
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	Для Каждого Реквизит Из Реквизиты Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Реквизит.Ключ);
	КонецЦикла;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МакетСКД, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//+табАид
	Если МакетКомпоновкиДанных.НаборыДанных.Количество() = 0 
		И МакетСКД.НаборыДанных.Найти("НаборДанных1") <> неопределено тогда
		
		ТекстЗапросаМакет = МакетСКД.НаборыДанных.НаборДанных1.Запрос;
	ИначеЕсли МакетКомпоновкиДанных.НаборыДанных.Количество() = 0 
		И МакетСКД.НаборыДанных.Найти("Данные") <> неопределено тогда
		
		ТекстЗапросаМакет = МакетСКД.НаборыДанных.Данные.Запрос;
	иначе	
		//-табАид	
		ТекстЗапросаМакет = МакетКомпоновкиДанных.НаборыДанных.Данные.Запрос;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаМакет;
	
	ЕстьНезаполненныйПараметр = Ложь;
	Для каждого ТребуемыйПараметр Из ПараметрыЗапроса Цикл
		Если СтрСравнить(ТребуемыйПараметр, "ТекущаяДата") = 0 Тогда
			Запрос.УстановитьПараметр(ТребуемыйПараметр, ТекущаяДатаСеанса());
			//+табАид
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "Период") = 0 Тогда
			Запрос.УстановитьПараметр(ТребуемыйПараметр, ТекущаяДатаСеанса());
			//-табАид
			
			//ТабАид Руслан<
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "ДанныеОтчета") = 0 Тогда
		
			ДанныеОтчета = ПустаяСтрока(0);
			Запрос.УстановитьПараметр(ТребуемыйПараметр,ДанныеОтчета);	
			
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "Валюта") = 0 Тогда
		
			Запрос.УстановитьПараметр(ТребуемыйПараметр,Константы.ВалютаРегламентированногоУчета.Получить());	
			
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "ВсеДолги") = 0 Тогда
		    ВсеДолги = Истина;
			Запрос.УстановитьПараметр(ТребуемыйПараметр,ВсеДолги);				
			
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "Календарь") = 0 Тогда
		    Календарь = КалендарныеГрафики;
			Запрос.УстановитьПараметр(ТребуемыйПараметр,Календарь);		
			
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "ВариантКлассификации") = 0 Тогда
		    ВариантКлассификации = Истина;
			Запрос.УстановитьПараметр(ТребуемыйПараметр,ВариантКлассификации);	
			
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "СтрокаДолгНеПросрочен") = 0 Тогда
		    СтрокаДолгНеПросрочен = Истина;
			Запрос.УстановитьПараметр(ТребуемыйПараметр,СтрокаДолгНеПросрочен);	
			
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, "ИспользуетсяОтборПоСегментуПартнеров") = 0 Тогда
		    ИспользуетсяОтборПоСегментуПартнеров = Истина;
			Запрос.УстановитьПараметр(ТребуемыйПараметр,ИспользуетсяОтборПоСегментуПартнеров);				
		//ТабАид >Руслан
		
		ИначеЕсли СтрСравнить(ТребуемыйПараметр, ИмяОбъекта) = 0 Тогда
			Запрос.УстановитьПараметр(ТребуемыйПараметр, Предмет);
		Иначе
			Если ПараметрыШаблона.ПараметрыСКД.Свойство(ТребуемыйПараметр) Тогда
				Запрос.УстановитьПараметр(ТребуемыйПараметр, ПараметрыШаблона.ПараметрыСКД[ТребуемыйПараметр]);
			Иначе
				ЕстьНезаполненныйПараметр = Истина;      //Руслан ,параметр  ДанныеОтчета чем заполнять?
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНезаполненныйПараметр Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать сообщение, т.к. отсутствуют необходимые параметры.'");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		//+табАид
		Если Предмет = Неопределено тогда
			РезультатЗапроса.Колонки.Добавить("РеквизитыДляСтроки", Новый ОписаниеТипов("Соответствие"));
			РезультатЗапроса.Колонки.Добавить("Текст",              Новый ОписаниеТипов("Строка"));
			соотвРеквизиты = Реквизиты[ИмяОМ];
			Если соотвРеквизиты = неопределено Тогда 
				соотвРеквизиты =  Реквизиты["ТАБ АИД"];
			КонецЕсли;
			
			Для Каждого ТекущаяСтрокаТЗ из РезультатЗапроса Цикл
				ТекущееСоответствие = новый Соответствие;
				соотвСтрокаТЗ = СтрокаТаблицыЗначенийВСоответствие(ТекущаяСтрокаТЗ);
				Если Не соотвРеквизиты = неопределено Тогда
					Для Каждого КлючИЗначение из соотвРеквизиты Цикл
						ТекущееСоответствие.Вставить(КлючИЗначение.Ключ, соотвСтрокаТЗ.Получить(КлючИЗначение.Ключ));	
					КонецЦикла;	
					МассивРеквизитов = табАид_ПолучитьМассивРеквизитов(соотвРеквизиты);
					Для каждого Реквизит из МассивРеквизитов Цикл
						ТекущееСоответствие.Вставить(Реквизит, соотвСтрокаТЗ.Получить(Реквизит));	
					КонецЦикла;
				КонецЕсли;
				ТекущаяСтрокаТЗ.РеквизитыДляСтроки = ТекущееСоответствие;
			КонецЦикла;
			Реквизиты.Вставить("табАид_ТаблицаДанных", РезультатЗапроса);
		Иначе	
			//-табАид
			РезультатЗапроса = СтрокаТаблицыЗначенийВСоответствие(РезультатЗапроса[0]);
			УстановитьПараметрыИзЗапроса(Реквизиты, РезультатЗапроса);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция табАид_ПолучитьМассивРеквизитов(соотвРеквизиты, МассивРеквизитов = неопределено, ИмяРеквизита = "", ИмяРеквизитаПред = "",лпКлюч = Неопределено)
	Если МассивРеквизитов = неопределено Тогда
		МассивРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого КлючИЗначение из соотвРеквизиты Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда
			Если лпКлюч = Неопределено Тогда 
				лпКлюч = КлючИЗначение.Ключ;
			КонецЕсли;
			ИмяРеквизита = ИмяРеквизита + КлючИЗначение.Ключ + ".";
			ИмяРеквизитаПред = ИмяРеквизита;
			Если  Найти(ИмяРеквизитаПред,"~КИ") <> 0 Тогда 
				ИмяРеквизитаПред = лпКлюч+".";
			КонецЕсли;
			МассивРеквизитов = табАид_ПолучитьМассивРеквизитов(КлючИЗначение.Значение, МассивРеквизитов, ИмяРеквизита, ИмяРеквизитаПред,лпКлюч);	
		Иначе
			МассивРеквизитов.Добавить(ИмяРеквизитаПред + КлючИЗначение.Ключ);
			ИмяРеквизита = "";
		КонецЕсли;
	КонецЦикла;
	Возврат МассивРеквизитов;
КонецФункции

&Вместо("ЗаполнитьРеквизитыСвойствИКонтактнойИнформации")
Процедура табАид_ЗаполнитьРеквизитыСвойствИКонтактнойИнформации(ПараметрыТекстаСообщения, Предмет)
	//+табАид
	Если Предмет = Неопределено тогда
		Возврат;
	КонецЕсли;
	//-табАид
	МетаданныеОбъекта = Предмет.Метаданные();
	ЗначенияСвойств = ЗначенияРеквизитовСвойств(Предмет);
	КонтактнаяИнформацияОбъектов = ЗначенияРеквизитовКонтактнойИнформации(Предмет);
	
	Для каждого ПараметрОснования Из ПараметрыТекстаСообщения Цикл
		Если ТипЗнч(ПараметрОснования.Значение) = Тип("Соответствие") Тогда
			МетаданныеОбъектаПоКлючу = МетаданныеОбъекта.Реквизиты.Найти(ПараметрОснования.Ключ);
			Если МетаданныеОбъектаПоКлючу <> Неопределено Тогда
				ЗаполнитьРеквизитыСвойствИКонтактнойИнформации(ПараметрОснования.Значение, Предмет[ПараметрОснования.Ключ]);
			КонецЕсли;
		Иначе
			РеквизитНеНайден = Истина;
			Если ЗначенияСвойств <> Неопределено Тогда
				Для каждого СтрокаСвойство Из ЗначенияСвойств Цикл
					Если СтрСравнить(СтрокаСвойство.Свойство.Наименование, ПараметрОснования.Ключ) = 0 Тогда
						ПараметрыТекстаСообщения[ПараметрОснования.Ключ] = Строка(СтрокаСвойство.Значение);
						РеквизитНеНайден = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если РеквизитНеНайден И КонтактнаяИнформацияОбъектов <> Неопределено Тогда
				Для каждого КонтактнаяИнформацияОбъекта Из КонтактнаяИнформацияОбъектов Цикл
					Если СтрСравнить(Нрег(СтрЗаменить(КонтактнаяИнформацияОбъекта.Вид.Наименование," ","")), НРег(ПараметрОснования.Ключ)) = 0 Тогда
						Если ЗначениеЗаполнено(ПараметрыТекстаСообщения[ПараметрОснования.Ключ]) Тогда
							ПредыдущиеЗначение = ПараметрыТекстаСообщения[ПараметрОснования.Ключ] +", ";
						Иначе
							ПредыдущиеЗначение = "";
						КонецЕсли;
						ПараметрыТекстаСообщения[ПараметрОснования.Ключ] = ПредыдущиеЗначение + Строка(КонтактнаяИнформацияОбъекта.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&Вместо("УстановитьЗначенияРеквизитовВТекстСообщения")
Функция табАид_УстановитьЗначенияРеквизитовВТекстСообщения(ПараметрыШаблона, ПараметрыТекстаСообщения, Предмет)
	
	Результат = Новый Структура("Тема, Текст, Вложения");
	
	Если ПараметрыШаблона.ТипШаблона = "Письмо" Тогда
		Результат.Тема = ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ПараметрыШаблона.Тема, ПараметрыТекстаСообщения.Получить("табАид_ТаблицаДанных")[0].РеквизитыДляСтроки,"табАид_ВиртуальныйМенеджер.");
	КонецЕсли;
	
	//+табАид
	Если Предмет = Неопределено 
		И ПараметрыШаблона.ТипШаблона = "ГолосовоеСообщение"
		И ПараметрыТекстаСообщения.Получить("табАид_ТаблицаДанных") = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка передачи данных. Отсутствует таблица с данными.");
		Возврат Результат;
	КонецЕсли;
	
	Если Предмет = Неопределено И ПараметрыТекстаСообщения.Получить("табАид_ТаблицаДанных") <> Неопределено тогда
		ЧастиИмени = СтрРазделить(ПараметрыШаблона.ПолноеИмяТипаНазначения, ".");
		Если ЧастиИмени.Количество() >= 2 Тогда
			КлассОМ = ЧастиИмени[0];
			ИмяОМ   = ЧастиИмени[1];
		КонецЕсли;
		
		ТаблицаДанных = ПараметрыТекстаСообщения.Получить("табАид_ТаблицаДанных");
		ТаблицаОбщихРеквизитов = ПараметрыТекстаСообщения.Получить("ОбщиеРеквизиты");
		
		Для Каждого СтрокаТЗ из ТаблицаДанных Цикл
			СтрокаТЗ.Текст = ПараметрыШаблона.Текст; 
			СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст,"~КИ.","");
			СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст,"~Свойство.","");
			Если Найти(СтрокаТЗ.Текст,ИмяОМ) = 0 Тогда
				ИмяОМ =  "ТАБ АИД";
			КонецЕсли;
			
			Для Каждого КлючИЗначение из СтрокаТЗ.РеквизитыДляСтроки Цикл
				
				Если ТипЗнч(КлючИЗначение.Значение) = Тип("Дата") тогда
					СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст, "[" + ИмяОМ + "." + КлючИЗначение.Ключ + "]", Формат(КлючИЗначение.Значение, "ДЛФ=DD"));
				иначе
					
					Если Найти(КлючИЗначение.Ключ,"~КИ.") <> 0 Тогда
						лпКлюч =  СтрЗаменить(КлючИЗначение.Ключ,"~КИ.","");
						СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст, "[" + ИмяОМ + "." + "Организация." + лпКлюч + "]", КлючИЗначение.Значение);
					Иначе 
						СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст, "[" + ИмяОМ + "." + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;   
			
			Если ТаблицаОбщихРеквизитов <> Неопределено Тогда 
				Для Каждого КлючИЗначение из ТаблицаОбщихРеквизитов Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Дата") тогда
						СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст, "[ОбщиеРеквизиты." + КлючИЗначение.Ключ + "]", Формат(КлючИЗначение.Значение, "ДЛФ=DD"));
					ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Соответствие") Тогда 
						Для Каждого СтрокаСооответсвия Из КлючИЗначение.Значение Цикл
							СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст, "[ОбщиеРеквизиты." + КлючИЗначение.Ключ + "."+СтрокаСооответсвия.Ключ +"]", СтрокаСооответсвия.Значение);
						КонецЦикла;
					иначе
						СтрокаТЗ.Текст = СтрЗаменить(СтрокаТЗ.Текст, "[ОбщиеРеквизиты." + КлючИЗначение.Ключ + "]", КлючИЗначение.Значение);
					КонецЕсли;	
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаДанных.Количество() = 1 Тогда
			Результат.Текст = ТаблицаДанных[0].Текст;
		КонецЕсли;
		
		Результат.Вложения = ТаблицаДанных.Скопировать();
	иначе
		//-табАид	
		Результат.Текст = ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(ПараметрыШаблона.Текст, ПараметрыТекстаСообщения);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&Вместо("ОпределитьСписокРеквизитовИВложений")
Процедура табАид_ОпределитьСписокРеквизитовИВложений(СведенияОШаблоне, ПараметрыШаблона)
	
	Если ЗначениеЗаполнено(ПараметрыШаблона.ПолноеИмяТипаНазначения) Тогда
		// Реквизиты
		МетаданныеОбъект = Метаданные.НайтиПоПолномуИмени(ПараметрыШаблона.ПолноеИмяТипаНазначения);
		РеквизитыОбъектаНазначения = РеквизитыОбъектаНазначения(СведенияОШаблоне.Реквизиты, ПараметрыШаблона.ПолноеИмяТипаНазначения, ПараметрыШаблона.Назначение);
		РазворачиватьСсылочныеРеквизиты = ПараметрыШаблона.РазворачиватьСсылочныеРеквизиты;
		            
		Если МетаданныеОбъект <> Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъект.ПолноеИмя());
			Префикс = МетаданныеОбъект.Имя + ".";
			Если  МетаданныеОбъект.Имя = "табАид_ВиртуальныйМенеджер" Тогда
				
				ПараметрыШаблона.Макет = МетаданныеОбъект.Макеты.ДанныеШаблонаСообщений.Имя;
				
			КонецЕсли;
			
				
			Если ПустаяСтрока(ПараметрыШаблона.Макет) Тогда
				РеквизитыПоМетаданнымОбъекта(РеквизитыОбъектаНазначения, МетаданныеОбъект,,, Префикс);
			Иначе
				МакетСКД = МенеджерОбъекта.ПолучитьМакет(ПараметрыШаблона.Макет);
				РеквизитыПоСКД(РеквизитыОбъектаНазначения, МакетСКД, МетаданныеОбъект.Имя);
			КонецЕсли;
			
			ОпределитьСписокПечатныхФорм(МетаданныеОбъект, СведенияОШаблоне);
			Представление = МетаданныеОбъект.Представление();
			СсылкаНаОбъект = РеквизитыОбъектаНазначения.Добавить();
			СсылкаНаОбъект.Представление = НСтр("ru = 'Ссылка на';
			|en = 'Ref to'") + " """ + Представление + """";
			СсылкаНаОбъект.Имя           = Префикс + "ВнешняяСсылкаНаОбъект";
			СсылкаНаОбъект.Тип  = Новый ОписаниеТипов("Строка");
			СсылкаНаОбъект.ПолноеПредставление = Представление + "." + НСтр("ru = 'Ссылка на';
			|en = 'Ref to'") + " """ + Представление + """";
			
		Иначе
			Префикс = ПараметрыШаблона.ПолноеИмяТипаНазначения + ".";
			Представление = ПараметрыШаблона.Назначение;
		КонецЕсли;
		
		ШаблоныСообщенийПереопределяемый.ПриПодготовкеШаблонаСообщения(РеквизитыОбъектаНазначения, СведенияОШаблоне.Вложения, ПараметрыШаблона.ПолноеИмяТипаНазначения, ПараметрыШаблона);
		
		Если МетаданныеОбъект <> Неопределено Тогда
			МенеджерОбъекта.ПриПодготовкеШаблонаСообщения(РеквизитыОбъектаНазначения, СведенияОШаблоне.Вложения, ПараметрыШаблона);
		КонецЕсли;
		
		Для каждого РеквизитОбъектаНазначения Из РеквизитыОбъектаНазначения Цикл
			Если Не СтрНачинаетсяС(РеквизитОбъектаНазначения.Имя, Префикс) Тогда
				РеквизитОбъектаНазначения.Имя = Префикс + РеквизитОбъектаНазначения.Имя;
			КонецЕсли;
			Если РазворачиватьСсылочныеРеквизиты Тогда
				Если РеквизитОбъектаНазначения.Тип.Типы().Количество() = 1 Тогда
					ТипОбъекта = Метаданные.НайтиПоТипу(РеквизитОбъектаНазначения.Тип.Типы()[0]);
					Если ТипОбъекта <> Неопределено И СтрНачинаетсяС(ТипОбъекта.ПолноеИмя(), "Справочник") Тогда
						РазвернутьРеквизит(РеквизитОбъектаНазначения.Имя, РеквизитыОбъектаНазначения);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого ПроизвольныйПараметр Из ПараметрыШаблона.Параметры Цикл
		
		Если ПроизвольныйПараметр.Значение.ОписаниеТипа.Типы().Количество() > 0 Тогда
			Тип = ПроизвольныйПараметр.Значение.ОписаниеТипа.Типы()[0];
			МетаданныеОбъект = Метаданные.НайтиПоТипу(Тип);
			Если МетаданныеОбъект <> Неопределено Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъект.ПолноеИмя());
				Если МенеджерОбъекта <> Неопределено Тогда
					РеквизитыОбъектаНазначения = РеквизитыОбъектаНазначения(СведенияОШаблоне.Реквизиты, ПроизвольныйПараметр.Ключ);
					РеквизитыОбъектаНазначения.Родитель.Представление = ПроизвольныйПараметр.Значение.Представление;
					РеквизитыОбъектаНазначения.Родитель.Тип = ПроизвольныйПараметр.Значение.ОписаниеТипа;
					РеквизитыОбъектаНазначения.Родитель.ПроизвольныйПараметр = Истина;
					РеквизитыПоМетаданнымОбъекта(РеквизитыОбъектаНазначения, МетаданныеОбъект,,, МетаданныеОбъект.Имя + ".");
				КонецЕсли;
				ОпределитьСписокПечатныхФорм(МетаданныеОбъект, СведенияОШаблоне, ПроизвольныйПараметр.Ключ);
			Иначе
				ПроизвольныеПредставление = НСтр("ru = 'Произвольные';
				|en = 'Arbitrary'");
				Префикс = "Произвольные";
				РеквизитыОбъектаНазначения = РеквизитыОбъектаНазначения(СведенияОШаблоне.Реквизиты, Префикс, ПроизвольныеПредставление);
				НовыйСтрока = РеквизитыОбъектаНазначения.Добавить();
				НовыйСтрока.Имя = Префикс + "." + ПроизвольныйПараметр.Ключ;
				НовыйСтрока.Представление = ПроизвольныйПараметр.Значение.Представление;
				НовыйСтрока.Тип = ПроизвольныйПараметр.Значение.ОписаниеТипа;
				НовыйСтрока.ПроизвольныйПараметр = Истина;
			КонецЕсли;
		Иначе
			ПроизвольныеПредставление = НСтр("ru = 'Произвольные';
			|en = 'Arbitrary'");
			Префикс = "Произвольные";
			РеквизитыОбъектаНазначения = РеквизитыОбъектаНазначения(СведенияОШаблоне.Реквизиты, Префикс, ПроизвольныеПредставление);
			НовыйСтрока = РеквизитыОбъектаНазначения.Добавить();
			НовыйСтрока.Имя = Префикс + "." + ПроизвольныйПараметр.Ключ;
			НовыйСтрока.Представление = ПроизвольныйПараметр.Значение.Представление;
			НовыйСтрока.Тип = ОбщегоНазначения.ОписаниеТипаСтрока(150);
			НовыйСтрока.ПроизвольныйПараметр = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыШаблона.ПолноеИмяТипаНазначения = "Обработка.табАид_ВиртуальныйМенеджер" тогда
		Если СведенияОШаблоне.Реквизиты.Строки.Количество() тогда
			СтрокиРеквизитов  = СведенияОШаблоне.Реквизиты.Строки[0].Строки;	
			МассивСтрокСсылка = СтрокиРеквизитов.НайтиСтроки(Новый Структура("Имя", "табАид_ВиртуальныйМенеджер.ВнешняяСсылкаНаОбъект"));
			Для Каждого СтрокаМассива из МассивСтрокСсылка Цикл
				СтрокиРеквизитов.Удалить(СтрокаМассива);
			КонецЦикла;
			СтрокиВалюты = СтрокиРеквизитов.НайтиСтроки(Новый Структура("Имя", "табАид_ВиртуальныйМенеджер.Валюта"))[0].Строки;
			СтрокиВалюты.Удалить(СтрокиВалюты.Найти("табАид_ВиртуальныйМенеджер.Валюта.Наценка"));
		КонецЕсли;
	ИначеЕсли ПараметрыШаблона.ПолноеИмяТипаНазначения = "РегистрНакопления.РасчетыСКлиентами" тогда
		Если СведенияОШаблоне.Реквизиты.Строки.Количество() тогда
			СтрокиРеквизитов  = СведенияОШаблоне.Реквизиты.Строки[0].Строки;	
			МассивСтрокСсылка = СтрокиРеквизитов.НайтиСтроки(Новый Структура("Имя", "РасчетыСКлиентами.ВнешняяСсылкаНаОбъект"));
			Для Каждого СтрокаМассива из МассивСтрокСсылка Цикл
				СтрокиРеквизитов.Удалить(СтрокаМассива);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&Вместо("СформироватьСообщениеИОтправить")
Функция табАид_СформироватьСообщениеИОтправить(ПараметрыОтправки)
	
	Результат = Новый Структура("Отправлено, ОписаниеОшибки", Ложь);
	
	Сообщение = СформироватьСообщение(ПараметрыОтправки);
	
	//+табАид
	Если ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = "СообщениеSMS" Тогда
		Если Сообщение.Получатель.Количество() = 0 Тогда
			Результат.ОписаниеОшибки  = НСтр("ru = 'Не указан номер получателя SMS.'");
			Возврат Результат;
		КонецЕсли;
		
		НомераПолучателей = Новый Массив;
		Для каждого Получатель Из Сообщение.Получатель Цикл
			НомераПолучателей.Добавить(Получатель.Значение);
		КонецЦикла;
		
		МодульОтправкаSMS = ОбщегоНазначения.ОбщийМодуль("табАид_ОтправкаSMS");
		Если МодульОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
			
			РезультатОтправкаSMS = МодульОтправкаSMS.ОтправитьSMS(НомераПолучателей, 
			Сообщение.Текст, 
			Сообщение.ДополнительныеПараметры.Отправитель, 
			Сообщение.ДополнительныеПараметры.ПеревестиВТранслит); 
			
			Результат.Отправлено = ПустаяСтрока(РезультатОтправкаSMS.ОписаниеОшибки);
			Результат.ОписаниеОшибки = РезультатОтправкаSMS.ОписаниеОшибки;
			
			табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, РезультатОтправкаSMS.ОтправленныеСообщения);	
		Иначе
			Результат.ОписаниеОшибки = НСтр("ru = 'Неверно заданы настройки провайдера для отправки SMS.'");
			табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, Новый Массив);	
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = "ГолосовоеСообщение" Тогда
		Если Сообщение.Получатель.Количество() = 0 Тогда
			Результат.ОписаниеОшибки  = НСтр("ru = 'Для отправки сообщения необходимо ввести номер телефонов получателей.'");
			Возврат Результат;
		КонецЕсли;
		
		НомераПолучателей = Новый Массив;
		Для каждого Получатель Из Сообщение.Получатель Цикл
			НомераПолучателей.Добавить(Получатель.Значение);
		КонецЦикла;
		
		МодульОтправкаГС = ОбщегоНазначения.ОбщийМодуль("табАид_ОтправкаГолосовойПочты");
		Если МодульОтправкаГС.НастройкаОтправкиГПВыполнена() Тогда
			
			РезультатОтправкаГС = МодульОтправкаГС.ОтправитьГП(НомераПолучателей, Сообщение.Текст);
			Результат.Отправлено = ПустаяСтрока(РезультатОтправкаГС.ОписаниеОшибки);
			Результат.ОписаниеОшибки = РезультатОтправкаГС.ОписаниеОшибки;
			табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, РезультатОтправкаГС.ОтправленныеСообщения);	
			
		Иначе
			
			Результат.ОписаниеОшибки = НСтр("ru = 'Голосовое сообщение не может быть отправлено. Отправка голосовых сообщений не настроена.'");
			табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, Новый Массив);	
			
		КонецЕсли;
		
		//-табАид
	Иначе
		Если Сообщение.Получатель.Количество() = 0 Тогда
			Результат.ОписаниеОшибки  = НСтр("ru = 'Сообщение не может быть отправлено сразу, т.к необходимо ввести адрес электронной почты.'");
			табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, Новый Массив);	
			Возврат Результат;
		КонецЕсли;
		ПроверкаАдреса =  ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(Сообщение.Получатель[0].Значение);
		Если СтрДлина(ПроверкаАдреса[0].ОписаниеОшибки) <> 0 Тогда 
			Результат.ОписаниеОшибки = НСтр("ru = 'Получатель " + Сообщение.Получатель[0].Значение+" :Неправильно указан электронный адрес получателя.'");
			табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, Новый Массив);	
			Возврат Результат;
		КонецЕсли;
		
		ПараметрыПисьма = Новый Структура();
		ПараметрыПисьма.Вставить("Тема",      Сообщение.Тема);
		ПараметрыПисьма.Вставить("Тело",      Сообщение.Текст);
		ПараметрыПисьма.Вставить("Вложения",  Новый Соответствие);
		ПараметрыПисьма.Вставить("Кодировка", "utf-8");
		
		Для каждого Вложение Из Сообщение.Вложения Цикл
			НовоеВложение = Новый Структура("ДвоичныеДанные, Идентификатор");
			НовоеВложение.ДвоичныеДанные = ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище);
			НовоеВложение.Идентификатор = Вложение.Идентификатор;
			ПараметрыПисьма.Вложения.Вставить(Вложение.Представление, НовоеВложение);
		КонецЦикла;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениямиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениямиСлужебный");
			Если Сообщение.ДополнительныеПараметры.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
				ТипТекста = МодульРаботаСПочтовымиСообщениямиСлужебный.ТипТекстовЭлектронныхПисем("HTMLСКартинками");
			Иначе
				ТипТекста = МодульРаботаСПочтовымиСообщениямиСлужебный.ТипТекстовЭлектронныхПисем("ПростойТекст");
			КонецЕсли;
		Иначе
			ТипТекста = "";
		КонецЕсли;
		
		ПараметрыПисьма.Вставить("ТипТекста", ТипТекста);
		Кому = СформироватьСписокПолучателейСообщения(Сообщение.Получатель);
		ПараметрыПисьма.Вставить("Кому", Кому);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
			МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
			Если МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
				
				Если ПараметрыОтправки.ДополнительныеПараметры.УчетнаяЗапись = Неопределено 
					//+табАид 
					Или Не ЗначениеЗаполнено(ПараметрыОтправки.ДополнительныеПараметры.УчетнаяЗапись)
					//-табАид
					Тогда
					УчетнаяЗапись = МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
				Иначе
					УчетнаяЗапись = ПараметрыОтправки.ДополнительныеПараметры.УчетнаяЗапись;
				КонецЕсли;
				
				Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
					
					МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
					Если МодульВзаимодействия.ИспользуетсяПочтовыйКлиент() Тогда
						
						РезультатОтправки = МодульВзаимодействия.СоздатьПисьмо(Сообщение, УчетнаяЗапись);
						ЗаполнитьЗначенияСвойств(Результат, РезультатОтправки);
						
						//+табАид
						СтрокаКому = "";
						Для каждого ЭлемКому из Кому Цикл
							СтрокаКому = СтрокаКому + ?(ЗначениеЗаполнено(СтрокаКому), ", ", "") + ЭлемКому.Адрес;
						КонецЦикла;
						
						СтруктураСообщения = Новый Структура("АдресПолучателя, ИдентификаторСообщения", СокрЛП(СтрокаКому), "");
						МассивСообщений = Новый Массив;
						МассивСообщений.Добавить(СтруктураСообщения);
						
						табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, МассивСообщений);	
						//-табАид
						Возврат Результат;
						
					КонецЕсли;
					
				КонецЕсли;
				
				МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
				Результат.Отправлено = Истина;
				
				//+табАид
				СтрокаКому = "";
				Для каждого ЭлемКому из Кому Цикл
					СтрокаКому = СтрокаКому + ?(ЗначениеЗаполнено(СтрокаКому), ", ", "") + ЭлемКому.Адрес;
				КонецЦикла;
				
				СтруктураСообщения = Новый Структура("АдресПолучателя, ИдентификаторСообщения", СокрЛП(СтрокаКому), "");
				МассивСообщений = Новый Массив;
				МассивСообщений.Добавить(СтруктураСообщения);
				табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, МассивСообщений);	
				//-табАид
			Иначе
				
				//+табАид
				Результат.ОписаниеОшибки  = НСтр("ru = 'Недостаточно прав для отправки сообщения.'");
				табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Результат.Отправлено, Результат.ОписаниеОшибки, Сообщение.Текст, Новый Массив);	
				//-табАид
				Возврат Результат;
				
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция табАид_ПолучитьПочтовыйАдресДляОтправки(Знач Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	табАид_Настройки.ПочтаДляЕмайл КАК ПочтаДляЕмайл,
	|	1 КАК Приоритет
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	табАид_Настройки.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	табАид_Настройки.ПочтаДляЕмайл,
	|	2
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ";
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") тогда	
		Запрос.УстановитьПараметр("Организация", Организация);
	иначе
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ПочтаДляЕмайл; 
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

&Вместо("СформироватьПолучателейПоУмолчанию")
Функция табАид_СформироватьПолучателейПоУмолчанию(Предмет, ТипШаблона)
	Получатели = Новый ТаблицаЗначений;
	Получатели.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Получатели.Колонки.Добавить("Контакт");
	Если СтрСравнить(ТипШаблона, "SMS") = 0 Тогда
		Получатели.Колонки.Добавить("НомерТелефона", Новый ОписаниеТипов("Строка"));
		ИмяКолонки = "НомерТелефона";
		//+табАид
	ИначеЕсли ТипШаблона = "ГолосовоеСообщение" Тогда
		Получатели.Колонки.Добавить("НомерТелефона", Новый ОписаниеТипов("Строка"));
		ИмяКолонки = "НомерТелефона";
		//-табАид
	Иначе
		Получатели.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
		ИмяКолонки = "Адрес";
	КонецЕсли;
	
	Если Предмет = Неопределено Тогда
		Возврат Получатели;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		
		ТипКонтактнойИнформации = ?(СтрСравнить(ТипШаблона, "SMS") = 0,
		МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("Телефон"),
		МодульУправлениеКонтактнойИнформацией.ТипКонтактнойИнформацииПоНаименованию("АдресЭлектроннойПочты"));
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
			МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
			
			Если МодульВзаимодействия.ИспользуетсяПочтовыйКлиент() Тогда
				Контакты = МодульВзаимодействия.ПолучитьКонтактыПоПредмету(Предмет, ТипКонтактнойИнформации);
				
				Для каждого ИнформацияОКонтакте Из Контакты Цикл
					НоваяСтрока = Получатели.Добавить();
					НоваяСтрока.Контакт       = ИнформацияОКонтакте.Контакт;
					НоваяСтрока.Представление = ИнформацияОКонтакте.Представление;
					НоваяСтрока[ИмяКолонки]   = ИнформацияОКонтакте.Адрес;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Получатели.Количество() = 0 И ТипЗнч(Предмет) <> Тип("Строка") Тогда
			ОбъектыСКонтактнойИнформацией = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
			
			ВидыКонтактнойИнформацияОбъекта = МодульУправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(Предмет);
			Если ВидыКонтактнойИнформацияОбъекта.Количество() > 0 Тогда
				КонтактнаяИнформацияОбъектов = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ОбъектыСКонтактнойИнформацией, ТипКонтактнойИнформации,, ТекущаяДатаСеанса());
				Если КонтактнаяИнформацияОбъектов.Количество() > 0 Тогда
					Для каждого КонтактнаяИнформацияОбъекта Из КонтактнаяИнформацияОбъектов Цикл
						НоваяСтрока= Получатели.Добавить();
						НоваяСтрока[ИмяКолонки]   = КонтактнаяИнформацияОбъекта.Представление;
						НоваяСтрока.Представление = СтрЗаменить(Строка(КонтактнаяИнформацияОбъекта.Объект), ",", "");
						НоваяСтрока.Контакт       = Предмет;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Получатели;
КонецФункции

Процедура табАид_ЗаписьВЖурналСобытий(ПараметрыОтправки, Отправлено, ОписаниеОшибки, ТекстСообщения, ОтправленныеСообщения) Экспорт
	
	ТипСообщения = Перечисления.табАид_ТипыСообщений.Email;
	Если ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = "СообщениеSMS" Тогда
		ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS;
	ИначеЕсли ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = "ГолосовоеСообщение" Тогда
		ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение;
	КонецЕсли;
	
	Если ПараметрыОтправки.Шаблон.ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ТекстСообщения = табАид_ПолучитьПростойТекстИзHTML(ТекстСообщения);	
	КонецЕсли;
	
	Если Не Отправлено Тогда
		
		МенеджерЗаписиЖС = РегистрыСведений.табАид_ЖурналСобытий.СоздатьМенеджерЗаписи();	
		Если ПараметрыОтправки.ДополнительныеПараметры.Свойство("табАид_ЗначенияРеквизитовСообщения") Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиЖС, ПараметрыОтправки.ДополнительныеПараметры.табАид_ЗначенияРеквизитовСообщения);
		КонецЕсли;
		МенеджерЗаписиЖС.ДатаВремяСобытия = ТекущаяДата();
		МенеджерЗаписиЖС.СтатусСобытия = Отправлено;
		МенеджерЗаписиЖС.ТекстОшибки = ОписаниеОшибки;
		МенеджерЗаписиЖС.ТекстСообщения = ТекстСообщения;
		МенеджерЗаписиЖС.ТипСообщения = ТипСообщения;
		МенеджерЗаписиЖС.КлючРегламентногоЗадания = ПараметрыОтправки.ДополнительныеПараметры.КлючРегламентногоЗадания;
		МенеджерЗаписиЖС.КлючПравила = ПараметрыОтправки.ДополнительныеПараметры.КлючПравила;
		МенеджерЗаписиЖС.Записать();
		
	Иначе
		
		Для каждого Сообщение из ОтправленныеСообщения Цикл
			МенеджерЗаписиЖС = РегистрыСведений.табАид_ЖурналСобытий.СоздатьМенеджерЗаписи();	
			
			Если ПараметрыОтправки.ДополнительныеПараметры.Свойство("табАид_ЗначенияРеквизитовСообщения") Тогда
				ЗаполнитьЗначенияСвойств(МенеджерЗаписиЖС, ПараметрыОтправки.ДополнительныеПараметры.табАид_ЗначенияРеквизитовСообщения);
			КонецЕсли;
			
			Если Сообщение.Свойство("НомерПолучателя") Тогда
				МенеджерЗаписиЖС.Телефон = Сообщение.НомерПолучателя;
			ИначеЕсли Сообщение.Свойство("АдресПолучателя") Тогда
				МенеджерЗаписиЖС.Почта = Сообщение.АдресПолучателя;
			КонецЕсли;
			
			МенеджерЗаписиЖС.УникальныйКлючЗаписи = Сообщение.ИдентификаторСообщения;
			МенеджерЗаписиЖС.ДатаВремяСобытия = ТекущаяДата();
			МенеджерЗаписиЖС.СтатусСобытия = Отправлено;
			
			Если ТипСообщения = Перечисления.табАид_ТипыСообщений.Email Тогда 
				МенеджерЗаписиЖС.СтатусДоставки = Отправлено;
			КонецЕсли;
			
			МенеджерЗаписиЖС.ТекстСообщения = ТекстСообщения;
			МенеджерЗаписиЖС.ТипСообщения = ТипСообщения;
			МенеджерЗаписиЖС.КлючРегламентногоЗадания = ПараметрыОтправки.ДополнительныеПараметры.КлючРегламентногоЗадания;
			МенеджерЗаписиЖС.КлючПравила = ПараметрыОтправки.ДополнительныеПараметры.КлючПравила;
			МенеджерЗаписиЖС.РасчетныйДокумент = ПараметрыОтправки.ДополнительныеПараметры.табАид_ЗначенияРеквизитовСообщения.РасчетныйДокумент;
			
			МенеджерЗаписиЖС.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция табАид_ПолучитьПростойТекстИзHTML(ТекстHTML) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	Возврат СокрЛП(ДокументHTML.Тело.ТекстовоеСодержимое);
	
КонецФункции

&Вместо("ОпределитьСписокПечатныхФорм")
Процедура табАид_ОпределитьСписокПечатныхФорм(МетаданныеОбъект, Знач ПараметрыШаблона, ИмяПараметра="")
	// табАид+
	Если МетаданныеОбъект = Метаданные.Обработки.табАид_ВиртуальныйМенеджер Тогда
		Если Константы.ИспользоватьСчетаНаОплатуКлиентам.Получить() Тогда
			МетаданныеОбъект = Метаданные.Документы.СчетНаОплатуКлиенту;
		Иначе
			МетаданныеОбъект = Метаданные.Документы.ЗаказКлиента;
		КонецЕсли;
	КонецЕсли;
	// табАид-
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
		
		ИсточникиКомандПечати   = МодульУправлениеПечатью.ИсточникиКомандПечати();
		Если ИсточникиКомандПечати.Найти(МетаданныеОбъект) <> Неопределено Тогда
			
			КомандыПечатиОбъекта = МодульУправлениеПечатью.КомандыПечатиОбъектаДоступныеДляВложений(МетаданныеОбъект);
			ПроверкаНаДубли      = Новый Соответствие;
			
			Для каждого Вложение Из КомандыПечатиОбъекта Цикл
				Если НЕ Вложение.Отключена
					И СтрНайти(Вложение.Идентификатор, ",") = 0
					И НЕ ПустаяСтрока(Вложение.МенеджерПечати)
					И НЕ Вложение.СразуНаПринтер
					И НЕ Вложение.СкрытаФункциональнымиОпциями
					И ПроверкаНаДубли[Вложение.УникальныйИдентификатор] = Неопределено Тогда
					НоваяСтрока                 = ПараметрыШаблона.Вложения.Добавить();
					НоваяСтрока.Имя             = Вложение.Идентификатор;
					НоваяСтрока.Идентификатор   = Вложение.УникальныйИдентификатор;
					НоваяСтрока.Представление   = Вложение.Представление;
					НоваяСтрока.МенеджерПечати  = Вложение.МенеджерПечати;
					НоваяСтрока.ТипФайла        = "MXL";
					НоваяСтрока.Статус          = "ПечатнаяФорма";
					НоваяСтрока.ИмяПараметра    = ИмяПараметра;
					НоваяСтрока.ПараметрыПечати = Вложение.ДополнительныеПараметры;
					ПроверкаНаДубли.Вставить(Вложение.УникальныйИдентификатор, Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ДобавитьВыбранныеПечатныеФормыВоВложения")
Процедура табАид_ДобавитьВыбранныеПечатныеФормыВоВложения(ПараметрыОтправки, СведенияОШаблоне, Вложения, ПараметрыШаблона)
	Если СведенияОШаблоне.Вложения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФорматыСохранения = Новый Массив;
	Если ТипЗнч(ПараметрыШаблона.ФорматыВложений) = Тип("СписокЗначений") Тогда
		Для каждого ФорматВложения Из ПараметрыШаблона.ФорматыВложений Цикл
			ФорматыСохранения.Добавить(?(ТипЗнч(ФорматВложения.Значение) = Тип("ТипФайлаТабличногоДокумента"),
			ФорматВложения.Значение,
			ТипФайлаТабличногоДокумента[ФорматВложения.Значение]));
		КонецЦикла;
	Иначе
		ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;
	
	Для каждого ВложениеПечатнаяФорма Из СведенияОШаблоне.Вложения Цикл
		ИмяПараметраСПечатнойФормойВШаблоне = ПараметрыШаблона.ВыбранныеВложения[ВложениеПечатнаяФорма.Идентификатор];
		Если ВложениеПечатнаяФорма.Статус = "ПечатнаяФорма" И ИмяПараметраСПечатнойФормойВШаблоне <> Неопределено Тогда
			ИмяМенеджераПечати = ВложениеПечатнаяФорма.МенеджерПечати;
			ПараметрыПечати    = ВложениеПечатнаяФорма.ПараметрыПечати;
			МассивОбъектов     = Новый Массив;
			
			//+табАид
			Если ПараметрыШаблона.ПолноеИмяТипаНазначения = "Обработка.табАид_ВиртуальныйМенеджер" Тогда
				Обработки.табАид_ВиртуальныйМенеджер.ЗаполнитьМассивОбъектовДляПечати(МассивОбъектов, ПараметрыОтправки.ДополнительныеПараметры);
			Иначе
				//-табАид		
				Предмет = ПараметрыОтправки.ДополнительныеПараметры.ПроизвольныеПараметры[ИмяПараметраСПечатнойФормойВШаблоне];
				Если Предмет = Неопределено Тогда
					МассивОбъектов.Добавить(ПараметрыОтправки.Предмет);
				Иначе
					МассивОбъектов.Добавить(Предмет);
				КонецЕсли;
			КонецЕсли;
			
			ИменаМакетов       = ?(ПустаяСтрока(ВложениеПечатнаяФорма.Имя), ВложениеПечатнаяФорма.Идентификатор, ВложениеПечатнаяФорма.Имя);
			
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Печать") Тогда
				МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
				
				Попытка
					КомандаПечати = Новый Структура;
					КомандаПечати.Вставить("Идентификатор", ИменаМакетов);
					КомандаПечати.Вставить("МенеджерПечати", ИмяМенеджераПечати);
					КомандаПечати.Вставить("ДополнительныеПараметры", ПараметрыПечати);
					
					НастройкиСохранения = МодульУправлениеПечатью.НастройкиСохранения();
					НастройкиСохранения.ФорматыСохранения = ФорматыСохранения;
					НастройкиСохранения.УпаковатьВАрхив = ПараметрыШаблона.УпаковатьВАрхив;
					НастройкиСохранения.ПереводитьИменаФайловВТранслит = ПараметрыШаблона.ТранслитерироватьИменаФайлов;
					НастройкиСохранения.ПодписьИПечать = ПараметрыШаблона.ПодписьИПечать;
					
					КоллекцияПечатныхФорм = МодульУправлениеПечатью.НапечататьВФайл(КомандаПечати, МассивОбъектов, НастройкиСохранения);
					
				Исключение
					// Ошибка при создании внешний печатной формы. Создаем дальше письмо, без этой печатной формы.
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,, НСтр("ru = 'Ошибка при создании внешней печатной формы. По причине:';
					|en = 'An error occurred when creating an external print form. Due to:'") + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					
					ОбщегоНазначения.СообщитьПользователю(ИнформацияОбОшибке.Описание) // сообщения обрабатываются в СформироватьСообщение
				КонецПопытки;
				
				Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
					
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПечатнаяФорма.ДвоичныеДанные, ПараметрыОтправки.УникальныйИдентификатор);
					Вложения.Вставить(ПечатнаяФорма.ИмяФайла, АдресВоВременномХранилище);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
