&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ФормаДлительнойОперации;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтотОбъект.Сутки    = 24*60*60;
	Объект.ДатаОтчета   = ТекущаяДата();
	Объект.ДанныеОтчета = 1;
	Объект.ДетализацияОтчета = 1;
	Объект.Валюта       = Константы.ВалютаРегламентированногоУчета.Получить();
	ЭтотОбъект.ВсеДолги = Истина; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВариантыКлассификацииЗадолженности.Ссылка КАК Ссылка,
	|	ВариантыКлассификацииЗадолженности.Календарь КАК Календарь
	|ИЗ
	|	Справочник.ВариантыКлассификацииЗадолженности КАК ВариантыКлассификацииЗадолженности
	|ГДЕ
	|	НЕ ВариантыКлассификацииЗадолженности.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В системе не указаны варианты классификации задолженности.");
	иначе	
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 тогда
			Элементы.ВариантКлассификации.Видимость = Ложь;
		иначе
			Элементы.ВариантКлассификации.Видимость = Истина;
		КонецЕсли;
		Выборка.Следующий();
		Объект.ВариантКлассификации = Выборка.Ссылка;
		Объект.Календарь            = Выборка.Календарь;
	КонецЕсли;
	
	ЭтотОбъект.ДатаАктуальностиРасчетов = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Дата(3999,11,30), , "РасчетыСКлиентами");
	
	ЭтотОбъект.НастройкаИерархии = ХранилищеОбщихНастроек.Загрузить("табАид_ВиртуальныйМенеджер", "табАид_РеквизитыПостроенияИерарахии");
	
	Если ЭтотОбъект.НастройкаИерархии.Количество() <> 0 Тогда 
		ИндексИнтервала = ЭтотОбъект.НастройкаИерархии.Индекс(ЭтотОбъект.НастройкаИерархии .НайтиПоЗначению("ИнтервалЗадолженности"));
		
		Если ИндексИнтервала <> 0 Тогда 
			ЭтотОбъект.НастройкаИерархии.Сдвинуть(ЭтотОбъект.НастройкаИерархии.НайтиПоЗначению("ИнтервалЗадолженности"),-1);
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.НастройкаВыводитьДоговор = ХранилищеОбщихНастроек.Загрузить("табАид_ВиртуальныйМенеджер", "табАид_ВыводитьДоговор");
	
	Если Объект.ДетализацияОтчета <> 1 Тогда 
		Элементы.ДеревоДанныхОбъектРасчетов.Видимость = Ложь;
	Иначе 
		Элементы.ДеревоДанныхОбъектРасчетов.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДеревоДанныхДоговор.Видимость = ЭтотОбъект.НастройкаВыводитьДоговор;
	Если ЭтотОбъект.НастройкаИерархии.Количество() = 0 тогда
		ЗаполнитьНастройкиИерархииПоУмолчаниюНаСервере();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваПользовательИБ = Пользователи.СвойстваПользователяИБ(ПараметрыСеанса.ТекущийПользователь.ИдентификаторПользователяИБ);
	УстановитьПривилегированныйРежим(Ложь);
	Элементы.ОткрытьСписокРЗ.Доступность = РольДоступна("Администрирование") Или РольДоступна("АдминистраторСистемы") Или РольДоступна("ПолныеПрава");
	Если Не СвойстваПользовательИБ = Неопределено Тогда 
		Выборка = ХранилищеСистемныхНастроек.Выбрать(Новый Структура("Пользователь, КлючОбъекта", СвойстваПользовательИБ.Имя,
		"Обработка.таб_ВиртуальныйМенеджерТАБАИД.Форма.Форма/Такси/НастройкиОкна"));
		Пока Выборка.Следующий() Цикл
			ХранилищеСистемныхНастроек.Удалить(Выборка.КлючОбъекта, Выборка.КлючНастроек, СвойстваПользовательИБ.Имя); 	
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСписокКлючейРЗ();
	
	Если НоваяАрхитектураВзаиморасчетов() Тогда
		Элементы.ВключатьЗадолженность.Видимость = Истина;
		Элементы.ДекорацияСтараяАрхитектура.Видимость = Ложь;
		ВключатьЗадолженность = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьНастройкуЗадолженности(); 
	Иначе
		Элементы.ВключатьЗадолженность.Видимость = Ложь;
		Элементы.ДекорацияСтараяАрхитектура.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваИзВыборка(СтрокаДерева, Выборка, 
	соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
	ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
	ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
	
	Если  Выборка.Партнер = null Тогда 
		СтрокаДерева.Партнер                     = Выборка.Контрагент.Партнер;
	Иначе
		СтрокаДерева.Партнер                     = Выборка.Партнер;
	КонецЕсли;
	
	СтрокаДерева.СтатусПартнера              = Выборка.СтатусПартнера;
	
	Если Объект.ДетализацияОтчета = 1 Тогда 
		СтрокаДерева.ОбъектРасчетов              = Выборка.ЗаказКлиента;
	КонецЕсли;
	
	Если ЭтотОбъект.ВсеДолги и Выборка.КоличествоДней = 0 тогда
		СтрокаДерева.КоличествоДнейЗадолженности = Выборка.КоличествоДнейДоПлатежа;
		СтрокаДерева.Сумма                       = Выборка.ДолгКлиентаВВалютеОтчета;  
	ИначеЕсли ЭтотОбъект.ВсеДолги и Выборка.КоличествоДней < 0 тогда
		СтрокаДерева.КоличествоДнейЗадолженности = Выборка.КоличествоДней;
		СтрокаДерева.Сумма                       = Выборка.ДолгКлиентаВВалютеОтчета;  
	иначе	
		СтрокаДерева.КоличествоДнейЗадолженности = Выборка.КоличествоДней;
		СтрокаДерева.Сумма                       = Выборка.ДолгКлиентаПросроченоВВалютеОтчета; 
	КонецЕсли;
	мКонтактноеЛицо = соотвПартнерКонтакт.Получить(Выборка.Партнер);
	Если мКонтактноеЛицо = Неопределено тогда
		Если  Выборка.Партнер = null Тогда 
			мКонтактноеЛицо                        = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Выборка.Контрагент.Партнер);
			Если мКонтактноеЛицо <> ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка") Тогда 
				СтрокаДерева.КонтактноеЛицо      = мКонтактноеЛицо;
				
				соотвПартнерКонтакт.Вставить(Выборка.Контрагент.Партнер, мКонтактноеЛицо);
			КонецЕсли;
			
		Иначе 
			мКонтактноеЛицо                        = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Выборка.Партнер);
			Если мКонтактноеЛицо <> ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка") Тогда 
				СтрокаДерева.КонтактноеЛицо      = мКонтактноеЛицо;
				
				соотвПартнерКонтакт.Вставить(Выборка.Партнер, мКонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
	иначе
		СтрокаДерева.КонтактноеЛицо      = мКонтактноеЛицо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.КонтактноеЛицо) тогда
		стррДанныеКИ = соотвКонтактТелефонЕмайл.Получить(СтрокаДерева.КонтактноеЛицо);
		
		Если стррДанныеКИ = Неопределено тогда
			стррДанныеКИ = ПолучитьДанныеКИКонтактноеЛицоНаСервере(СтрокаДерева.КонтактноеЛицо);
			соотвКонтактТелефонЕмайл.Вставить(СтрокаДерева.КонтактноеЛицо, стррДанныеКИ);
			СтрокаДерева.Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			СтрокаДерева.Почта   = стррДанныеКИ.Почта;
		иначе
			//храним данные как структуру
			СтрокаДерева.Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			СтрокаДерева.Почта   = стррДанныеКИ.Почта;
		КонецЕсли;
		// если не удалось определить контактное лицо - получаем телефон и почту партнера
	Иначе
		стррДанныеКИ = соотвКонтактТелефонЕмайл.Получить(СтрокаДерева.Партнер);
		
		Если стррДанныеКИ = Неопределено тогда
			стррДанныеКИ = ПолучитьДанныеКИПартнераНаСервере(СтрокаДерева.Партнер);
			соотвКонтактТелефонЕмайл.Вставить(СтрокаДерева.Партнер, стррДанныеКИ);
			СтрокаДерева.Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			СтрокаДерева.Почта   = стррДанныеКИ.Почта;
		иначе
			//храним данные как структуру
			СтрокаДерева.Телефон = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("()_- ", стррДанныеКИ.Телефон, "");
			СтрокаДерева.Почта   = стррДанныеКИ.Почта;
		КонецЕсли;
	КонецЕсли;
	
	//Получим данные по всем датам: Минус3, Минус2, Минус1, Минус0(текущая) в виде соответствия
	
	Если Объект.ДетализацияОтчета = 1 Тогда
		лпРасчетныйДокумент = ?(Выборка.РасчетныйДокумент.Пустая(),Неопределено,Выборка.РасчетныйДокумент);
		соотвПолныеДанные = ПолучитьПолныеДанныеЖурналаСобытий(Выборка.Партнер, Объект.ДатаОтчета, ЭтотОбъект.Сутки, Выборка.ЗаказКлиента,Выборка.ДолгКлиента,лпРасчетныйДокумент);
		
	Иначе 
		соотвПолныеДанные = ПолучитьПолныеДанныеЖурналаСобытий(Выборка.Партнер, Объект.ДатаОтчета, ЭтотОбъект.Сутки,,Окр(Выборка.ДолгКлиента,2));
	КонецЕсли;
	
	
	
	//для ТекДатаМинус3 
	ДатаДанных = Объект.ДатаОтчета - (3 * ЭтотОбъект.Сутки);
	стррДанные = соотвПолныеДанные.Получить(ДатаДанных);
	СОшибками = 0;
	Отправлено = 0;
	Доставлено = 0;
	Если Не стррДанные.ТипыСообщений = Неопределено тогда
		ТекущийИтогиПоТипамСообщений = ИтогиТекДатаМинус3.ИтогиПоТипамСообщений;
		Для каждого КлючИЗначение из стррДанные.ТипыСообщений Цикл 
			ТипСообщения = КлючИЗначение.Ключ;
			КоличествоСообщенийДанногоТипа = ТекущийИтогиПоТипамСообщений.Получить(ТипСообщения);
			СтруктураЗначения = КлючИЗначение.Значение;
			Если КоличествоСообщенийДанногоТипа = Неопределено тогда
				КоличествоСообщенийДанногоТипа = СтруктураЗначения.Количество; 
			иначе
				КоличествоСообщенийДанногоТипа = КоличествоСообщенийДанногоТипа + СтруктураЗначения.Количество;
			КонецЕсли;
			ТекущийИтогиПоТипамСообщений.Вставить(ТипСообщения, КоличествоСообщенийДанногоТипа);
			Если СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 И СтруктураЗначения.Доставлено > 0 Тогда
				Доставлено = Доставлено + 1;
				Отправлено = Отправлено + 1;
			ИначеЕсли СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 Тогда
				Отправлено = Отправлено + 1;
			Иначе
				СОшибками = СОшибками + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если стррДанные.ТипыСообщений.Количество() = 1 Тогда
			Если стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.Email) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус3Картинка = 1;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.SMS) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус3Картинка = 3;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус3Картинка = 2;
			КонецЕсли;
		ИначеЕсли стррДанные.ТипыСообщений.Количество() > 1 Тогда 
			СтрокаДерева.ТекДатаМинус3Картинка = 4;
		КонецЕсли;
		
		СтрокаДерева.ТекДатаМинус3 = ПолучитьПредставлениеДанных(стррДанные.ТипыСообщений);
		
	иначе
		СтрокаДерева.ТекДатаМинус3 = "";
	КонецЕсли;
	Если Не стррДанные.СтатусыСообщений = Неопределено тогда
		ИтогиТекДатаМинус3.ВыполненоВсего     = ИтогиТекДатаМинус3.ВыполненоВсего + стррДанные.СтатусыСообщений.Всего;	
		ИтогиТекДатаМинус3.ВыполненоСОшибками = ИтогиТекДатаМинус3.ВыполненоСОшибками + стррДанные.СтатусыСообщений.СОшибками;
		Если СОшибками > 0 Тогда
			СтрокаДерева.ТекДатаМинус3Статус = "СОшибками";
		ИначеЕсли Отправлено > 0 И Отправлено = Доставлено Тогда	
			СтрокаДерева.ТекДатаМинус3Статус = "БезОшибокДоставлено";
		ИначеЕсли Отправлено > 0 Тогда
			СтрокаДерева.ТекДатаМинус3Статус = "БезОшибок";
		КонецЕсли;
	КонецЕсли;
	
	//для ТекДатаМинус2
	
	ДатаДанных = Объект.ДатаОтчета - (2 * ЭтотОбъект.Сутки);
	стррДанные = соотвПолныеДанные.Получить(ДатаДанных);
	СОшибками = 0;
	Отправлено = 0;
	Доставлено = 0;
	Если Не стррДанные.ТипыСообщений = Неопределено тогда
		ТекущийИтогиПоТипамСообщений = ИтогиТекДатаМинус2.ИтогиПоТипамСообщений;
		Для каждого КлючИЗначение из стррДанные.ТипыСообщений Цикл 
			ТипСообщения = КлючИЗначение.Ключ;
			КоличествоСообщенийДанногоТипа = ТекущийИтогиПоТипамСообщений.Получить(ТипСообщения);
			СтруктураЗначения = КлючИЗначение.Значение;
			Если КоличествоСообщенийДанногоТипа = Неопределено тогда
				КоличествоСообщенийДанногоТипа = СтруктураЗначения.Количество; 
			иначе
				КоличествоСообщенийДанногоТипа = КоличествоСообщенийДанногоТипа + СтруктураЗначения.Количество;
			КонецЕсли;
			Если СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 И СтруктураЗначения.Доставлено > 0 Тогда
				Доставлено = Доставлено + 1;
				Отправлено = Отправлено + 1;
			ИначеЕсли СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 Тогда
				Отправлено = Отправлено + 1;
			Иначе
				СОшибками = СОшибками + 1;
			КонецЕсли;
			ТекущийИтогиПоТипамСообщений.Вставить(ТипСообщения, КоличествоСообщенийДанногоТипа);
		КонецЦикла;
		Если стррДанные.ТипыСообщений.Количество() = 1 Тогда
			Если стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.Email) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус2Картинка = 1;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.SMS) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус2Картинка = 3;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус2Картинка = 2;
			КонецЕсли;
		ИначеЕсли стррДанные.ТипыСообщений.Количество() > 1 Тогда 
			СтрокаДерева.ТекДатаМинус2Картинка = 4;
		КонецЕсли;
		СтрокаДерева.ТекДатаМинус2 = ПолучитьПредставлениеДанных(стррДанные.ТипыСообщений);
		
		ИтогиТекДатаМинус2.ИтогиПоТипамСообщений = ТекущийИтогиПоТипамСообщений;
	иначе
		СтрокаДерева.ТекДатаМинус2 = "";
	КонецЕсли;
	Если Не стррДанные.СтатусыСообщений = Неопределено тогда
		ИтогиТекДатаМинус2.ВыполненоВсего     = ИтогиТекДатаМинус2.ВыполненоВсего + стррДанные.СтатусыСообщений.Всего;	
		ИтогиТекДатаМинус2.ВыполненоСОшибками = ИтогиТекДатаМинус2.ВыполненоСОшибками + стррДанные.СтатусыСообщений.СОшибками;
		
		Если Не стррДанные.СтатусыСообщений = Неопределено тогда
			Если СОшибками > 0 Тогда
				СтрокаДерева.ТекДатаМинус2Статус = "СОшибками";
			ИначеЕсли Отправлено > 0 И Отправлено = Доставлено Тогда	
				СтрокаДерева.ТекДатаМинус2Статус = "БезОшибокДоставлено";
			ИначеЕсли Отправлено > 0 Тогда
				СтрокаДерева.ТекДатаМинус2Статус = "БезОшибок";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//для ТекДатаМинус1
	
	ДатаДанных = Объект.ДатаОтчета - ЭтотОбъект.Сутки;
	стррДанные = соотвПолныеДанные.Получить(ДатаДанных);
	СОшибками = 0;
	Отправлено = 0;
	Доставлено = 0;
	Если Не стррДанные.ТипыСообщений = Неопределено тогда
		ТекущийИтогиПоТипамСообщений = ИтогиТекДатаМинус1.ИтогиПоТипамСообщений;
		Для каждого КлючИЗначение из стррДанные.ТипыСообщений Цикл 
			ТипСообщения = КлючИЗначение.Ключ;
			КоличествоСообщенийДанногоТипа = ТекущийИтогиПоТипамСообщений.Получить(ТипСообщения);
			СтруктураЗначения = КлючИЗначение.Значение;
			Если КоличествоСообщенийДанногоТипа = Неопределено тогда
				КоличествоСообщенийДанногоТипа = СтруктураЗначения.Количество; 
			иначе
				КоличествоСообщенийДанногоТипа = КоличествоСообщенийДанногоТипа + СтруктураЗначения.Количество;
			КонецЕсли;
			Если СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 И СтруктураЗначения.Доставлено > 0 Тогда
				Доставлено = Доставлено + 1;
				Отправлено = Отправлено + 1;
			ИначеЕсли СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 Тогда
				Отправлено = Отправлено + 1;
			Иначе
				СОшибками = СОшибками + 1;
			КонецЕсли;
			ТекущийИтогиПоТипамСообщений.Вставить(ТипСообщения, КоличествоСообщенийДанногоТипа);
		КонецЦикла;
		Если стррДанные.ТипыСообщений.Количество() = 1 Тогда
			Если стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.Email) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус1Картинка = 1;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.SMS) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус1Картинка = 3;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение) <> неопределено Тогда
				СтрокаДерева.ТекДатаМинус1Картинка = 2;
			КонецЕсли;
		ИначеЕсли стррДанные.ТипыСообщений.Количество() > 1 Тогда 
			СтрокаДерева.ТекДатаМинус1Картинка = 4;
		КонецЕсли;
		СтрокаДерева.ТекДатаМинус1 = ПолучитьПредставлениеДанных(стррДанные.ТипыСообщений);
		
		ИтогиТекДатаМинус1.ИтогиПоТипамСообщений = ТекущийИтогиПоТипамСообщений;
	иначе
		СтрокаДерева.ТекДатаМинус1 = "";
	КонецЕсли;
	Если Не стррДанные.СтатусыСообщений = Неопределено тогда
		ИтогиТекДатаМинус1.ВыполненоВсего     = ИтогиТекДатаМинус1.ВыполненоВсего + стррДанные.СтатусыСообщений.Всего;	
		ИтогиТекДатаМинус1.ВыполненоСОшибками = ИтогиТекДатаМинус1.ВыполненоСОшибками + стррДанные.СтатусыСообщений.СОшибками;
		
		Если Не стррДанные.СтатусыСообщений = Неопределено тогда
			Если СОшибками > 0 Тогда
				СтрокаДерева.ТекДатаМинус1Статус = "СОшибками";
			ИначеЕсли Отправлено > 0 И Отправлено = Доставлено Тогда	
				СтрокаДерева.ТекДатаМинус1Статус = "БезОшибокДоставлено";
			ИначеЕсли Отправлено > 0 Тогда
				СтрокаДерева.ТекДатаМинус1Статус = "БезОшибок";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Текущая дата
	
	стррДанные = соотвПолныеДанные.Получить(Объект.ДатаОтчета);
	СОшибками = 0;
	Отправлено = 0;
	Доставлено = 0;
	Если Не стррДанные.ТипыСообщений = Неопределено тогда
		ТекущийИтогиПоТипамСообщений = ИтогиТекДата.ИтогиПоТипамСообщений;
		Для каждого КлючИЗначение из стррДанные.ТипыСообщений Цикл 
			ТипСообщения = КлючИЗначение.Ключ;
			КоличествоСообщенийДанногоТипа = ТекущийИтогиПоТипамСообщений.Получить(ТипСообщения);
			СтруктураЗначения = КлючИЗначение.Значение;
			Если КоличествоСообщенийДанногоТипа = Неопределено тогда
				КоличествоСообщенийДанногоТипа = СтруктураЗначения.Количество; 
			иначе
				КоличествоСообщенийДанногоТипа = КоличествоСообщенийДанногоТипа + СтруктураЗначения.Количество;
			КонецЕсли;
			Если СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 И СтруктураЗначения.Доставлено > 0 Тогда
				Доставлено = Доставлено + 1;
				Отправлено = Отправлено + 1;
			ИначеЕсли СтруктураЗначения.Количество > 0 И СтруктураЗначения.Отправлено > 0 Тогда
				Отправлено = Отправлено + 1;
			Иначе
				СОшибками = СОшибками + 1;
			КонецЕсли;
			ТекущийИтогиПоТипамСообщений.Вставить(ТипСообщения, КоличествоСообщенийДанногоТипа);
		КонецЦикла;
		Если стррДанные.ТипыСообщений.Количество() = 1 Тогда
			Если стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.Email) <> неопределено Тогда
				СтрокаДерева.ТекДатаКартинка = 1;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.SMS) <> неопределено Тогда
				СтрокаДерева.ТекДатаКартинка = 3;
			ИначеЕсли стррДанные.ТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение) <> неопределено Тогда
				СтрокаДерева.ТекДатаКартинка = 2;
			КонецЕсли;
		ИначеЕсли стррДанные.ТипыСообщений.Количество() > 1 Тогда 
			СтрокаДерева.ТекДатаКартинка = 4;
		КонецЕсли;
		СтрокаДерева.ТекДата = ПолучитьПредставлениеДанных(стррДанные.ТипыСообщений);
		
		ИтогиТекДата.ИтогиПоТипамСообщений = ТекущийИтогиПоТипамСообщений;
	иначе
		СтрокаДерева.ТекДата = "";
	КонецЕсли;
	
	Если Не стррДанные.СтатусыСообщений = Неопределено тогда
		ИтогиТекДата.ВыполненоВсего     = ИтогиТекДата.ВыполненоВсего + стррДанные.СтатусыСообщений.Всего;	
		ИтогиТекДата.ВыполненоСОшибками = ИтогиТекДата.ВыполненоСОшибками + стррДанные.СтатусыСообщений.СОшибками;
		
		Если Не стррДанные.СтатусыСообщений = Неопределено тогда
			Если СОшибками > 0 Тогда
				СтрокаДерева.ТекДатаСтатус = "СОшибками";
			ИначеЕсли Отправлено > 0 И Отправлено = Доставлено Тогда	
				СтрокаДерева.ТекДатаСтатус = "БезОшибокДоставлено";
			ИначеЕсли Отправлено > 0 Тогда
				СтрокаДерева.ТекДатаСтатус = "БезОшибок";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//тут по-другому заполняем
	//получим все данные за один раз
	Если Выборка.Партнер = null Тогда 
		лпПартнер = Выборка.Контрагент.Партнер;
	иначе
		лпПартнер = Выборка.Партнер;
	КонецЕсли;
	Если Объект.ДетализацияОтчета = 1 Тогда 
		соотвПолныеДанныеПлан = ПолучитьПолныеДанныеДляФормированияСобытияТАБАИД(Выборка.ВидДоговора,
		Выборка.СтатусПартнера,
		лпПартнер,
		Выборка.ЗаказКлиента,
		соотвДатаДеньНедели,
		СтрокаДерева.КоличествоДнейЗадолженности,Выборка.ДолгКлиента);
	Иначе 
		соотвПолныеДанныеПлан = ПолучитьПолныеДанныеДляФормированияСобытияТАБАИД(Выборка.ВидДоговора,
		Выборка.СтатусПартнера,
		лпПартнер,
		Неопределено,
		соотвДатаДеньНедели,
		СтрокаДерева.КоличествоДнейЗадолженности,Выборка.ДолгКлиента);
	КонецЕсли;
	
	//ТекДатаПлюс1
	стррДанные = соотвПолныеДанныеПлан.Получить("ТекДатаПлюс1");
	
	Если стррДанные.Количество() = 0 Тогда 
		СтрокаДерева.ТекДатаПлюс1 = "";
	Иначе 
		Если Объект.ДетализацияОтчета = 1 Тогда 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
			стррДанные = стррДанные.Скопировать(Отбор);
		Иначе 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
			стррДанные = стррДанные.Скопировать(Отбор);
		КонецЕсли;
		стррДанные.Свернуть("ВидДоговора,СтатусПартнера,Партнер,ОбъектРасчетов,ТипСообщения,ДеньНедели,КоличествоДнейЗадолженности,ШаблонСообщения,РазовоеУведомление,КлючРегламентногоЗадания,КлючПравила");
		МассивКлючейПравил = Новый Массив;
		Если стррДанные.Количество() = 1 Тогда 
			Если стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.Email тогда
				СтрокаДерева.ТекДатаПлюс1 = "Почта";
				СтрокаДерева.ТекДатаПлюс1Картинка = 1;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS тогда
				СтрокаДерева.ТекДатаПлюс1 = "SMS";
				СтрокаДерева.ТекДатаПлюс1Картинка = 3;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение тогда
				СтрокаДерева.ТекДатаПлюс1 = "ГС";
				СтрокаДерева.ТекДатаПлюс1Картинка = 2;
			КонецЕсли;
			МассивКлючейПравил.Добавить(стррДанные[0].КлючПравила);
			стррОтбора = Новый Структура("ВидДоговора, СтатусПартнера, Партнер, ОбъектРасчетов, ТипСообщения, ДеньНедели, КоличествоДнейЗадолженности, 
			|ШаблонСообщения, РазовоеУведомление, КлючРегламентногоЗадания, КлючПравила");
			
			ЗаполнитьЗначенияСвойств(стррОтбора, стррДанные[0]);
			стррОтбора.Вставить("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс1Отбор = стррОтбора;
			
		ИначеЕсли стррДанные.Количество() > 1 Тогда
			СтрокаДерева.ТекДатаПлюс1 = "";
			СтрокаДерева.ТекДатаПлюс1Картинка = 4;
			
			МассивКлючейПравил = стррДанные.ВыгрузитьКолонку("КлючПравила");
			стррОтбора = Новый Структура("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс1Отбор = стррОтбора;
		КонецЕсли;
		
	КонецЕсли;
	
	//ТекДатаПлюс2
	стррДанные = соотвПолныеДанныеПлан.Получить("ТекДатаПлюс2");
	
	Если стррДанные.Количество() = 0 Тогда 
		СтрокаДерева.ТекДатаПлюс2 = "";
	Иначе 
		Если Объект.ДетализацияОтчета = 1 Тогда 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
			стррДанные = стррДанные.Скопировать(Отбор);
		Иначе 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
			стррДанные = стррДанные.Скопировать(Отбор);
		КонецЕсли;
		стррДанные.Свернуть("ВидДоговора,СтатусПартнера,Партнер,ОбъектРасчетов,ТипСообщения,ДеньНедели,КоличествоДнейЗадолженности,ШаблонСообщения,РазовоеУведомление,КлючРегламентногоЗадания,КлючПравила");
		МассивКлючейПравил = Новый Массив;
		Если стррДанные.Количество() = 1 Тогда 
			Если стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.Email тогда
				СтрокаДерева.ТекДатаПлюс2 = "Почта";
				СтрокаДерева.ТекДатаПлюс2Картинка = 1;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS тогда
				СтрокаДерева.ТекДатаПлюс2 = "SMS";
				СтрокаДерева.ТекДатаПлюс2Картинка = 3;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение тогда
				СтрокаДерева.ТекДатаПлюс2 = "ГС";
				СтрокаДерева.ТекДатаПлюс2Картинка = 2;
			КонецЕсли;
			МассивКлючейПравил.Добавить(стррДанные[0].КлючПравила);
			стррОтбора = Новый Структура("ВидДоговора, СтатусПартнера, Партнер, ОбъектРасчетов, ТипСообщения, ДеньНедели, КоличествоДнейЗадолженности, 
			|ШаблонСообщения, РазовоеУведомление, КлючРегламентногоЗадания, КлючПравила");
			
			ЗаполнитьЗначенияСвойств(стррОтбора, стррДанные[0]);
			стррОтбора.Вставить("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс2Отбор = стррОтбора;
			
		ИначеЕсли стррДанные.Количество() > 1 Тогда
			СтрокаДерева.ТекДатаПлюс2 = "";
			СтрокаДерева.ТекДатаПлюс2Картинка = 4;
			
			МассивКлючейПравил = стррДанные.ВыгрузитьКолонку("КлючПравила");
			стррОтбора = Новый Структура("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс2Отбор = стррОтбора;
		КонецЕсли;
	КонецЕсли;
	
	//ТекДатаПлюс3
	стррДанные = соотвПолныеДанныеПлан.Получить("ТекДатаПлюс3");
	
	Если стррДанные.Количество() = 0 Тогда 
		СтрокаДерева.ТекДатаПлюс3 = "";
	Иначе 
		Если Объект.ДетализацияОтчета = 1 Тогда 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
			стррДанные = стррДанные.Скопировать(Отбор);
		Иначе 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
			стррДанные = стррДанные.Скопировать(Отбор);
		КонецЕсли;
		стррДанные.Свернуть("ВидДоговора,СтатусПартнера,Партнер,ОбъектРасчетов,ТипСообщения,ДеньНедели,КоличествоДнейЗадолженности,ШаблонСообщения,РазовоеУведомление,КлючРегламентногоЗадания,КлючПравила");
		МассивКлючейПравил = Новый Массив;
		Если стррДанные.Количество() = 1 Тогда 
			Если стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.Email тогда
				СтрокаДерева.ТекДатаПлюс3 = "Почта";
				СтрокаДерева.ТекДатаПлюс3Картинка = 1;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS тогда
				СтрокаДерева.ТекДатаПлюс3 = "SMS";
				СтрокаДерева.ТекДатаПлюс3Картинка = 3;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение тогда
				СтрокаДерева.ТекДатаПлюс3 = "ГС";
				СтрокаДерева.ТекДатаПлюс3Картинка = 2;
			КонецЕсли;
			МассивКлючейПравил.Добавить(стррДанные[0].КлючПравила);
			стррОтбора = Новый Структура("ВидДоговора, СтатусПартнера, Партнер, ОбъектРасчетов, ТипСообщения, ДеньНедели, КоличествоДнейЗадолженности, 
			|ШаблонСообщения, РазовоеУведомление, КлючРегламентногоЗадания, КлючПравила");
			
			ЗаполнитьЗначенияСвойств(стррОтбора, стррДанные[0]);
			стррОтбора.Вставить("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс3Отбор = стррОтбора;
			
		ИначеЕсли стррДанные.Количество() > 1 Тогда
			СтрокаДерева.ТекДатаПлюс3 = "";
			СтрокаДерева.ТекДатаПлюс3Картинка = 4;
			
			МассивКлючейПравил = стррДанные.ВыгрузитьКолонку("КлючПравила");
			стррОтбора = Новый Структура("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс3Отбор = стррОтбора;
		КонецЕсли;
	КонецЕсли;
	
	//ТекДатаПлюс4
	стррДанные = соотвПолныеДанныеПлан.Получить("ТекДатаПлюс4");
	
	Если стррДанные.Количество() = 0 Тогда 
		СтрокаДерева.ТекДатаПлюс4 = "";
	Иначе 
		Если Объект.ДетализацияОтчета = 1 Тогда 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Истина);
			стррДанные = стррДанные.Скопировать(Отбор);
		Иначе 
			Отбор = Новый Структура;
			Отбор.Вставить("ДетализироватьПоОбъектамРасчетов",Ложь);
			стррДанные = стррДанные.Скопировать(Отбор);
		КонецЕсли;
		стррДанные.Свернуть("ВидДоговора,СтатусПартнера,Партнер,ОбъектРасчетов,ТипСообщения,ДеньНедели,КоличествоДнейЗадолженности,ШаблонСообщения,РазовоеУведомление,КлючРегламентногоЗадания,КлючПравила");
		МассивКлючейПравил = Новый Массив;
		Если стррДанные.Количество() = 1 Тогда 
			Если стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.Email тогда
				СтрокаДерева.ТекДатаПлюс4 = "Почта";
				СтрокаДерева.ТекДатаПлюс4Картинка = 1;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS тогда
				СтрокаДерева.ТекДатаПлюс4 = "SMS";
				СтрокаДерева.ТекДатаПлюс4Картинка = 3;
			ИначеЕсли стррДанные[0].ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение тогда
				СтрокаДерева.ТекДатаПлюс4 = "ГС";
				СтрокаДерева.ТекДатаПлюс4Картинка = 2;
			КонецЕсли;
			МассивКлючейПравил.Добавить(стррДанные[0].КлючПравила);
			стррОтбора = Новый Структура("ВидДоговора, СтатусПартнера, Партнер, ОбъектРасчетов, ТипСообщения, ДеньНедели, КоличествоДнейЗадолженности, 
			|ШаблонСообщения, РазовоеУведомление, КлючРегламентногоЗадания, КлючПравила");
			
			ЗаполнитьЗначенияСвойств(стррОтбора, стррДанные[0]);
			стррОтбора.Вставить("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс4Отбор = стррОтбора;
			
		ИначеЕсли стррДанные.Количество() > 1 Тогда
			СтрокаДерева.ТекДатаПлюс4 = "";
			СтрокаДерева.ТекДатаПлюс4Картинка = 4;
			
			МассивКлючейПравил = стррДанные.ВыгрузитьКолонку("КлючПравила");
			стррОтбора = Новый Структура("МассивКлючейПравил",МассивКлючейПравил);
			СтрокаДерева.ТекДатаПлюс4Отбор = стррОтбора;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеРасчетов()
	
	ИдентификаторЗаданияРаспределенияРасчетов = ВыполнитьРаспределениеРасчетов();
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеРаспределенияРасчетов", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗаданияРаспределенияРасчетов);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРаспределениеРасчетов()
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполнение отложенных движений по расчетам с клиентами\поставщиками'");
	
	Задание = ФоновыеЗадания.Выполнить("РаспределениеВзаиморасчетовВызовСервера.ОтложенноеПроведениеПоРасчетамСПартнерами",
	,, НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	ИдентификаторЗаданияРаспределенияРасчетов = Задание.УникальныйИдентификатор;
	
	Возврат ИдентификаторЗаданияРаспределенияРасчетов;
	
КонецФункции

&НаСервере
Функция ПолучитьОрганизацииДЗ()
	
	МассивОрганизаций = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (ИСТИНА)
	|ГДЕ
	|	табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	табАид_Настройки.Организация
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки
	|ГДЕ
	|	НЕ табАид_Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|";
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаРез из Результат Цикл
		МассивОрганизаций.Добавить(СтрокаРез.Организация);
	КонецЦикла;
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеНаСервере()
	
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(ВременныеТаблицы, Объект.ДатаОтчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьТекстЗапросаДебиторскойЗадолженности(Объект.ДанныеОтчета,Объект.ДетализацияОтчета);
	
	СтрокаУпорядочения = "";
	СтрокаИтогов = "";
	
	Если Объект.ДетализацияОтчета <> 1 Тогда 
		НайденныйЭлемент = ЭтотОбъект.НастройкаИерархии.НайтиПоЗначению("Контрагент");
		Если НайденныйЭлемент = Неопределено Тогда
			ЭтотОбъект.НастройкаИерархии.Добавить("Контрагент");
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.РасчетныйДокумент КАК РасчетныйДокумент,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.ЗаказКлиента КАК ЗаказКлиента,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.Договор КАК Договор,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.Валюта КАК Валюта,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтоговыеДанные.Валюта КАК Валюта,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтоговыеДанные.Валюта,","");   
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.КонтактноеЛицо КАК КонтактноеЛицо,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЕСТЬNULL(втИтогиДанные.ДатаПлатежа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПлатежа,","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.ДолгКлиента КАК ДолгКлиента","СУММА(втИтогиДанные.ДолгКлиента) КАК ДолгКлиента");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.ДолгКлиентаВВалютеОтчета КАК ДолгКлиентаВВалютеОтчета","СУММА(втИтогиДанные.ДолгКлиентаВВалютеОтчета) КАК ДолгКлиентаВВалютеОтчета");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.ДолгКлиентаПросрочено КАК ДолгКлиентаПросрочено","СУММА(втИтогиДанные.ДолгКлиентаПросрочено) КАК ДолгКлиентаПросрочено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"втИтогиДанные.ДолгКлиентаПросроченоВВалютеОтчета КАК ДолгКлиентаПросроченоВВалютеОтчета","СУММА(втИтогиДанные.ДолгКлиентаПросроченоВВалютеОтчета) КАК ДолгКлиентаПросроченоВВалютеОтчета");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЕСТЬNULL(втИтогиДанные.КоличествоДней, 0) КАК КоличествоДней","МИНИМУМ(ЕСТЬNULL(втИтогиДанные.КоличествоДней, 0)) КАК КоличествоДней");
		
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС +"СГРУППИРОВАТЬ ПО втИтогиДанные.Партнер,втИтогиДанные.Организация ,втИтогиДанные.Контрагент,втИтогиДанные.ВидДоговора,втИтогиДанные.ДатаПлатежаПлан,втИтогиДанные.ИнтервалЗадолженности,втИтогиДанные.НомерИнтервала,втИтогиДанные.НижняяГраницаИнтервала,ВЫБОР КОГДА СписокИсключений.Партнер ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ"; 
		Иначе 
			Запрос.Текст = Запрос.Текст + Символы.ПС +"СГРУППИРОВАТЬ ПО втИтогиДанные.Партнер,втИтогиДанные.СегментПартнеров,втИтогиДанные.Организация ,втИтогиДанные.Контрагент,втИтогиДанные.ВидДоговора,втИтогиДанные.ДатаПлатежаПлан,втИтогиДанные.ИнтервалЗадолженности,втИтогиДанные.НомерИнтервала,втИтогиДанные.НижняяГраницаИнтервала,втИтогиДанные.КонтактноеЛицо,ВЫБОР КОГДА СписокИсключений.Партнер ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ"; 
		КонецЕсли;
	Иначе 
		НайденныйЭлемент = ЭтотОбъект.НастройкаИерархии.НайтиПоЗначению("Контрагент");
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭтотОбъект.НастройкаИерархии.Удалить(НайденныйЭлемент);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ЭлементИерархии из ЭтотОбъект.НастройкаИерархии Цикл
		СтрокаУпорядочения = СтрокаУпорядочения + ЭлементИерархии.Значение + ", ";
		СтрокаИтогов = СтрокаИтогов + ЭлементИерархии.Значение + ", ";
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаУпорядочения) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "УПОРЯДОЧИТЬ ПО КоличествоДней УБЫВ, Партнер УБЫВ," + Лев(СтрокаУпорядочения, СтрДлина(СтрокаИтогов) - 2);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаИтогов) Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ИТОГИ МАКСИМУМ(КоличествоДней),Сумма(ДолгКлиента),Сумма(ДолгКлиентаВвалютеОтчета), Сумма(ДолгКлиентаПросрочено),Сумма(ДолгКлиентаПросроченоВВалютеОтчета) ПО " + Лев(СтрокаИтогов, СтрДлина(СтрокаИтогов) - 2);
	КонецЕсли;
	КолонкаДляВыводаИтогов = ЭтотОбъект.НастройкаИерархии.Получить(0);
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("ПраваяГраницаОтчета",                  КонецДня((Объект.ДатаОтчета + 4*ЭтотОбъект.Сутки)));
	Запрос.УстановитьПараметр("ДатаОтчета",                           КонецДня(Объект.ДатаОтчета));
	Запрос.УстановитьПараметр("ДатаОстатков",                         Новый Граница(КонецДня(Объект.ДатаОтчета), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Валюта",                               Объект.Валюта);
	Запрос.УстановитьПараметр("ДанныеОтчета",                         Объект.ДанныеОтчета);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуПартнеров", Ложь);
	Запрос.УстановитьПараметр("Календарь",                            Объект.ВариантКлассификации.Календарь);
	Запрос.УстановитьПараметр("ВсеДолги",                             ЭтотОбъект.ВсеДолги);
	Запрос.УстановитьПараметр("СтрокаДолгНеПросрочен",                "0 дней");
	Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности",    Объект.ВариантКлассификации);
	Запрос.УстановитьПараметр("ВключатьЗадолженность", 				  ВключатьЗадолженность);
	Запрос.УстановитьПараметр("ДатаОтчетаГраница", 				      КонецДня((Объект.ДатаОтчета + 4*ЭтотОбъект.Сутки)));
	Запрос.УстановитьПараметр("СтрокаСостояниеВзаиморасчетов", 		  НСтр("ru='Состояние взаиморасчетов'"));
	Запрос.УстановитьПараметр("ДатаАктуальностиДЗ", 				  ПолучитьДатуАктуальностиДЗ());
	МассивОрганизаций = ПолучитьОрганизацииДЗ();
	Если Организации <> ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		МассивОрганизаций.Очистить();
		МассивОрганизаций.Добавить(Организации);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организации", 					  МассивОрганизаций);
	Если Контрагент <> ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда 
		Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТаблицаЗадолженностей.Контрагент В (&Контрагент)","");
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ДеревоДанных");
	Дерево.Строки.Очистить();
	
	ИтогиТекДатаМинус3 = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений", 0, 0, Новый Соответствие);
	ИтогиТекДатаМинус2 = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений", 0, 0, Новый Соответствие);
	ИтогиТекДатаМинус1 = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений", 0, 0, Новый Соответствие);
	ИтогиТекДата       = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений", 0, 0, Новый Соответствие);
	ИтогиТекДатаПлюс1  = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений", 0, 0, Новый Соответствие);
	ИтогиТекДатаПлюс2  = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений" ,0, 0, Новый Соответствие);
	ИтогиТекДатаПлюс3  = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений" ,0, 0, Новый Соответствие);
	ИтогиТекДатаПлюс4  = Новый Структура("ВыполненоВсего, ВыполненоСОшибками, ИтогиПоТипамСообщений" ,0, 0, Новый Соответствие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() тогда
		
		соотвПартнерКонтакт      = новый Соответствие;
		соотвКонтактТелефонЕмайл = новый Соответствие;
		соотвДатаДеньНедели      = новый Соответствие;
		Для к = 1 по 4 Цикл
			соотвДатаДеньНедели.Вставить("ТекДатаПлюс" + к, ДеньНедели(Объект.ДатаОтчета + к * ЭтотОбъект.Сутки));
		КонецЦикла;
		
		Если ЭтотОбъект.НастройкаИерархии.Количество() = 5 тогда
			Поле1Уровня = ЭтотОбъект.НастройкаИерархии.Получить(0).Значение;
			Поле2Уровня = ЭтотОбъект.НастройкаИерархии.Получить(1).Значение;
			Поле3Уровня = ЭтотОбъект.НастройкаИерархии.Получить(2).Значение;
			Поле4Уровня = ЭтотОбъект.НастройкаИерархии.Получить(3).Значение;
			Поле5Уровня = ЭтотОбъект.НастройкаИерархии.Получить(4).Значение;
			итДолг = 0;
			
			Выборка1Уровня = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка1Уровня.Следующий() Цикл
				
				итДолг = итДолг + Выборка1Уровня.ДолгКлиентаВВалютеОтчета;
				Новаястрока0уровня = Дерево.Строки.Добавить();
				Новаястрока0уровня[Поле1Уровня] = Выборка1Уровня[Поле1Уровня];
				
				Выборка2Уровня = Выборка1Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				пока Выборка2Уровня.Следующий() Цикл
					
					Новаястрока1уровня = Новаястрока0уровня.Строки.Добавить();
					Новаястрока1уровня[Поле1Уровня] = Выборка2Уровня[Поле2Уровня];
					
					Выборка3Уровня = Выборка2Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Выборка3Уровня.Следующий() Цикл
						
						Новаястрока2уровня = Новаястрока1уровня.Строки.Добавить();
						Новаястрока2уровня[Поле1Уровня] = Выборка3Уровня[Поле3Уровня];
						
						Выборка4Уровня = Выборка3Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока Выборка4Уровня.Следующий() Цикл
							Новаястрока3уровня = Новаястрока2уровня.Строки.Добавить();
							Новаястрока3уровня[Поле1Уровня] = Выборка4Уровня[Поле4Уровня];
							Выборка5Уровня = Выборка4Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока Выборка5Уровня.Следующий() Цикл
								Если Объект.ДетализацияОтчета = 1 Тогда 	
									Новаястрока4уровня = Новаястрока3уровня.Строки.Добавить();
									Новаястрока3уровня[Поле1Уровня] = Выборка5Уровня[Поле5Уровня];
									
									Выборка = Выборка5Уровня.Выбрать();
									Пока Выборка.Следующий() Цикл
										
										Новаястрока4уровня = Новаястрока3уровня.Строки.Добавить();
										ЗаполнитьСтрокуДереваИзВыборка(Новаястрока4уровня, Выборка, 
										соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
										ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
										ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
									КонецЦикла;
								Иначе
									
									Выборка = Выборка5Уровня.Выбрать();
									Пока Выборка.Следующий() Цикл
										
										Новаястрока4уровня = Новаястрока3уровня.Строки.Добавить();
										ЗаполнитьСтрокуДереваИзВыборка(Новаястрока4уровня, Выборка, 
										соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
										ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
										ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли ЭтотОбъект.НастройкаИерархии.Количество() = 4 тогда
			Поле1Уровня = ЭтотОбъект.НастройкаИерархии.Получить(0).Значение;
			Поле2Уровня = ЭтотОбъект.НастройкаИерархии.Получить(1).Значение;
			Поле3Уровня = ЭтотОбъект.НастройкаИерархии.Получить(2).Значение;
			Поле4Уровня = ЭтотОбъект.НастройкаИерархии.Получить(3).Значение;
			итДолг = 0;
			
			Выборка1Уровня = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка1Уровня.Следующий() Цикл
				итДолг = итДолг + Выборка1Уровня.ДолгКлиентаВВалютеОтчета;
				Новаястрока0уровня = Дерево.Строки.Добавить();
				Новаястрока0уровня[Поле1Уровня] = Выборка1Уровня[Поле1Уровня];
				
				Выборка2Уровня = Выборка1Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка2Уровня.Следующий() Цикл
					
					Новаястрока1уровня = Новаястрока0уровня.Строки.Добавить();
					Новаястрока1уровня[Поле1Уровня] = Выборка2Уровня[Поле2Уровня];
					Выборка3Уровня = Выборка2Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Выборка3Уровня.Следующий() Цикл
						
						Новаястрока2уровня = Новаястрока1уровня.Строки.Добавить();
						Новаястрока2уровня[Поле1Уровня] = Выборка3Уровня[Поле3Уровня];
						
						Выборка4Уровня = Выборка3Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока Выборка4Уровня.Следующий() Цикл
							Если Объект.ДетализацияОтчета = 1 Тогда 	
								Новаястрока3уровня = Новаястрока2уровня.Строки.Добавить();
								Новаястрока3уровня[Поле1Уровня] = Выборка4Уровня[Поле4Уровня];
								
								Выборка = Выборка4Уровня.Выбрать();
								Пока Выборка.Следующий() Цикл
									
									Новаястрока3уровня = Новаястрока3уровня.Строки.Добавить();
									ЗаполнитьСтрокуДереваИзВыборка(Новаястрока3уровня, Выборка, 
									соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
									ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
									ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
								КонецЦикла;
							Иначе
								
								Выборка = Выборка4Уровня.Выбрать();
								Пока Выборка.Следующий() Цикл
									Новаястрока3уровня = Новаястрока2уровня.Строки.Добавить();
									
									ЗаполнитьСтрокуДереваИзВыборка(Новаястрока3уровня, Выборка, 
									соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
									ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
									ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ЭтотОбъект.НастройкаИерархии.Количество() = 3 тогда
			Поле1Уровня = ЭтотОбъект.НастройкаИерархии.Получить(0).Значение;
			Поле2Уровня = ЭтотОбъект.НастройкаИерархии.Получить(1).Значение;
			Поле3Уровня = ЭтотОбъект.НастройкаИерархии.Получить(2).Значение;
			итДолг = 0;
			
			Выборка1Уровня = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка1Уровня.Следующий() Цикл
				итДолг = итДолг + Выборка1Уровня.ДолгКлиентаВВалютеОтчета;
				Новаястрока0уровня = Дерево.Строки.Добавить();
				Новаястрока0уровня[Поле1Уровня] = Выборка1Уровня[Поле1Уровня];
				
				Выборка2Уровня = Выборка1Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				пока Выборка2Уровня.Следующий() Цикл
					
					Новаястрока1уровня = Новаястрока0уровня.Строки.Добавить();
					Новаястрока1уровня[Поле1Уровня] = Выборка2Уровня[Поле2Уровня];
					
					Выборка3Уровня = Выборка2Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока Выборка3Уровня.Следующий() Цикл
						Если Объект.ДетализацияОтчета = 1 Тогда 
							Новаястрока2уровня = Новаястрока1уровня.Строки.Добавить();
							Новаястрока2уровня[Поле1Уровня] = Выборка3Уровня[Поле3Уровня];
							
							Выборка = Выборка3Уровня.Выбрать();
							Пока Выборка.Следующий() Цикл
								
								Новаястрока3уровня = Новаястрока2уровня.Строки.Добавить();
								ЗаполнитьСтрокуДереваИзВыборка(Новаястрока3уровня, Выборка, 
								соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
								ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
								ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
							КонецЦикла;
							
							
						Иначе 
							Выборка = Выборка3Уровня.Выбрать();
							Пока Выборка.Следующий() Цикл
								Новаястрока3уровня = Новаястрока1уровня.Строки.Добавить();
								ЗаполнитьСтрокуДереваИзВыборка(Новаястрока3уровня, Выборка, 
								соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
								ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
								ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ЭтотОбъект.НастройкаИерархии.Количество() = 2 тогда
			Поле1Уровня = ЭтотОбъект.НастройкаИерархии.Получить(0).Значение;
			Поле2Уровня = ЭтотОбъект.НастройкаИерархии.Получить(1).Значение;
			итДолг = 0;
			Выборка1Уровня = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка1Уровня.Следующий() Цикл
				
				итДолг = итДолг + Выборка1Уровня.ДолгКлиентаВВалютеОтчета;
				Новаястрока0уровня = Дерево.Строки.Добавить();
				Новаястрока0уровня[Поле1Уровня] = Выборка1Уровня[Поле1Уровня];
				
				Выборка2Уровня = Выборка1Уровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока Выборка2Уровня.Следующий() Цикл
					Новаястрока1уровня = Новаястрока0уровня.Строки.Добавить();
					Новаястрока1уровня[Поле1Уровня] = Выборка2Уровня[Поле2Уровня];
					
					Выборка = Выборка2Уровня.Выбрать();
					Пока Выборка.Следующий() Цикл
						Новаястрока2уровня = Новаястрока1уровня.Строки.Добавить();
						ЗаполнитьСтрокуДереваИзВыборка(Новаястрока2уровня, Выборка, 
						соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
						ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
						ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		иначе
			Поле1Уровня = ЭтотОбъект.НастройкаИерархии.Получить(0).Значение;
			ВыборкаИнтервал = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			пока ВыборкаИнтервал.Следующий() Цикл
				итДолг = ВыборкаИнтервал.ДолгКлиентаВВалютеОтчета;
				Новаястрока0уровня = Дерево.Строки.Добавить();
				Новаястрока0уровня[Поле1Уровня] = ВыборкаИнтервал[Поле1Уровня];
				Выборка = ВыборкаИнтервал.Выбрать();
				Пока Выборка.Следующий() Цикл
					Новаястрока1уровня = Новаястрока0уровня.Строки.Добавить();
					ЗаполнитьСтрокуДереваИзВыборка(Новаястрока1уровня, Выборка, 
					соотвПартнерКонтакт, соотвКонтактТелефонЕмайл, соотвДатаДеньНедели,
					ИтогиТекДатаМинус3, ИтогиТекДатаМинус2, ИтогиТекДатаМинус1, ИтогиТекДата,
					ИтогиТекДатаПлюс1, ИтогиТекДатаПлюс2, ИтогиТекДатаПлюс3, ИтогиТекДатаПлюс4);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
		
		Дерево.Строки[0].ТекДатаМинус3 = ?(ИтогиТекДатаМинус3.ИтогиПоТипамСообщений.Количество() = 0 , "", ПолучитьПредставлениеДанных(ИтогиТекДатаМинус3.ИтогиПоТипамСообщений)
		+ Символы.ПС + "Выполнено " + ИтогиТекДатаМинус3.ВыполненоВсего 
		+ ?(ИтогиТекДатаМинус3.ВыполненоСОшибками = 0 , "", "(с ошибками " + ИтогиТекДатаМинус3.ВыполненоСОшибками + ")"));
		Дерево.Строки[0].ТекДатаМинус2 = ?(ИтогиТекДатаМинус2.ИтогиПоТипамСообщений.Количество() = 0 , "", ПолучитьПредставлениеДанных(ИтогиТекДатаМинус2.ИтогиПоТипамСообщений)
		+ Символы.ПС + "Выполнено " + ИтогиТекДатаМинус2.ВыполненоВсего 
		+ ?(ИтогиТекДатаМинус2.ВыполненоСОшибками = 0 , "", "(с ошибками " + ИтогиТекДатаМинус2.ВыполненоСОшибками + ")"));
		Дерево.Строки[0].ТекДатаМинус1 = ?(ИтогиТекДатаМинус1.ИтогиПоТипамСообщений.Количество() = 0 , "", ПолучитьПредставлениеДанных(ИтогиТекДатаМинус1.ИтогиПоТипамСообщений)
		+ Символы.ПС + "Выполнено " + ИтогиТекДатаМинус1.ВыполненоВсего 
		+ ?(ИтогиТекДатаМинус1.ВыполненоСОшибками = 0 , "", "(с ошибками " + ИтогиТекДатаМинус1.ВыполненоСОшибками + ")"));
		Дерево.Строки[0].ТекДата       = ?(ИтогиТекДата.ИтогиПоТипамСообщений.Количество() = 0 , "", ПолучитьПредставлениеДанных(ИтогиТекДата.ИтогиПоТипамСообщений)
		+ Символы.ПС + "Выполнено " + ИтогиТекДата.ВыполненоВсего 
		+ ?(ИтогиТекДата.ВыполненоСОшибками = 0 , "", "(с ошибками " + ИтогиТекДата.ВыполненоСОшибками + ")"));
		
		Дерево.Строки[0].ТекДатаПлюс1 = ?(ИтогиТекДатаПлюс1.ИтогиПоТипамСообщений.Количество() = 0 , "", "Запланировано " 
		+ ПолучитьПредставлениеДанных(ИтогиТекДатаПлюс1.ИтогиПоТипамСообщений));
		Дерево.Строки[0].ТекДатаПлюс2 = ?(ИтогиТекДатаПлюс2.ИтогиПоТипамСообщений.Количество() = 0 , "", "Запланировано " 
		+ ПолучитьПредставлениеДанных(ИтогиТекДатаПлюс2.ИтогиПоТипамСообщений));
		Дерево.Строки[0].ТекДатаПлюс3 = ?(ИтогиТекДатаПлюс3.ИтогиПоТипамСообщений.Количество() = 0 , "", "Запланировано " 
		+ ПолучитьПредставлениеДанных(ИтогиТекДатаПлюс3.ИтогиПоТипамСообщений));
		Дерево.Строки[0].ТекДатаПлюс4 = ?(ИтогиТекДатаПлюс4.ИтогиПоТипамСообщений.Количество() = 0 , "", "Запланировано " 
		+ ПолучитьПредставлениеДанных(ИтогиТекДатаПлюс4.ИтогиПоТипамСообщений));										
	КонецЕсли;
	
	Если Не Элементы.Найти("ДеревоДанныхВидДоговора") = Неопределено тогда
		Элементы.Удалить(Элементы.Найти("ДеревоДанныхВидДоговора"));
	КонецЕсли;
	Если Не Элементы.Найти("ДеревоДанныхИнтервалЗадолженности") = Неопределено тогда
		Элементы.Удалить(Элементы.Найти("ДеревоДанныхИнтервалЗадолженности"));
	КонецЕсли;
	Если Не Элементы.Найти("ДеревоДанныхСтатусПартнера") = Неопределено тогда
		Элементы.Удалить(Элементы.Найти("ДеревоДанныхСтатусПартнера"));
	КонецЕсли;
	Если Не Элементы.Найти("ДеревоДанныхЭлементИерархии") = Неопределено тогда
		Элементы.Удалить(Элементы.Найти("ДеревоДанныхЭлементИерархии"));
	КонецЕсли;
	
	Если ЭтотОбъект.НастройкаИерархии.Количество() > 0 тогда
		МаксимальныйИндекс  = ЭтотОбъект.НастройкаИерархии.Количество() - 1;
		ПервыйЭлементДерева = Элементы["ДеревоДанныхПартнер"];
		
		// Формируем заголовок элемента.
		ТекстЗаголовок = "";
		Для Каждого ЭлементИерархии из ЭтотОбъект.НастройкаИерархии Цикл
			ТекстЗаголовок = ТекстЗаголовок + ?(ЗначениеЗаполнено(ТекстЗаголовок), "/", "") + ЭлементИерархии.Представление;
		КонецЦикла;
		
		ЭлементИерархии =  ЭтотОбъект.НастройкаИерархии.Получить(0).Значение;
		НовыйЭлементДерева = Элементы.Вставить("ДеревоДанныхЭлементИерархии", Тип("ПолеФормы"), Элементы.ДеревоДанных, ПервыйЭлементДерева);
		НовыйЭлементДерева.Вид                     = ВидПоляФормы.ПолеВвода;
		НовыйЭлементДерева.ПутьКДанным             = "ДеревоДанных." + ЭлементИерархии;
		НовыйЭлементДерева.КнопкаВыбора            = Ложь;
		НовыйЭлементДерева.КнопкаВыпадающегоСписка = Ложь;
		НовыйЭлементДерева.КнопкаОткрытия          = Истина;
		НовыйЭлементДерева.КнопкаОчистки           = Ложь;
		НовыйЭлементДерева.КнопкаРегулирования     = Ложь;
		НовыйЭлементДерева.КнопкаСоздания          = Ложь;
		НовыйЭлементДерева.ФиксацияВТаблице		   = ФиксацияВТаблице.Лево;
		НовыйЭлементДерева.Заголовок			   = "Иерархия";
		НовыйЭлементДерева.Ширина				   = 10;
		НовыйЭлементДерева.РастягиватьПоГоризонтали = Ложь;
		ПервыйЭлементДерева = НовыйЭлементДерева;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДанных");
	
	Если Объект.ДанныеОтчета = 1 Тогда 
		Элементы.ДекорацияИтог.Заголовок = "Итого сумма(регл.): " +Формат(итДолг,"ЧЦ=15; ЧДЦ=2") + " " +Объект.Валюта.Наименование ;		
	Иначе 
		Элементы.ДекорацияИтог.Заголовок = "Итого сумма(упр.): "  + Формат(итДолг,"ЧЦ=15; ЧДЦ=2")+ " " +Объект.Валюта.Наименование;		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	
	Если Не НоваяАрхитектураВзаиморасчетов() Тогда
		//тут нужно проверять, что расчеты не актуальны и выдавать сообщение
		ЭтотОбъект.ДатаАктуальностиРасчетов = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Дата(3999,11,30), , "РасчетыСКлиентами");
		ДатаАктуальности = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Объект.ДатаОтчета, , "РасчетыСКлиентами");
		
		Если Не ДатаАктуальности = Неопределено и ДатаАктуальности < Объект.ДатаОтчета Тогда 
			//Запускаем фоновое задание распределения расчетов.
			РаспределениеРасчетов();
			
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДанныеНаСервере();
	
	Элементы.ДеревоДанныхТекДатаМинус3Картинка.Заголовок = Формат(Объект.ДатаОтчета - 3*ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаМинус2Картинка.Заголовок = Формат(Объект.ДатаОтчета - 2*ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаМинус1Картинка.Заголовок = Формат(Объект.ДатаОтчета - ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаКартинка.Заголовок       = Формат(Объект.ДатаОтчета, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаКартинка.ЦветФонаЗаголовка = новый Цвет(197, 255, 185);
	Элементы.ДеревоДанныхТекДатаПлюс1Картинка.Заголовок  = Формат(Объект.ДатаОтчета + ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаПлюс2Картинка.Заголовок  = Формат(Объект.ДатаОтчета + 2*ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаПлюс3Картинка.Заголовок  = Формат(Объект.ДатаОтчета + 3*ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	Элементы.ДеревоДанныхТекДатаПлюс4Картинка.Заголовок  = Формат(Объект.ДатаОтчета + 4*ЭтотОбъект.Сутки, "ДФ='dd.MM ддд'; ДЛФ=D");
	
	СтандартныеПодсистемыКлиент.РазвернутьУзлыДерева(ЭтотОбъект, "ДеревоДанных", , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеРаспределенияРасчетов()
	
	Попытка
		Если ПроверитьВыполнениеРаспределенияРасчетов() Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			//Обновляем дату актуальности.
			ЭтотОбъект.ДатаАктуальностиРасчетов = РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(Дата(3999,11,30), , "РасчетыСКлиентами");
			ПолучитьДанныеНаСервере();
			Возврат;
		КонецЕсли;
		
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеРаспределенияРасчетов", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеРаспределенияРасчетов()
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗаданияРаспределенияРасчетов) Тогда 
		Возврат Истина;	
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПускРегламентныхЗаданийТАБАИД(Команда)
	Если Не НастройкаРегЗаданийВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выполните настройку регламентных заданий ТАБ АИД!'"));
		
		КлючЗаписиНастроек = ПолучитьКлючЗаписиНастроекРегЗаданий();
		Если КлючЗаписиНастроек = неопределено Тогда
			ОткрытьФорму("РегистрСведений.табАид_Настройки.ФормаЗаписи");
		Иначе
			ОткрытьФорму("РегистрСведений.табАид_Настройки.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиНастроек));
		КонецЕсли;
		
	КонецЕсли;
	
	ПускРегламентныхЗаданийТАБАИДНаСервере();
КонецПроцедуры

&НаСервере
Функция НастройкаРегЗаданийВыполнена()
	Возврат табАид_ОбщегоНазначенияПереопределяемый.НастройкаРегЗаданийВыполнена();
КонецФункции

&НаСервере
Функция ПолучитьКлючЗаписиНастроекРегЗаданий()
	
	Набор = РегистрыСведений.табАид_Настройки.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	Если Набор.Количество() = 1 Тогда
		Возврат РегистрыСведений.табАид_Настройки.СоздатьКлючЗаписи(Новый Структура("Организация", Справочники.Организации.ПустаяСсылка()));
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

&НаСервере
Процедура ПускРегламентныхЗаданийТАБАИДНаСервере()
	
	табАид_ОбщегоНазначенияПереопределяемый.ЗапускРегламентныхЗаданийТАБАИД();
	
	ОбновитьСписокКлючейРЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура СтопРегламентныхЗаданийТАБАИД(Команда)
	СтопРегламентныхЗаданийТАБАИДНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтопРегламентныхЗаданийТАБАИДНаСервере()
	
	табАид_ОбщегоНазначенияПереопределяемый.УдалениеРегламентныхЗаданийТАБАИД();
	
	ОбновитьСписокКлючейРЗ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеПравило()
	Если Не НастройкаРегЗаданийВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выполните настройку регламентных заданий ТАБ АИД!'"));
		КлючЗаписиНастроек = ПолучитьКлючЗаписиНастроекРегЗаданий();
		Если КлючЗаписиНастроек = неопределено Тогда
			ОткрытьФорму("РегистрСведений.табАид_Настройки.ФормаЗаписи");
		Иначе
			ОткрытьФорму("РегистрСведений.табАид_Настройки.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиНастроек));
		КонецЕсли;
		Возврат;	
	КонецЕсли;
	
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаДобавленияНовогоПравила", 
	Новый Структура("РазовоеУведомление,ДетализацияОтчета", Ложь,Объект.ДетализацияОтчета),,,,,,
	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеПравилоУведомления(Команда)
	ДобавитьНовоеПравило();	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентов()
	
	Если НоваяАрхитектураВзаиморасчетов() Тогда
		ОткрытьФорму("Отчет.ЗадолженностьКлиентовПоСрокам.Форма", 
		, 
		ЭтотОбъект, 
		Истина, 
		);
	Иначе
		ОткрытьФорму("Отчет.ДебиторскаяЗадолженность.Форма", 
		, 
		ЭтотОбъект, 
		Истина, 
		);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовПоСрокам(Команда)
	ЗадолженностьКлиентов();
КонецПроцедуры

&НаСервере
Функция НоваяАрхитектураВзаиморасчетов() 
	Возврат ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	ПолучитьДанные(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПериодМинус7(Команда)
	
	ПараметрыСмещения = Новый Структура("НаправлениеСмещения", -1);
	ЗавершениеВводаПериода = Новый ОписаниеОповещения("ИзменениеПериодаОтчетаЗавершение", ЭтотОбъект, ПараметрыСмещения);
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаВводаКоличестваДней", ПараметрыСмещения, ЭтотОбъект,,,,ЗавершениеВводаПериода, 
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПериодаОтчетаЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Не Ответ = Неопределено и ТипЗнч(Ответ) = Тип("Структура") тогда
		НаправлениеСмещения = Ответ.НаправлениеСмещения;
		КоличествоДней      = Ответ.КоличествоДней;
		Если КоличествоДней <> 0 тогда
			Объект.ДатаОтчета   = Объект.ДатаОтчета + КоличествоДней * НаправлениеСмещения * ЭтотОбъект.Сутки;
			
			Если Формат(Объект.ДатаОтчета,"ДФ=dd.MM.yyyy") <= Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") Тогда 
				Объект.ДатаОтчета = ТекущаяДата();
			КонецЕсли;
			
			ПолучитьДанные(Неопределено);
			ОбновитьПредставлениеПериода();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеПериода()
	НачалоПериода = Объект.ДатаОтчета - 3*24*60*60;
	КонецПериода = Объект.ДатаОтчета + 4*24*60*60;
	Элементы.ПериодСтрокой.Заголовок = Формат(НачалоПериода,"ДЛФ=Д") + " - " + Формат(КонецПериода,"ДЛФ=Д"); 
КонецПроцедуры

&НаКлиенте
Процедура ПериодПлюс7(Команда)
	
	ПараметрыСмещения = Новый Структура("НаправлениеСмещения", 1);
	ЗавершениеВводаПериода = Новый ОписаниеОповещения("ИзменениеПериодаОтчетаЗавершение", ЭтотОбъект, ПараметрыСмещения);
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаВводаКоличестваДней", ПараметрыСмещения, ЭтотОбъект,,,,ЗавершениеВводаПериода, 
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКИКонтактноеЛицоНаСервере(КонтактноеЛицо)
	
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;
	
	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", КонтактноеЛицо);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК ВидКИ,
	|	isnull(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтактногоЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	isnull(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	isnull(КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Почта", Выборка.ЗначениеКИ);
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
				ЕстьМобильныйТелефон = Истина;
			ИначеЕсли Не ЕстьМобильныйТелефон и Выборка.ВидКИ = 3 и Не ПустаяСтрока(Выборка.ЗначениеКИ) тогда
				Ответ.Вставить("Телефон", Выборка.ЗначениеКИ);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеКИПартнераНаСервере(Партнер)
	
	Ответ  = новый Структура("Почта, Телефон", "", "");
	Запрос = Новый Запрос;
	
	//Установка значений параметров
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	1 КАК ВидКИ,
	|	isnull(ПартнерыКонтактнаяИнформация.Представление, """") КАК ЗначениеКИ
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	isnull(КонтрагентыКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка.Партнер = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	isnull(ПартнерыКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПартнера)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	isnull(КонтрагентыКонтактнаяИнформация.Представление, """")
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка.Партнер = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента)
	|";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		ЕстьМобильныйТелефон = Ложь;
		пока Выборка.Следующий() Цикл
			Если Выборка.ВидКИ = 1 и Не ПустаяСтрока(Выборка.ЗначениеКИ) И Не ЗначениеЗаполнено(Ответ.Почта) Тогда
				Ответ.Почта = Выборка.ЗначениеКИ;
			ИначеЕсли Выборка.ВидКИ = 2 и Не ПустаяСтрока(Выборка.ЗначениеКИ) И Не ЗначениеЗаполнено(Ответ.Телефон) Тогда
				Ответ.Телефон = Выборка.ЗначениеКИ;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолныеДанныеЖурналаСобытий(Знач Партнер, Знач ДатаОтчета, Знач мСутки, Знач ОбъектРасчетов=Неопределено, Знач Сумма=Неопределено, Знач РасчетныйДокумент=Неопределено)
	
	//Получим данные по всем датам: Минус3, Минус2, Минус1, Минус0(текущая) в виде соответствия
	соотвДатаСобытие = новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	табАид_ЖурналСобытий.ТипСообщения КАК ТипСообщения,
	|	НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	СУММА(1) КАК Количество,
	|	СУММА(ВЫБОР КОГДА табАид_ЖурналСобытий.СтатусСобытия ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Отправлено,
	|	СУММА(ВЫБОР
	|			КОГДА табАид_ЖурналСобытий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.табАид_ТипыСообщений.Email)
	|				ТОГДА 1
	|			ИНАЧЕ ВЫБОР
	|					КОГДА табАид_ЖурналСобытий.СтатусДоставки
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Доставлено
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	табАид_ЖурналСобытий.Партнер = &Партнер
	|	И табАид_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
	|	И НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСобытия, ДЕНЬ, -3), ДЕНЬ) И НАЧАЛОПЕРИОДА(&ДатаСобытия, ДЕНЬ)
	|	И табАид_ЖурналСобытий.Сумма = &Сумма
	|	И табАид_ЖурналСобытий.РасчетныйДокумент = &РасчетныйДокумент
	
	|
	|СГРУППИРОВАТЬ ПО
	|	табАид_ЖурналСобытий.ТипСообщения,
	|	НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	табАид_ЖурналСобытий.СтатусСобытия КАК СтатусСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА табАид_ЖурналСобытий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.табАид_ТипыСообщений.Email)
	|				ТОГДА 1
	|			ИНАЧЕ ВЫБОР
	|					КОГДА табАид_ЖурналСобытий.СтатусДоставки
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК Доставлено,
	|	СУММА(1) КАК Количество,
	|	НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) КАК ДатаСобытия
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	табАид_ЖурналСобытий.Партнер = &Партнер
	|	И табАид_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
	|	И НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаСобытия, ДЕНЬ, -3), ДЕНЬ) И НАЧАЛОПЕРИОДА(&ДатаСобытия, ДЕНЬ)
	|	И табАид_ЖурналСобытий.Сумма = &Сумма
	|	И табАид_ЖурналСобытий.РасчетныйДокумент = &РасчетныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	табАид_ЖурналСобытий.СтатусСобытия,
	|	НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия";
	
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаОтчета);
	Если ОбъектРасчетов <> Неопределено Тогда 
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	иначе
		Запрос.УстановитьПараметр("ОбъектРасчетов", Неопределено);
	КонецЕсли;	
	
	Если РасчетныйДокумент <> Неопределено Тогда 
		Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
		
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И табАид_ЖурналСобытий.РасчетныйДокумент = &РасчетныйДокумент","");
	КонецЕсли;
	
	Если Сумма = Неопределено Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И табАид_ЖурналСобытий.Сумма = &Сумма", "");
	Иначе 
		Запрос.УстановитьПараметр("Сумма", Сумма);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаТипыСообщений    = РезультатыЗапроса[0].Выбрать();
	ВыборкаСтатусыСообщений = РезультатыЗапроса[1].Выбрать();
	
	Для й = 0 по 3 Цикл
		стррОтвет = Новый Структура("ТипыСообщений, СтатусыСообщений", Неопределено, Неопределено);
		
		мДатаСобытия = НачалоДня(ДатаОтчета - (й * мСутки));
		стррПоиска   = Новый Структура("ДатаСобытия", мДатаСобытия);
		
		ТипыСообщений = новый Соответствие;
		ВыборкаТипыСообщений.Сбросить();
		Пока ВыборкаТипыСообщений.найтиСледующий(стррПоиска) Цикл
			ТипыСообщений.Вставить(ВыборкаТипыСообщений.ТипСообщения, Новый Структура("Количество, Отправлено, Доставлено", ВыборкаТипыСообщений.Количество, ВыборкаТипыСообщений.Отправлено, ВыборкаТипыСообщений.Доставлено));
		КонецЦикла;
		стррОтвет.ТипыСообщений = ТипыСообщений;
		
		СтатусыСообщений   = новый Структура;
		ВыполненоВсего     = 0;
		ВыполненоСОшибками = 0;
		ДоставленоВсего    = 0;
		
		ВыборкаСтатусыСообщений.Сбросить();
		Пока ВыборкаСтатусыСообщений.найтиСледующий(стррПоиска) Цикл
			Если ВыборкаСтатусыСообщений.СтатусСобытия тогда
				ВыполненоВсего = ВыборкаСтатусыСообщений.Количество;
				ДоставленоВсего = ВыборкаСтатусыСообщений.Доставлено;
			иначе	
				ВыполненоСОшибками = ВыборкаСтатусыСообщений.Количество;
			КонецЕсли;
		КонецЦикла;
		СтатусыСообщений.Вставить("Всего", ВыполненоВсего + ВыполненоСОшибками);
		СтатусыСообщений.Вставить("СОшибками", ВыполненоСОшибками);
		СтатусыСообщений.Вставить("Доставлено", ДоставленоВсего);
		стррОтвет.СтатусыСообщений = СтатусыСообщений;
		
		соотвДатаСобытие.Вставить(мДатаСобытия, стррОтвет);
	КонецЦикла;
	
	Возврат соотвДатаСобытие;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолныеДанныеДляФормированияСобытияТАБАИД(Знач ВидДоговора, Знач СтатусПартнера, Знач Партнер, Знач ОбъектРасчетов, 
	Знач соотвДатаДеньНедели, Знач КоличествоДнейЗадолженности, Знач Сумма)
	
	//Получим данные по всем датам: Плюс1, Плюс2, Плюс3, Плюс4 в виде соответствия
	соотвДатаСобытие = новый Соответствие;
	
	Для Каждого КлючЗначение из соотвДатаДеньНедели Цикл
		//Кол-во дней задолженности расчитаны на текущий день.
		//Для ТекДатаПлюс1 это будет на 1 сутки больше
		//для ТекДатаПлюс2 это будет на 2 суток больше и т.д.
		СмещениеВСутках = Число(Прав(КлючЗначение.Ключ, 1));
		стррДанные = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьДанныеДляФормированияСобытияТАБАИД(ВидДоговора,
		СтатусПартнера,
		Партнер,
		ОбъектРасчетов,
		КлючЗначение.Значение,
		КоличествоДнейЗадолженности + СмещениеВСутках,Сумма);	
		соотвДатаСобытие.Вставить(КлючЗначение.Ключ, стррДанные);																						
	КонецЦикла;
	
	возврат соотвДатаСобытие;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеДанных(соотвТипыСообщений)
	
	Представление = "";
	СтруктураТипаКво = соотвТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.Email);
	Если Не СтруктураТипаКво = Неопределено тогда
		Если ТипЗнч(СтруктураТипаКво) = Тип("Структура") Тогда
			Представление = Представление + "Почта" + ?(СтруктураТипаКво.Количество = 1, "", "-" + СтруктураТипаКво.Количество) + ",";
		Иначе
			Представление = Представление + "Почта" + ?(СтруктураТипаКво = 1, "", "-" + СтруктураТипаКво) + ",";
		КонецЕсли;
	КонецЕсли;
	СтруктураТипаКво = соотвТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.SMS);
	Если Не СтруктураТипаКво = Неопределено тогда
		Если ТипЗнч(СтруктураТипаКво) = Тип("Структура") Тогда
			Представление = Представление + "SMS" + ?(СтруктураТипаКво.Количество = 1, "", "-" + СтруктураТипаКво.Количество) + ",";
		Иначе
			Представление = Представление + "SMS" + ?(СтруктураТипаКво = 1, "", "-" + СтруктураТипаКво) + ",";
		КонецЕсли;
	КонецЕсли;
	СтруктураТипаКво = соотвТипыСообщений.Получить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение);
	Если Не СтруктураТипаКво = Неопределено тогда
		Если ТипЗнч(СтруктураТипаКво) = Тип("Структура") Тогда
			Представление = Представление + "ГС" + ?(СтруктураТипаКво.Количество = 1, "", "-" + СтруктураТипаКво.Количество) + ",";
		Иначе
			Представление = Представление + "ГС" + ?(СтруктураТипаКво = 1, "", "-" + СтруктураТипаКво) + ",";
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(Представление) тогда
		Возврат Лев(Представление, СтрДлина(Представление) - 1);
	иначе
		Возврат Представление;
	КонецЕсли;
	
КонецФункции	

&НаКлиенте
Процедура ВыборИзСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗначение = Результат.Значение;
	Если      РезультатЗначение = "Что-то еще сделать..." тогда
		ПоказатьПредупреждение(, "Тут нужно придумать дальнейшие действия...");
		
	иначеЕсли РезультатЗначение = "ЖурналСобытий" тогда  
		стррОтбора = новый Структура;
		
		мПартнер        = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
		мОбъектРасчетов = Неопределено;
		мДатаСобытия    = Дата(1,1,1);
		
		Если ДополнительныеПараметры.СВойство("Партнер", мПартнер) и ЗначениеЗаполнено(мПартнер) тогда
			стррОтбора.Вставить("Партнер", мПартнер);
		КонецЕсли;
		Если ДополнительныеПараметры.СВойство("ОбъектРасчетов", мОбъектРасчетов) и ЗначениеЗаполнено(мОбъектРасчетов) тогда
			стррОтбора.Вставить("ОбъектРасчетов", мОбъектРасчетов);
		КонецЕсли;
		ПараметрыОткрытия = новый Структура("Отбор", стррОтбора);
		Если ДополнительныеПараметры.СВойство("ДатаСобытия", мДатаСобытия) и ЗначениеЗаполнено(мДатаСобытия) тогда
			ПараметрыОткрытия.Вставить("ДатаСобытия", мДатаСобытия);
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ТипСообщения") Тогда
			ТипСообщения = ДополнительныеПараметры.ТипСообщения;	
			Если ТипСообщения  = "П" Тогда
				ПараметрыОткрытия.Вставить("ТипСообщения", ПредопределенноеЗначение("Перечисление.табАид_ТипыСообщений.Email")); 
			ИначеЕсли ТипСообщения = "С" Тогда
				ПараметрыОткрытия.Вставить("ТипСообщения", ПредопределенноеЗначение("Перечисление.табАид_ТипыСообщений.SMS"));    
			ИначеЕсли ТипСообщения = "Т" Тогда
				ПараметрыОткрытия.Вставить("ТипСообщения", ПредопределенноеЗначение("Перечисление.табАид_ТипыСообщений.ГолосовоеСообщение"));    
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму("РегистрСведений.табАид_ЖурналСобытий.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
		
	ИначеЕсли РезультатЗначение = "ПравилаФормированияСобытий" тогда  
		Если ДополнительныеПараметры.Свойство("ТекущийОтбор") тогда
			Если ДополнительныеПараметры.ТекущийОтбор.МассивКлючейПравил.Количество() = 1 Тогда 
				
				ПараметрыОткрытия = новый Структура("Отбор", ДополнительныеПараметры.ТекущийОтбор);
				ОткрытьФорму("РегистрСведений.табАид_ПравилаФормированияСобытий.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект);
			Иначе
				ПараметрыОткрытия = новый Структура("ПараметрыЗаполнения,Валюта",ДополнительныеПараметры,Объект.Валюта);
				
				ОткрытьФорму("РегистрСведений.табАид_ПравилаФормированияСобытий.Форма.ФормаСпискаСПредварительныймПросмотром", ПараметрыОткрытия, ЭтотОбъект);
				
			КонецЕсли;
		иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка передачи параметров открытия формы списка Правил.");
		КонецЕсли;
		
	ИначеЕсли РезультатЗначение = "ЗапланироватьРазовоеУведомление" тогда  
		ПараметрыОткрытия = новый Структура("ПараметрыЗаполнения, РазовоеУведомление", ДополнительныеПараметры, Истина);
		ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаДобавленияНовогоПравила", ПараметрыОткрытия, ЭтотОбъект,,,,Новый ОписаниеОповещения("ДобавлениеНовогоПравилаЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли РезультатЗначение = "СформироватьИОтправитьСообщение" тогда
		СформироватьИОтправитьСообщение(ДополнительныеПараметры);
		
	ИначеЕсли СтрНайти(РезультатЗначение, "ОткрытиеСообщения_") > 0 тогда
		ОткрытиеСообщения(РезультатЗначение, ДополнительныеПараметры);
		
	ИначеЕсли РезультатЗначение = "ОткрытьЗначениеСправочникаПартнеры" тогда
		ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("Ключ", ДополнительныеПараметры.Партнер), ЭтотОбъект);
		
	ИначеЕсли РезультатЗначение = "ВключитьВРассылку" тогда
		ВключитьИсключитьПартнера(ДополнительныеПараметры.Партнер, РезультатЗначение);	
		
	ИначеЕсли РезультатЗначение = "ИсключитьИзРассылки" тогда
		ВключитьИсключитьПартнера(ДополнительныеПараметры.Партнер, РезультатЗначение);	
		
	ИначеЕсли РезультатЗначение = "ПредварительныйПросмотр" Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			и ДополнительныеПараметры.Свойство("ТекущийОтбор") тогда	
			ПараметрыОткрытия = новый Структура("ПараметрыЗаполнения", ДополнительныеПараметры);
			
			ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаПредварительногоПросмотра", 
			ПараметрыОткрытия, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		иначе
			ОбщегоНазначенияКлиент.СохранитьПерсональныеНастройки("Ошибка передачи данных в форму просмотра.");				
		КонецЕсли;
		
	ИначеЕсли РезультатЗначение = "ОбновитьСтатусыСообщений" Тогда
		ОбновитьСтатусыСообщений(ДополнительныеПараметры);
		ПолучитьДанныеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьСтатусыСообщений(ДопПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	табАид_ЖурналСобытий.Партнер КАК Партнер,
	|	табАид_ЖурналСобытий.ДатаВремяСобытия КАК ДатаВремяСобытия,
	|	табАид_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	табАид_ЖурналСобытий.УникальныйКлючЗаписи КАК УникальныйКлючЗаписи,
	|	табАид_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	табАид_ЖурналСобытий.КлючПравила КАК КлючПравила,
	|	табАид_ЖурналСобытий.ТипСообщения КАК ТипСообщения
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	табАид_ЖурналСобытий.ТипСообщения В(&ТипыСообщений)
	|	И НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) = &ДатаСобытия
	|	И табАид_ЖурналСобытий.Партнер = &Партнер
	|	И табАид_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
	|	И табАид_ЖурналСобытий.РасчетныйДокумент = &РасчетныйДокумент
	|	И табАид_ЖурналСобытий.Сумма = &Сумма
	
	|	И табАид_ЖурналСобытий.СтатусСобытия";
	
	Запрос.УстановитьПараметр("Партнер", ДопПараметры.Партнер);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ДопПараметры.ОбъектРасчетов);
	Запрос.УстановитьПараметр("РасчетныйДокумент",ДопПараметры.РасчетныйДокумент);
	Запрос.УстановитьПараметр("ДатаСобытия", НачалоДня(ДопПараметры.ДатаСобытия));
	Запрос.УстановитьПараметр("Сумма",ДопПараметры.Сумма);
	
	ТипыСообщений = Новый Массив;
	ТипыСообщений.Добавить(Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение);
	ТипыСообщений.Добавить(Перечисления.табАид_ТипыСообщений.SMS);
	Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для каждого СтрРез из Результат Цикл
		Если СтрРез.ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение Тогда 
			табАид_ОтправкаГолосовойПочты.СтатусДоставки(СтрРез.УникальныйКлючЗаписи);
		ИначеЕсли СтрРез.ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS Тогда
			табАид_ОтправкаSMS.СтатусДоставки(СтрРез.УникальныйКлючЗаписи);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеНовогоПравилаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ПолучитьДанные(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "ТекДата") тогда          //ВыбраннаяСтрока=0 это итоги, там обрабатывать не нужно
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Поле.Родитель.Родитель.ТекущиеДанные;
		ИмяРодителя   = Поле.Родитель.Родитель.Имя;
		ИмяПоляДЗ     = СтрЗаменить(Поле.Имя, ИмяРодителя, "");
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
			Возврат;
		иначе
			ИнформацияВЯчейке = ТекущиеДанные[СтрЗаменить(Поле.Имя, ИмяРодителя, "")];
			СписокВыбора      = Новый СписокЗначений;
			ДопПараметры      = Новый Структура;
			
			Если СтрНайти(Поле.Имя, "ТекДатаМинус") > 0 Тогда
				СмещениеДней = - Число(Сред(Поле.Имя, 25, 1));
				ДатаСобытия = НачалоДня(Объект.ДатаОтчета) + 24*60*60*СмещениеДней;
			ИначеЕсли СтрНайти(Поле.Имя, "ТекДатаПлюс") > 0 Тогда
				СмещениеДней = Число(Сред(Поле.Имя, 24, 1));
				ДатаСобытия = НачалоДня(Объект.ДатаОтчета) + 24*60*60*СмещениеДней;
			Иначе 
				ДатаСобытия       = табАид_ОбщегоНазначенияКлиент.ПреобразоватьСтрокуВДату(Поле.Заголовок);
			КонецЕсли;
			
			Если ТекущиеДанные["ИсключенИзРассылки"] Тогда
				Возврат;
			КонецЕсли;
			
			Если ИнформацияВЯчейке = 0 тогда
				
				Если ЗначениеЗаполнено(ТекущиеДанные["Партнер"]) и ЗначениеЗаполнено(ТекущиеДанные["ОбъектРасчетов"]) тогда
					Если СтрНайти(Поле.Имя, "ТекДатаПлюс") тогда
						СмещениеДней = Число(Сред(Поле.Имя, 24, 1));
						СписокВыбора.Добавить("ЗапланироватьРазовоеУведомление", "Запланировать разовое уведомление");
						ДопПараметры.Вставить("Партнер",          ТекущиеДанные["Партнер"]);
						ДопПараметры.Вставить("ОбъектРасчетов",   ТекущиеДанные["ОбъектРасчетов"]);
						ДопПараметры.Вставить("ДеньНедели",       ДеньНедели(ДатаСобытия));
						ДопПараметры.Вставить("КоличествоДнейЗадолженности", ТекущиеДанные["КоличествоДнейЗадолженности"] + СмещениеДней);
						ДопПараметры.Вставить("ДатаСобытия",ДатаСобытия);
						ДопПараметры.Вставить("ДетализацияОтчета",Объект.ДетализацияОтчета);
					КонецЕсли;
					
				ИначеЕсли  ЗначениеЗаполнено(ТекущиеДанные["Партнер"]) Тогда 
					Если СтрНайти(Поле.Имя, "ТекДатаПлюс") тогда
						СмещениеДней = Число(Сред(Поле.Имя, 24, 1));
						СписокВыбора.Добавить("ЗапланироватьРазовоеУведомление", "Запланировать разовое уведомление");
						ДопПараметры.Вставить("Партнер",          ТекущиеДанные["Партнер"]);
						ДопПараметры.Вставить("ОбъектРасчетов",   ТекущиеДанные["ОбъектРасчетов"]);
						ДопПараметры.Вставить("ДеньНедели",       ДеньНедели(ДатаСобытия));
						ДопПараметры.Вставить("КоличествоДнейЗадолженности", ТекущиеДанные["КоличествоДнейЗадолженности"] + СмещениеДней);
						ДопПараметры.Вставить("ДатаСобытия",ДатаСобытия);
						ДопПараметры.Вставить("ДетализацияОтчета",Объект.ДетализацияОтчета);
					КонецЕсли;
					
				КонецЕсли;	
			иначе	
				Если СтрНайти(Поле.Имя, "ТекДатаПлюс") тогда
					ИмяПоляДЗ = СтрЗаменить(ИмяПоляДЗ, "Картинка", "");
					Если ТипЗнч(ТекущиеДанные[ИмяПоляДЗ + "Отбор"]) = Тип("Структура") тогда
						СтруктураОтборы = ТекущиеДанные[ИмяПоляДЗ + "Отбор"];
						ДопПараметры.Вставить("ТекущийОтбор", ТекущиеДанные[ИмяПоляДЗ + "Отбор"]);
					КонецЕсли;
					
					Если ТекущиеДанные[ИмяПоляДЗ + "Отбор"].МассивКлючейПравил.Количество() > 1 Тогда 
						СписокВыбора.Добавить("ПравилаФормированияСобытий",      "Перейти к правилам формирования событий");
					Иначе 
						СписокВыбора.Добавить("ПравилаФормированияСобытий",      "Перейти к правилам формирования событий");
						СписокВыбора.Добавить("СформироватьИОтправитьСообщение", "Сформировать и отправить сообщение");
						СписокВыбора.Добавить("ПредварительныйПросмотр", 		 "Предварительный просмотр");
					КонецЕсли;
					
					ДопПараметры.Вставить("ДеньНедели", ДеньНедели(ДатаСобытия));
					ДопПараметры.Вставить("Партнер",        ТекущиеДанные["Партнер"]);
					ДопПараметры.Вставить("ОбъектРасчетов", ТекущиеДанные["ОбъектРасчетов"]);
					
					Если ТекущиеДанные["ВидДоговора"] = "<не выбран>" Тогда 
						ДопПараметры.Вставить("ВидДоговора",    "");
					Иначе 
						ДопПараметры.Вставить("ВидДоговора",    ТекущиеДанные["ВидДоговора"]);
					КонецЕсли; 
					ДопПараметры.Вставить("РасчетныйДокумент",ТекущиеДанные["РасчетныйДокумент"]);
					ДопПараметры.Вставить("СтатусПартнера", ТекущиеДанные["СтатусПартнера"]);
					ДопПараметры.Вставить("КоличествоДнейЗадолженности", ТекущиеДанные["КоличествоДнейЗадолженности"]);
					ДопПараметры.Вставить("Телефон",        ТекущиеДанные["Телефон"]);
					ДопПараметры.Вставить("Почта",          ТекущиеДанные["Почта"]);
					ДопПараметры.Вставить("Валюта",         Объект.Валюта);
					
					// Формирование структуры параметртов для отправки сообщений.
					ЗначенияРеквизитовСообщения = ПолучитьСтруктуруЗначенийПараметровДляСообщений();
					ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовСообщения, ТекущиеДанные);
					ЗначенияРеквизитовСообщения.Вставить("Валюта",         Объект.Валюта);
					ДопПараметры.Вставить("ЗначенияРеквизитовСообщения", ЗначенияРеквизитовСообщения);
					
				иначе	
					СписокВыбора.Добавить("ЖурналСобытий", "Перейти в журнал событий");
					СписокВыбора.Добавить("ОбновитьСтатусыСообщений", "Обновить статусы сообщений");
					ДопПараметры.Вставить("Партнер",        ТекущиеДанные["Партнер"]);
					ДопПараметры.Вставить("ОбъектРасчетов", ТекущиеДанные["ОбъектРасчетов"]);
					ДопПараметры.Вставить("ДатаСобытия",    ДатаСобытия); 
					ДопПараметры.Вставить("РасчетныйДокумент", ТекущиеДанные["РасчетныйДокумент"]);
					ДопПараметры.Вставить("Сумма", ТекущиеДанные["Сумма"]);
					
					
					ТипСообщения = Прав(Поле.Имя, 1);
					ДопПараметры.Вставить("ТипСообщения", ТипСообщения);
					
					соотвПолныеДанные = ПолучитьПолныеДанныеЖурналаСобытий(ТекущиеДанные["Партнер"], Объект.ДатаОтчета, ЭтотОбъект.Сутки, ТекущиеДанные["ОбъектРасчетов"],ТекущиеДанные["Сумма"]);
					стррДанные = соотвПолныеДанные.Получить(ДатаСобытия);
					
					ДобавитьСобытияВСписокДействий(ДопПараметры, СписокВыбора);
				КонецЕсли;
			КонецЕсли;
			
			Если СписокВыбора.Количество() тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтаФорма, ДопПараметры);
				ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора,Поле);
			КонецЕсли;	
			
		КонецЕсли;
	ИначеЕсли ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "Партнер") Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Поле.Родитель.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		иначе
			Если Не ЗначениеЗаполнено(ТекущиеДанные["Партнер"]) тогда
				Возврат;
			КонецЕсли;
			
			СписокВыбора      = Новый СписокЗначений;
			ДопПараметры      = Новый Структура;
			
			СписокВыбора.Добавить("ОткрытьЗначениеСправочникаПартнеры", "Открыть значение справочника");   
			Если ТекущиеДанные["ИсключенИзРассылки"] Тогда
				СписокВыбора.Добавить("ВключитьВРассылку", "Включить в рассылку");
			Иначе
				СписокВыбора.Добавить("ИсключитьИзРассылки", "Исключить из рассылки");   
			КонецЕсли;
			ДопПараметры.Вставить("Партнер", ТекущиеДанные["Партнер"]);
			Если СписокВыбора.Количество() тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИзСпискаЗавершение", ЭтаФорма, ДопПараметры);
				ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора,Поле);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "КонтактноеЛицо") Тогда
		ТекущиеДанные = Поле.Родитель.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		Иначе
			Если ТекущиеДанные.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка") Тогда 
				ЗначениеОтбора  = Новый Структура("Владелец", ТекущиеДанные.Партнер);
				ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
				ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаСписка",ПараметрыВыбора,ЭтотОбъект);
				ПолучитьДанные(Неопределено);
			Иначе 
				ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.КонтактноеЛицо), ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли  ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "Организация") Тогда
		ТекущиеДанные = Поле.Родитель.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		Иначе
			ОткрытьФорму("Справочник.Организации.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Организация), ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли  ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "Контрагент") Тогда
		ТекущиеДанные = Поле.Родитель.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		Иначе
			ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Контрагент), ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли  ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "ОбъектРасчетов") Тогда
		ТекущиеДанные = Поле.Родитель.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		Иначе
			Если ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
				ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			ИначеЕсли 	 ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
				ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			ИначеЕсли 	 ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда 
				ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			ИначеЕсли 	 ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.ОтчетДавальцу") Тогда 
				ОткрытьФорму("Документ.ОтчетДавальцу.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			ИначеЕсли 	 ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда 
				ОткрытьФорму("Документ.РеализацияУслугПрочихАктивов.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			ИначеЕсли 	 ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда 
				ОткрытьФорму("Документ.ОтчетКомиссионера.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			ИначеЕсли 	 ТипЗнч(ТекущиеДанные.ОбъектРасчетов) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда 
				ОткрытьФорму("Документ.ОтчетКомитенту.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ОбъектРасчетов), ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли  ВыбраннаяСтрока > 0 и СтрНайти(Поле.Имя, "Договор") Тогда
		ТекущиеДанные = Поле.Родитель.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено тогда
			Возврат;
		Иначе
			ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Договор), ЭтотОбъект); 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеДолгиПриИзменении(Элемент)
	ПолучитьДанные(Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЕстьЭлементУО_Итоги      = Ложь;
	ЕстьЭлементУО_ДатаИтогов = Ложь;
	Для Каждого ЭлементУО из УсловноеОформление.Элементы Цикл
		Если ЭлементУО.Представление = "табАид_ИТОГИ" тогда
			ЕстьЭлементУО_Итоги = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	ЭлементУсловногоОформления.Представление = "табАид_ИТОГИ";
	
	
	Если НЕ ЕстьЭлементУО_Итоги тогда
		
		
		ГруппаЭлементыУсловия = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементыУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
		ЭлементУсловия                = ГруппаЭлементыУсловия.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоДанных.ВидДоговора");
		ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементУсловия.ПравоеЗначение = "ИТОГИ";
		ЭлементУсловия.Использование  = Истина;
		
		ЭлементУсловия                = ГруппаЭлементыУсловия.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоДанных.ИнтервалЗадолженности");
		ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементУсловия.ПравоеЗначение = "ИТОГИ";
		ЭлементУсловия.Использование  = Истина;
		
		ЭлементУсловия                = ГруппаЭлементыУсловия.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоДанных.СтатусПартнера");
		ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементУсловия.ПравоеЗначение = "ИТОГИ";
		ЭлементУсловия.Использование  = Истина;
		
		ОформляемоеПоле      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоДанных");
	КонецЕсли;
	
	Если Формат(Объект.ДатаОтчета,"ДФ=dd.MM.yyyy") <= Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy") Тогда 
		Элементы.ПериодМинус7.Доступность = Ложь;
	Иначе 
		Элементы.ПериодМинус7.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	ПараметрыФормы = Новый Структура("табАид_РеквизитыПостроенияИерарахии, табАид_ВыводитьДоговор", ЭтотОбъект.НастройкаИерархии, ЭтотОбъект.НастройкаВыводитьДоговор);
	Оповещение = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект, );
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаНастройкиИерархииДерева", ПараметрыФормы, ЭтотОбъект,,,,
	Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Не Ответ = Неопределено и ТипЗнч(Ответ) = Тип("Структура") тогда
		//обработаем настройку и поместим ее в ХранилищеОбщихНастроек
		ЭтотОбъект.НастройкаИерархии.Очистить();
		Для Каждого ЭлементНастройки из Ответ.РеквизитыВыбранные Цикл
			ЭтотОбъект.НастройкаИерархии.Добавить(ЭлементНастройки.Значение, ЭлементНастройки.Представление);
		КонецЦикла;
		ЭтотОбъект.НастройкаВыводитьДоговор = Ответ.ВыводитьДоговор;
		Элементы.ДеревоДанныхДоговор.Видимость = ЭтотОбъект.НастройкаВыводитьДоговор;		
		ПолучитьДанные(Неопределено);
		СохранитьНастройкиТАБАИДНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиИерархииПоУмолчаниюНаСервере()
	
	//настройка согласно ТЗ
	ЭтотОбъект.НастройкаИерархии.Добавить("ИнтервалЗадолженности", "Интервал задолженности");
	ЭтотОбъект.НастройкаИерархии.Добавить("ВидДоговора",           "Вид договора");
	ЭтотОбъект.НастройкаИерархии.Добавить("Организация", "Организация");
	Если Объект.ДетализацияОтчета <> 1 Тогда 
		ЭтотОбъект.НастройкаИерархии.Добавить("Контрагент", "Контрагент");	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура СохранитьНастройкиТАБАИДНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("табАид_ВиртуальныйМенеджер", "табАид_РеквизитыПостроенияИерарахии", ЭтотОбъект.НастройкаИерархии);
	ХранилищеОбщихНастроек.Сохранить("табАид_ВиртуальныйМенеджер", "табАид_ВыводитьДоговор", ЭтотОбъект.НастройкаВыводитьДоговор);
	ХранилищеОбщихНастроек.Сохранить("табАид_ВиртуальныйМенеджер", "табАид_ДетализацияОтчета",Объект.ДетализацияОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы тогда
		СохранитьНастройкиТАБАИДНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ДатаАктуальностиРасчетов.Видимость = Не НоваяАрхитектураВзаиморасчетов();
	
	ПолучитьДанные(Неопределено);
	ОбновитьПредставлениеПериода();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗначенийПараметровДляСообщений()
	
	СтруктураПараметров = Новый Структура();
	
	РеквизитДеревоДанных = РеквизитФормыВЗначение("ДеревоДанных");
	Для каждого КолонкаДерева из РеквизитДеревоДанных.Колонки Цикл
		СтруктураПараметров.Вставить(КолонкаДерева.Имя);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура СформироватьИОтправитьСообщение(ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		и ДополнительныеПараметры.Свойство("ТекущийОтбор") тогда
		
		Результат = СформироватьИОтправитьСообщениеНаСервере(ДополнительныеПараметры.ТекущийОтбор, 
		ДополнительныеПараметры.ЗначенияРеквизитовСообщения, 
		УникальныйИдентификатор);	
		
		Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось отправить сообщение по причине: " + Результат.ОписаниеОшибки);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сообщение отправлено успешно.");
			
			Если ДополнительныеПараметры.ТекущийОтбор.РазовоеУведомление Тогда
				//УдалитьРазовоеУведомление(ДополнительныеПараметры.ТекущийОтбор);
			КонецЕсли;
		КонецЕсли;
		//Обновляем данные.
		ПолучитьДанные(Неопределено);
	иначе
		//ошибка передачи параметров
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьРазовоеУведомление(ПараметрыПравила)
	табАид_ОбщегоНазначенияПереопределяемый.УдалитьРазовоеУведомление(ПараметрыПравила);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИОтправитьСообщениеНаСервере(ТекущийОтбор, ЗначенияРеквизитовСообщения, УникальныйИдентификатор)
	
	Если ТекущийОтбор.ТипСообщения = Перечисления.табАид_ТипыСообщений.Email Тогда
		ВидСообщения = "Почта";
	ИначеЕсли ТекущийОтбор.ТипСообщения = Перечисления.табАид_ТипыСообщений.SMS Тогда
		ВидСообщения = "СообщениеSMS";
	ИначеЕсли ТекущийОтбор.ТипСообщения = Перечисления.табАид_ТипыСообщений.ГолосовоеСообщение Тогда
		ВидСообщения = "ГолосовоеСообщение";
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
	ПараметрыОтправки = ШаблоныСообщенийКлиентСервер.КонструкторПараметровОтправки(ТекущийОтбор.ШаблонСообщения, Неопределено, УникальныйИдентификатор);
	ПараметрыОтправки.ДополнительныеПараметры.ВидСообщения = ВидСообщения;
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КлючРегламентногоЗадания", ТекущийОтбор.КлючРегламентногоЗадания);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("КлючПравила", ТекущийОтбор.КлючПравила);
	ПараметрыОтправки.Вставить("Валюта",ЗначенияРеквизитовСообщения.Валюта);
	ПараметрыОтправки.ДополнительныеПараметры.Вставить("табАид_ЗначенияРеквизитовСообщения", ЗначенияРеквизитовСообщения);
	ПараметрыОтправки.ДополнительныеПараметры.ПреобразовыватьHTMLДляФорматированногоДокумента = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыОтправки.ДополнительныеПараметры.УчетнаяЗапись = табАид_ШаблоныСообщенийСлужебный.ПолучитьПочтовыйАдресДляОтправки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат табАид_ШаблоныСообщенийСлужебный.СформироватьСообщениеИОтправить(ПараметрыОтправки);	
	
КонецФункции

&НаКлиенте
Процедура Журнал()
	ОткрытьФорму("Отчет.табАид_ЖурналСобытий.Форма", 
	, 
	ЭтотОбъект, 
	Истина, 
	);		
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытий(Команда)
	Журнал();
КонецПроцедуры

&НаСервере
Процедура ДобавитьСобытияВСписокДействий(Параметры, СписокВыбора)
	
	//Очищаем таблицу связей.
	СвязьКомандыИСобытия.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ЖурналСобытий.Партнер КАК Партнер,
	|	табАид_ЖурналСобытий.ОбъектРасчетов КАК ОбъектРасчетов,
	|	табАид_ЖурналСобытий.ДатаВремяСобытия КАК ДатаВремяСобытия,
	|	табАид_ЖурналСобытий.ТипСообщения КАК ТипСообщения,
	|	табАид_ЖурналСобытий.УникальныйКлючЗаписи КАК УникальныйКлючЗаписи,
	|	табАид_ЖурналСобытий.КлючРегламентногоЗадания КАК КлючРегламентногоЗадания,
	|	табАид_ЖурналСобытий.КлючПравила КАК КлючПравила
	|ИЗ
	|	РегистрСведений.табАид_ЖурналСобытий КАК табАид_ЖурналСобытий
	|ГДЕ
	|	табАид_ЖурналСобытий.Партнер = &Партнер
	|	И табАид_ЖурналСобытий.ОбъектРасчетов = &ОбъектРасчетов
	|	И НАЧАЛОПЕРИОДА(табАид_ЖурналСобытий.ДатаВремяСобытия, ДЕНЬ) = &ДатаВремяСобытия
	|	И табАид_ЖурналСобытий.Сумма = &Сумма
	|
	|УПОРЯДОЧИТЬ ПО
	|	табАид_ЖурналСобытий.ТипСообщения,
	|	табАид_ЖурналСобытий.ДатаВремяСобытия";
	
	Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
	Запрос.УстановитьПараметр("ОбъектРасчетов", Параметры.ОбъектРасчетов);
	Запрос.УстановитьПараметр("ДатаВремяСобытия", НачалоДня(Параметры.ДатаСобытия));
	Запрос.УстановитьПараметр("Сумма", Параметры.Сумма);
	
	Результат = Запрос.Выполнить().Выгрузить();
	//Формируем список действий в контекстном меню.
	к = 1;
	Для каждого СтрРез из Результат Цикл
		ИмяКоманды = "ОткрытиеСообщения_" + Формат(к, "ЧГ=");
		
		СписокВыбора.Добавить(ИмяКоманды, "Открыть сообщение " + СокрЛП(СтрРез.ТипСообщения) + " (" +  СокрЛП(СтрРез.ДатаВремяСобытия) + ")");
		
		НовСтрока = СвязьКомандыИСобытия.Добавить();
		НовСтрока.ИмяКоманды = ИмяКоманды;
		НовСтрока.ТипСообщения = СтрРез.ТипСообщения;
		НовСтрока.ДатаВремяСобытия = СтрРез.ДатаВремяСобытия;
		НовСтрока.УникальныйКлючЗаписи = СтрРез.УникальныйКлючЗаписи;
		НовСтрока.КлючРегламентногоЗадания = СтрРез.КлючРегламентногоЗадания;
		НовСтрока.КлючПравила = СтрРез.КлючПравила;
		к = к + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеСообщения(ИмяКоманды, ДополнительныеПараметры)
	
	Отбор = Новый Структура("ИмяКоманды", ИмяКоманды);
	МассивТиповСообщений = СвязьКомандыИСобытия.НайтиСтроки(Отбор);
	
	Если МассивТиповСообщений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипСообщения = МассивТиповСообщений[0].ТипСообщения;
	ДатаВремяСобытия = МассивТиповСообщений[0].ДатаВремяСобытия;
	УникальныйКлючЗаписи = МассивТиповСообщений[0].УникальныйКлючЗаписи;
	КлючРегламентногоЗадания = МассивТиповСообщений[0].КлючРегламентногоЗадания;
	КлючПравила = МассивТиповСообщений[0].КлючПравила;
	
	ПараметрыЗаписи = Новый Структура("Партнер, ОбъектРасчетов,РасчетныйДокумент, ТипСообщения, ДатаВремяСобытия, УникальныйКлючЗаписи, КлючРегламентногоЗадания, КлючПравила", 
	ДополнительныеПараметры.Партнер, ДополнительныеПараметры.ОбъектРасчетов, ДополнительныеПараметры.РасчетныйДокумент,ТипСообщения, ДатаВремяСобытия, УникальныйКлючЗаписи, КлючРегламентногоЗадания, КлючПравила);
	ОткрытьФорму("РегистрСведений.табАид_ЖурналСобытий.ФормаЗаписи", Новый Структура("Ключ", ПолучитьКлючЗаписиЖурналаСобытий(ПараметрыЗаписи)));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиЖурналаСобытий(ПараметрыЗаписи)
	
	Возврат РегистрыСведений.табАид_ЖурналСобытий.СоздатьКлючЗаписи(ПараметрыЗаписи);
	
КонецФункции

&НаСервере
Процедура ВключитьИсключитьПартнера(Партнер, Действие)
	
	Если Действие = "ВключитьВРассылку" Тогда
		табАид_ОбщегоНазначенияПереопределяемый.ВключитьПартнераВРассылку(Партнер);
	ИначеЕсли Действие = "ИсключитьИзРассылки" тогда
		табАид_ОбщегоНазначенияПереопределяемый.ИсключитьПартнераИзРассылки(Партнер);	
	КонецЕсли;
	ПолучитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРегламентныхЗаданий(Команда)
	ОбновитьСписокКлючейРЗ();
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентныеИФоновыеЗадания", Новый Структура("МассивКлючейРЗ", СписокКлючейРЗ.ВыгрузитьЗначения()), ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКлючейРЗ()
	СписокКлючейРЗ.Очистить();
	ВыполненЗапускРЗ = Ложь;
	
	МассивКлючейРЗ = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьМассивКлючейРЗ();
	СписокКлючейРЗ.ЗагрузитьЗначения(МассивКлючейРЗ);
	
	Если СписокКлючейРЗ.Количество() > 0 Тогда
		ВыполненЗапускРЗ = Истина;
	КонецЕсли;
	
	Элементы.ФормаПускРегламентныхЗаданийТАБАИД.Доступность = Не ВыполненЗапускРЗ;
	Элементы.ФормаСтопРегламентныхЗаданийТАБАИД.Доступность = ВыполненЗапускРЗ;
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныСообщений(Команда)
	
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаФормированияСобытий(Команда)
	
	ОткрытьФорму("РегистрСведений.табАид_ПравилаФормированияСобытий.Форма.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАвторизации(Команда)
	
	КлючЗаписиНастроек = ПолучитьКлючЗаписиНастроек();
	Если КлючЗаписиНастроек = неопределено Тогда
		ОткрытьФорму("РегистрСведений.табАид_Настройки.ФормаЗаписи");
	Иначе
		ОткрытьФорму("РегистрСведений.табАид_Настройки.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиНастроек));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписиНастроек()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_Настройки.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.табАид_Настройки КАК табАид_Настройки";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат РегистрыСведений.табАид_Настройки.СоздатьКлючЗаписи(Новый Структура("Организация", Результат.Организация));
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВариантыКлассификацииЗадолженности(Команда)
	ОткрытьФорму("Справочник.ВариантыКлассификацииЗадолженности.ФормаСписка", 
	, 
	ЭтотОбъект, 
	Истина, 
	);		
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаПриИзменении(Элемент)
	ДанныеОтчетаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДанныеОтчетаПриИзмененииНаСервере()
	
	Если Объект.ДанныеОтчета = 2 Тогда
		Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	ПолучитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиДЗ(Команда)
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаДатаАктуальностиДЗ", 
	,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуАктуальностиДЗ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	табАид_ДатаАктуальностиДЗ.ДатаАктуальностиДЗ КАК ДатаАктуальностиДЗ
	|ИЗ
	|	РегистрСведений.табАид_ДатаАктуальностиДЗ КАК табАид_ДатаАктуальностиДЗ
	|ГДЕ
	|	табАид_ДатаАктуальностиДЗ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ДатаАктуальностиДЗ;
	КонецЕсли;
	Возврат Дата(1, 1, 1);
КонецФункции

&НаКлиенте
Процедура СкачатьИнструкцию(Команда)
	
	Инструкция_ДД = ПолучитьИнструкциюДД();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайловНаКлиенте", ЭтаФорма);
	
	Адрес = ПоместитьВоВременноеХранилище(Инструкция_ДД);
	Файл = Новый ОписаниеПередаваемогоФайла("Инструкция_ТАБАИД", Адрес);
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Файл);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Фильтр = НСтр("ru = 'pdf'; en = 'pdf'")
	+ "(*.pdf)|*.pdf";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ДиалогОткрытияФайла, Истина);
КонецПроцедуры
&НаКлиенте
Процедура ПослеСохраненияФайловНаКлиенте(ПолученныеФайлы, ДополнительныеПараметры) Экспорт 
	//ПроверитьФайлыНаКлиенте();		
КонецПроцедуры
&НаСервере
Функция ПолучитьИнструкциюДД()
	Возврат Обработки.табАид_ВиртуальныйМенеджер.ПолучитьМакет("Инструкция");
КонецФункции
&НаКлиенте
Процедура УдалитьПравилоУведомленияФорма(Команда)
	ТекДанные = Элементы.ДеревоДанных.ТекущиеДанные;
	ТекЭлемент = Элементы.ДеревоДанных.ТекущийЭлемент;
	Если СтрНайти(ТекЭлемент.Имя, "ТекДатаПлюс") Тогда 
		ИмяОтбора = СтрЗаменить(Прав(ТекЭлемент.Имя,20),"Картинка","Отбор");
		ТекОтбор = ТекДанные[ИмяОтбора];
		Если ТекОтбор <> Неопределено Тогда 
			СписокПравил = Новый СписокЗначений;
			СписокПравил.ЗагрузитьЗначения(ТекОтбор.МассивКлючейПравил);
			
			СмещениеДней = Число(Сред(ТекЭлемент.Имя, 24, 1));
			ДатаСобытия = НачалоДня(Объект.ДатаОтчета) + 24*60*60*СмещениеДней;
			
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДеньНедели",ДеньНедели(ДатаСобытия));
			ДополнительныеПараметры.Вставить("СписокПравил",СписокПравил);
			УдалитьПравило(ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область НоваяАрхитектура

&НаКлиенте
Процедура ПереходНаНовуюАрхитектуруЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Результат = ЗапуститьРаспределениеРасчетовФоновымЗаданием();
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		Если Результат.Статус = "Выполняется" Тогда
			ИдентификаторЗадания = Результат.ИдентификаторЗадания;
			ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2; // Уменьшим шаг увеличения времени опроса выполнения задания
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРаспределения", 1, Истина);
		Иначе
			РаспределениеВыполнено();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьРаспределениеРасчетовФоновымЗаданием ()
	
	ПараметрыЭкспортнойПроцедуры = Новый Структура;
	ПараметрыЭкспортнойПроцедуры.Вставить("ОкончаниеПериодаРасчета", ТекущаяДатаСеанса());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =НСтр("ru = 'Выполняется распределение офлайн расчетов';
	|en = 'Allocating offline settlements'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ОперативныеВзаиморасчетыСервер.РассчитатьВсе",
	ПараметрыЭкспортнойПроцедуры,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РаспределениеВыполнено()
	
	Результат = ЗаполнитьРегистрыРасчетовНаСервере();
	Если Результат.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала = 1.2; // Уменьшим шаг увеличения времени опроса выполнения задания
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
	Иначе
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		УстановитьНовуюАрхитектуру();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРегистрыРасчетовНаСервере()
	
	ПараметрыЭкспортнойПроцедуры = Новый Структура;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение регистров расчетов в новой архитектуре';
	|en = 'Fill in calculation registers in the new architecture'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ОперативныеВзаиморасчетыСервер.ЗаполнитьРегистрыПриВключенииНовойАрхитектуры",
	ПараметрыЭкспортнойПроцедуры,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				УстановитьНовуюАрхитектуру();
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		РежимРаспределенияВзаиморасчетов = Ложь;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовуюАрхитектуру()
	
	Константы.НоваяАрхитектураВзаиморасчетов.Установить(Истина);
	Константы.НеНоваяАрхитектураВзаиморасчетов.Установить(Ложь);
	
	Элементы.ВключатьЗадолженность.Видимость = Истина;
	Элементы.ДекорацияСтараяАрхитектура.Видимость = Ложь;
	ВключатьЗадолженность = табАид_ОбщегоНазначенияПереопределяемый.ПолучитьНастройкуЗадолженности(); 
	
	ПолучитьДанныеНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ВключатьЗадолженностьПриИзменении(Элемент)
	ВключатьЗадолженностьПриИзмененииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ВключатьЗадолженностьПриИзмененииНаСервере()
	
	ПолучитьДанныеНаСервере();
	
	Набор = РегистрыСведений.табАид_Настройки.СоздатьНаборЗаписей();
	Набор.Прочитать();
	
	Если Набор.Количество() = 1 Тогда
		Набор[0].ВключатьЗадолженность = ВключатьЗадолженность;
		Набор.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСтараяАрхитектураНажатие(Элемент)
	Если Не НоваяАрхитектураВзаиморасчетов() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПереходНаНовуюАрхитектуруЗавершение", ЭтотОбъект),
		"Вы хотите перейти на онлайн взаиморасчёты?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УдалитьПравило(ДополнительныеПараметры)
	
	ПараметрыОткрытия = Новый Структура("ДополнительныеПараметры",ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаУдаленияПравил",ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Функция ВернутьКонстанту(лпТип)
	Если лпТип = 1 Тогда 
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	ИначеЕсли лпТип = 2 Тогда 
		Возврат Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПолучитьДанные" Тогда 
		ПолучитьДанные(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "НастрокаВМ" Тогда 
		Объект.ДанныеОтчета = Параметр.ДанныеОтчета;
		Если Объект.ДанныеОтчета = 1 Тогда 
			Объект.Валюта = ВернутьКонстанту(1);
		Иначе 
			Объект.Валюта = ВернутьКонстанту(2);
		КонецЕсли;
		
		Объект.ДетализацияОтчета = Параметр.ДетализацияОтчета;
		Если Объект.ДетализацияОтчета <> 1 Тогда 
			Элементы.ДеревоДанныхОбъектРасчетов.Видимость = Ложь;
		Иначе 
			Элементы.ДеревоДанныхОбъектРасчетов.Видимость = Истина;
		КонецЕсли;
		
		ЭтотОбъект.ВсеДолги = Параметр.ВсеДолги;
		ПолучитьДанные(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПриИзменении(Элемент)
	ПолучитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияОтчетаПриИзменении(Элемент)
	
	Если Объект.ДетализацияОтчета <> 1 Тогда 
		ЭтотОбъект.НастройкаИерархии.Добавить("Контрагент", "Контрагент");	
		Элементы.ДеревоДанныхОбъектРасчетов.Видимость = Ложь;
	Иначе 
		НайденныйЭлемент  = ЭтотОбъект.НастройкаИерархии.НайтиПоЗначению("Контрагент");
		Если НайденныйЭлемент <> Неопределено Тогда
			ЭтотОбъект.НастройкаИерархии.Удалить(НайденныйЭлемент);
			
		КонецЕсли;
		Элементы.ДеревоДанныхОбъектРасчетов.Видимость = Истина;
	КонецЕсли;
	
	ПолучитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВиртуальногоМенеджера(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДетализацияОтчета",Объект.ДетализацияОтчета);
	ПараметрыОткрытия.Вставить("ДанныеОтчета",Объект.ДанныеОтчета);
	ПараметрыОткрытия.Вставить("ВсеДолги",ЭтотОбъект.ВсеДолги);
	ОткрытьФорму("Обработка.табАид_ВиртуальныйМенеджер.Форма.ФормаНастройкиВМ",ПараметрыОткрытия 
	,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеПравилоУведомленияФорма(Команда)
	ДобавитьНовоеПравило();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьФорма(Команда)
	ПолучитьДанные(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийФорма(Команда)
	Журнал();
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовПоСрокамФорма(Команда)
	ЗадолженностьКлиентов();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ПолучитьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СправочникВылюты(Команда)
	ОткрытьФорму("Справочник.Валюты.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
